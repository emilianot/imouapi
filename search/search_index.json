{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"imouapi \u00b6 This python library helps in interacting with Imou Life Open API for remote controlling programmatically your Imou devices , especially those settings such as motion detection, human detection, privacy, etc that can be changed by the Imou Life App only. Features \u00b6 Provide classes for both low level API interaction as well as device and sensors abastractions Exceptions and error handling Based on asyncio module Quickstart \u00b6 Install the library with pip install imouapi Register a developer account on Imou Life Open API and get your appId and appSecret Instantiate the Imou API client ( from imouapi.api import ImouAPIClient ) and initialize it (e.g. api_client = ImouAPIClient(app_id, app_secret, session) ) Discover registered devices by importing the Discover service ( from imouapi.device import ImouDiscoverService ), inializing it (e.g. discover_service = ImouDiscoverService(api_client) ) and running a discovery (e.g. discovered_devices = await discover_service.async_discover_devices() ) Either use the high level API by importing the Imou Device class ( from imouapi.device import ImouDevice ) and initializing it (e.g. device = ImouDevice(api_client, device_id) ) or using directly the low level API provided by ImouAPIClient to interact with the device Full details on the installation process, requirements, usage and classes and methods made available by the library are available at https://user2684.github.io/imouapi","title":"Home"},{"location":"#imouapi","text":"This python library helps in interacting with Imou Life Open API for remote controlling programmatically your Imou devices , especially those settings such as motion detection, human detection, privacy, etc that can be changed by the Imou Life App only.","title":"imouapi"},{"location":"#features","text":"Provide classes for both low level API interaction as well as device and sensors abastractions Exceptions and error handling Based on asyncio module","title":"Features"},{"location":"#quickstart","text":"Install the library with pip install imouapi Register a developer account on Imou Life Open API and get your appId and appSecret Instantiate the Imou API client ( from imouapi.api import ImouAPIClient ) and initialize it (e.g. api_client = ImouAPIClient(app_id, app_secret, session) ) Discover registered devices by importing the Discover service ( from imouapi.device import ImouDiscoverService ), inializing it (e.g. discover_service = ImouDiscoverService(api_client) ) and running a discovery (e.g. discovered_devices = await discover_service.async_discover_devices() ) Either use the high level API by importing the Imou Device class ( from imouapi.device import ImouDevice ) and initializing it (e.g. device = ImouDevice(api_client, device_id) ) or using directly the low level API provided by ImouAPIClient to interact with the device Full details on the installation process, requirements, usage and classes and methods made available by the library are available at https://user2684.github.io/imouapi","title":"Quickstart"},{"location":"changelog/","text":"Changelog \u00b6 [1.0.11] (2022-12-11) \u00b6 Added \u00b6 sleepable , status attributes and get_sleepable() , get_status() , async_refresh_status() , async_wakeup() functions to ImouDevice status sensor get_api_client() set_wait_after_wakeup() , get_wait_after_wakeup() , set_camera_wait_before_download() , get_camera_wait_before_download() to ImouDevice Changed \u00b6 Device is now marked online if either online or dormant [1.0.10] (2022-12-03) \u00b6 Added \u00b6 Support for setDeviceSnapEnhanced , bindDeviceLive , queryLiveStatus , liveList , unbindLive Imou APIs through `async_api_setDeviceSnapEnhanced() , async_api_bindDeviceLive() , async_api_getLiveStreamInfo() , async_apiliveList() , async_api_unbindLive() and CLI commands async_get_image() and async_get_stream_url() to ImouCamera class and CLI commands get_camera_image and get_camera_stream [1.0.9] (2022-11-26) \u00b6 Added \u00b6 ImouCamera class exposing async_service_ptz_location() and async_service_ptz_move() Changed \u00b6 Usage page of the documentation [1.0.8] (2022-11-26) \u00b6 Added \u00b6 Support for devicePTZInfo , controlLocationPTZ , controlMovePTZ Imou APIs through `async_api_devicePTZInfo() , async_api_controlLocationPTZ() , async_api_controlMovePTZ() and CLI commands [1.0.7] (2022-11-20) \u00b6 Added \u00b6 ImouSiren class, get_siren() and set_siren() to cli Removed \u00b6 siren switch, now implemented as ImouSiren [1.0.6] (2022-11-19) \u00b6 Added \u00b6 Attributes to ImouEntity class and get_attributes() motionDetection binary sensor and refreshAlarm button Removed \u00b6 lastAlarm sensor [1.0.5] (2022-11-13) \u00b6 Added \u00b6 Support for restartDevice , deviceSdcardStatus Imou APIs through async_api_restartDevice() , async_api_deviceSdcardStatus() and CLI commands Support for \"Activate Siren\" switch ImouButton class and restartDevice , refreshData buttons Support for press_button to CLI Support for callbackUrl sensor set_device() function to ImouEntity Changed \u00b6 Reviewed switches' labels Fixed \u00b6 Storage used sensor now reporting None when SD card is not present [1.0.4] (2022-10-22) \u00b6 Added \u00b6 ImouSelect class and support for nightVisionMode select get_select and set_select commands to CLI pushNotifications switch Changed \u00b6 Sensors (not only switches) are now added based on the available capabilities [1.0.3] (2022-10-22) \u00b6 Added \u00b6 Support for not documented WLM capability Support for undocumented capabilities or capabilities inherited from other capabilities Support for deviceOpenList , deviceOpenBaseDetailList , listDeviceAbility , deviceStorage , getNightVisionMode , setNightVisionMode , getMessageCallback , setMessageCallback APIs through async_api_deviceOpenList() , async_api_deviceOpenBaseDetailList() , async_api_listDeviceAbility() , async_api_deviceStorage() , async_api_getNightVisionMode() , async_api_setNightVisionMode() , async_api_getMessageCallback() , async_api_getMessageCallbackOn() , async_api_setMessageCallbackOff() api_deviceBaseList , api_deviceOpenList , api_deviceBaseDetailList , api_deviceOpenDetailList , api_getDeviceCameraStatus , api_setDeviceCameraStatus , api_listDeviceAbility , api_getAlarmMessage , api_deviceStorage , api_getNightVisionMode , api_setNightVisionMode , api_getMessageCallback , api_getMessageCallbackOn , api_getMessageCallbackOff commands to CLI Changed \u00b6 async_api_getAlarmMessage() now returning the last 10 alarms of the month, not just the last one Removed \u00b6 get_device_class() from ImouSensor [1.0.2] (2022-10-19) \u00b6 Fixed \u00b6 Switches mapping to versioned capabilities are now created (e.g. audioEncodeControl for capability AudioEncodeControlV2) [1.0.1] (2022-10-16) \u00b6 Added \u00b6 get_diagnostics() method to ImouDevice class get_diagnostics command to CLI [1.0.0] (2022-10-15) \u00b6 Added \u00b6 --log-http-requests option to CLI Fixed \u00b6 Last Alarm sensor unable to retrieve most recent alarms Last Alarm sensor shifted ahead by the local timezone [0.2.2] (2022-10-07) \u00b6 Added \u00b6 Test cases for most of the classes [0.2.1] (2022-10-04) \u00b6 Added \u00b6 Test cases for ImouAPIClient Access Token expiration handling [0.2.0] (2022-10-03) \u00b6 Added \u00b6 get_sensor_by_name() and get_all_sensors() added to ImouDevice class Changed \u00b6 ImouDiscoverService and ImouDevice now take an instance of ImouAPIClient to initialize In ImouDiscoverService and ImouDevice , moved base_url and timeout from constructor to function set_base_url() and set_timeout() There is no more concept of supported switches, all of those discovered, are made available and can be controlled Sensors' icons moved out of the this library since not applicable in this context ImouDevice get_sensors() renamed in get_sensors_by_platform() If connection failes, multiple retries are done Partial refactoring of the code Removed \u00b6 async_connect() from both ImouDevice and ImouDiscoverService . Connection takes place at the first API call [0.1.5] (2022-09-28) \u00b6 Added \u00b6 ImouAPIClient.log_http_requests() for enabling http request/response logging (off by default) If http logging is enabled, log messages are redacted from sensitive information ImouAPIClient.redact_log_message() for enabling log redaction (on by default) Changed \u00b6 Moved info logs into debug level By default, with debug level, no more logging HTTP requests and responses [0.1.4] (2022-09-28) \u00b6 Added \u00b6 Github workflow to publish on PyPI Changed \u00b6 Updated documentation [0.1.3] (2022-09-27) \u00b6 Changed \u00b6 API base URL and API timeout are not optional parameters and can be provided by the user Updated CLI, added logging level Updated documentation [0.1.2] (2022-09-27) \u00b6 Changed \u00b6 Re-organized the file structure Updated documentation [0.1.1] (2022-09-27) \u00b6 Added \u00b6 First development release [0.1.0] (2022-09-26) \u00b6 Added \u00b6 First commit","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#1011-2022-12-11","text":"","title":"[1.0.11] (2022-12-11)"},{"location":"changelog/#added","text":"sleepable , status attributes and get_sleepable() , get_status() , async_refresh_status() , async_wakeup() functions to ImouDevice status sensor get_api_client() set_wait_after_wakeup() , get_wait_after_wakeup() , set_camera_wait_before_download() , get_camera_wait_before_download() to ImouDevice","title":"Added"},{"location":"changelog/#changed","text":"Device is now marked online if either online or dormant","title":"Changed"},{"location":"changelog/#1010-2022-12-03","text":"","title":"[1.0.10] (2022-12-03)"},{"location":"changelog/#added_1","text":"Support for setDeviceSnapEnhanced , bindDeviceLive , queryLiveStatus , liveList , unbindLive Imou APIs through `async_api_setDeviceSnapEnhanced() , async_api_bindDeviceLive() , async_api_getLiveStreamInfo() , async_apiliveList() , async_api_unbindLive() and CLI commands async_get_image() and async_get_stream_url() to ImouCamera class and CLI commands get_camera_image and get_camera_stream","title":"Added"},{"location":"changelog/#109-2022-11-26","text":"","title":"[1.0.9] (2022-11-26)"},{"location":"changelog/#added_2","text":"ImouCamera class exposing async_service_ptz_location() and async_service_ptz_move()","title":"Added"},{"location":"changelog/#changed_1","text":"Usage page of the documentation","title":"Changed"},{"location":"changelog/#108-2022-11-26","text":"","title":"[1.0.8] (2022-11-26)"},{"location":"changelog/#added_3","text":"Support for devicePTZInfo , controlLocationPTZ , controlMovePTZ Imou APIs through `async_api_devicePTZInfo() , async_api_controlLocationPTZ() , async_api_controlMovePTZ() and CLI commands","title":"Added"},{"location":"changelog/#107-2022-11-20","text":"","title":"[1.0.7] (2022-11-20)"},{"location":"changelog/#added_4","text":"ImouSiren class, get_siren() and set_siren() to cli","title":"Added"},{"location":"changelog/#removed","text":"siren switch, now implemented as ImouSiren","title":"Removed"},{"location":"changelog/#106-2022-11-19","text":"","title":"[1.0.6] (2022-11-19)"},{"location":"changelog/#added_5","text":"Attributes to ImouEntity class and get_attributes() motionDetection binary sensor and refreshAlarm button","title":"Added"},{"location":"changelog/#removed_1","text":"lastAlarm sensor","title":"Removed"},{"location":"changelog/#105-2022-11-13","text":"","title":"[1.0.5] (2022-11-13)"},{"location":"changelog/#added_6","text":"Support for restartDevice , deviceSdcardStatus Imou APIs through async_api_restartDevice() , async_api_deviceSdcardStatus() and CLI commands Support for \"Activate Siren\" switch ImouButton class and restartDevice , refreshData buttons Support for press_button to CLI Support for callbackUrl sensor set_device() function to ImouEntity","title":"Added"},{"location":"changelog/#changed_2","text":"Reviewed switches' labels","title":"Changed"},{"location":"changelog/#fixed","text":"Storage used sensor now reporting None when SD card is not present","title":"Fixed"},{"location":"changelog/#104-2022-10-22","text":"","title":"[1.0.4] (2022-10-22)"},{"location":"changelog/#added_7","text":"ImouSelect class and support for nightVisionMode select get_select and set_select commands to CLI pushNotifications switch","title":"Added"},{"location":"changelog/#changed_3","text":"Sensors (not only switches) are now added based on the available capabilities","title":"Changed"},{"location":"changelog/#103-2022-10-22","text":"","title":"[1.0.3] (2022-10-22)"},{"location":"changelog/#added_8","text":"Support for not documented WLM capability Support for undocumented capabilities or capabilities inherited from other capabilities Support for deviceOpenList , deviceOpenBaseDetailList , listDeviceAbility , deviceStorage , getNightVisionMode , setNightVisionMode , getMessageCallback , setMessageCallback APIs through async_api_deviceOpenList() , async_api_deviceOpenBaseDetailList() , async_api_listDeviceAbility() , async_api_deviceStorage() , async_api_getNightVisionMode() , async_api_setNightVisionMode() , async_api_getMessageCallback() , async_api_getMessageCallbackOn() , async_api_setMessageCallbackOff() api_deviceBaseList , api_deviceOpenList , api_deviceBaseDetailList , api_deviceOpenDetailList , api_getDeviceCameraStatus , api_setDeviceCameraStatus , api_listDeviceAbility , api_getAlarmMessage , api_deviceStorage , api_getNightVisionMode , api_setNightVisionMode , api_getMessageCallback , api_getMessageCallbackOn , api_getMessageCallbackOff commands to CLI","title":"Added"},{"location":"changelog/#changed_4","text":"async_api_getAlarmMessage() now returning the last 10 alarms of the month, not just the last one","title":"Changed"},{"location":"changelog/#removed_2","text":"get_device_class() from ImouSensor","title":"Removed"},{"location":"changelog/#102-2022-10-19","text":"","title":"[1.0.2] (2022-10-19)"},{"location":"changelog/#fixed_1","text":"Switches mapping to versioned capabilities are now created (e.g. audioEncodeControl for capability AudioEncodeControlV2)","title":"Fixed"},{"location":"changelog/#101-2022-10-16","text":"","title":"[1.0.1] (2022-10-16)"},{"location":"changelog/#added_9","text":"get_diagnostics() method to ImouDevice class get_diagnostics command to CLI","title":"Added"},{"location":"changelog/#100-2022-10-15","text":"","title":"[1.0.0] (2022-10-15)"},{"location":"changelog/#added_10","text":"--log-http-requests option to CLI","title":"Added"},{"location":"changelog/#fixed_2","text":"Last Alarm sensor unable to retrieve most recent alarms Last Alarm sensor shifted ahead by the local timezone","title":"Fixed"},{"location":"changelog/#022-2022-10-07","text":"","title":"[0.2.2] (2022-10-07)"},{"location":"changelog/#added_11","text":"Test cases for most of the classes","title":"Added"},{"location":"changelog/#021-2022-10-04","text":"","title":"[0.2.1] (2022-10-04)"},{"location":"changelog/#added_12","text":"Test cases for ImouAPIClient Access Token expiration handling","title":"Added"},{"location":"changelog/#020-2022-10-03","text":"","title":"[0.2.0] (2022-10-03)"},{"location":"changelog/#added_13","text":"get_sensor_by_name() and get_all_sensors() added to ImouDevice class","title":"Added"},{"location":"changelog/#changed_5","text":"ImouDiscoverService and ImouDevice now take an instance of ImouAPIClient to initialize In ImouDiscoverService and ImouDevice , moved base_url and timeout from constructor to function set_base_url() and set_timeout() There is no more concept of supported switches, all of those discovered, are made available and can be controlled Sensors' icons moved out of the this library since not applicable in this context ImouDevice get_sensors() renamed in get_sensors_by_platform() If connection failes, multiple retries are done Partial refactoring of the code","title":"Changed"},{"location":"changelog/#removed_3","text":"async_connect() from both ImouDevice and ImouDiscoverService . Connection takes place at the first API call","title":"Removed"},{"location":"changelog/#015-2022-09-28","text":"","title":"[0.1.5] (2022-09-28)"},{"location":"changelog/#added_14","text":"ImouAPIClient.log_http_requests() for enabling http request/response logging (off by default) If http logging is enabled, log messages are redacted from sensitive information ImouAPIClient.redact_log_message() for enabling log redaction (on by default)","title":"Added"},{"location":"changelog/#changed_6","text":"Moved info logs into debug level By default, with debug level, no more logging HTTP requests and responses","title":"Changed"},{"location":"changelog/#014-2022-09-28","text":"","title":"[0.1.4] (2022-09-28)"},{"location":"changelog/#added_15","text":"Github workflow to publish on PyPI","title":"Added"},{"location":"changelog/#changed_7","text":"Updated documentation","title":"Changed"},{"location":"changelog/#013-2022-09-27","text":"","title":"[0.1.3] (2022-09-27)"},{"location":"changelog/#changed_8","text":"API base URL and API timeout are not optional parameters and can be provided by the user Updated CLI, added logging level Updated documentation","title":"Changed"},{"location":"changelog/#012-2022-09-27","text":"","title":"[0.1.2] (2022-09-27)"},{"location":"changelog/#changed_9","text":"Re-organized the file structure Updated documentation","title":"Changed"},{"location":"changelog/#011-2022-09-27","text":"","title":"[0.1.1] (2022-09-27)"},{"location":"changelog/#added_16","text":"First development release","title":"Added"},{"location":"changelog/#010-2022-09-26","text":"","title":"[0.1.0] (2022-09-26)"},{"location":"changelog/#added_17","text":"First commit","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/user2684/imouapi/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 imouapi could always use more documentation, whether as part of the official imouapi docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/user2684/imouapi/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up imouapi for local development. Fork the imouapi repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/imouapi.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/user2684/imouapi/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_imouapi.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/user2684/imouapi/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"imouapi could always use more documentation, whether as part of the official imouapi docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/user2684/imouapi/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up imouapi for local development. Fork the imouapi repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/imouapi.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/user2684/imouapi/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_imouapi.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Stable release \u00b6 To install imouapi, run this command in your terminal: $ pip install imouapi This is the preferred method to install imouapi, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for imouapi can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/user2684/imouapi Or download the tarball : $ curl -OJL https://github.com/user2684/imouapi/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#stable-release","text":"To install imouapi, run this command in your terminal: $ pip install imouapi This is the preferred method to install imouapi, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for imouapi can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/user2684/imouapi Or download the tarball : $ curl -OJL https://github.com/user2684/imouapi/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"requirements/","text":"A valid Imou Open API App Id and App Secret are required to use the library. In order to get them: Register an account on Imou Life if not done already Register a developer account on https://open.imoulife.com Open the Imou Console at https://open.imoulife.com/consoleNew/myApp/appInfo Go to \"My App\", \"App Information\" and click on Edit Fill in the required information and copy your AppId and AppSecret","title":"Requirements"},{"location":"usage/","text":"You can use the library in three different ways: Option 1: high-level API (Recommended) \u00b6 An abstraction over the API has been built to provide representations of devices and sensors: imouapi.device provides ImouDevice to represent an Imou devices and all its sensors and ImouDiscoverService which can be used to discover devices registered with the account imouapi.device_entity provides ImouSensor , ImouBinarySensor , ImouSwitch , etc. representing the sensors attached to the device. Upon loading, the library is capable of enumerating available capabilities of the device and instantiate only the switches that the device suports. The API of course allows to eventually control those switches. Examples on how to interact with ImouDevice and ImouDiscoverService are provided in the CLI implementation. Option 2: low-level API \u00b6 With from imouapi.api import ImouAPIClient and calling the provided methods for connecting and calling API endpoints. Details on the supported APIs are provided in each module's documentation. Examples on how to interact with ImouAPIClient is provided in the high-level API implementation. Option 3: CLI \u00b6 A command line interface is provided for testing and troubleshooting purposes. To get a list of supported commands and options run the following: python -m imouapi.cli --help Exception Handling \u00b6 The library provides a simplified way for handling exceptions: from imouapi.exceptions import ImouException try: await device.async_initialize() except ImouException as exception: _LOGGER.error(exception.to_string()) raise ImouException() from exception The ImouException class provides a to_string() method which returns the name of the exception which was raised and the full stacktrace.","title":"Usage"},{"location":"usage/#option-1-high-level-api-recommended","text":"An abstraction over the API has been built to provide representations of devices and sensors: imouapi.device provides ImouDevice to represent an Imou devices and all its sensors and ImouDiscoverService which can be used to discover devices registered with the account imouapi.device_entity provides ImouSensor , ImouBinarySensor , ImouSwitch , etc. representing the sensors attached to the device. Upon loading, the library is capable of enumerating available capabilities of the device and instantiate only the switches that the device suports. The API of course allows to eventually control those switches. Examples on how to interact with ImouDevice and ImouDiscoverService are provided in the CLI implementation.","title":"Option 1: high-level API (Recommended)"},{"location":"usage/#option-2-low-level-api","text":"With from imouapi.api import ImouAPIClient and calling the provided methods for connecting and calling API endpoints. Details on the supported APIs are provided in each module's documentation. Examples on how to interact with ImouAPIClient is provided in the high-level API implementation.","title":"Option 2: low-level API"},{"location":"usage/#option-3-cli","text":"A command line interface is provided for testing and troubleshooting purposes. To get a list of supported commands and options run the following: python -m imouapi.cli --help","title":"Option 3: CLI"},{"location":"usage/#exception-handling","text":"The library provides a simplified way for handling exceptions: from imouapi.exceptions import ImouException try: await device.async_initialize() except ImouException as exception: _LOGGER.error(exception.to_string()) raise ImouException() from exception The ImouException class provides a to_string() method which returns the name of the exception which was raised and the full stacktrace.","title":"Exception Handling"},{"location":"modules/api/","text":"Low-level API for interacting with Imou devices. ImouAPIClient \u00b6 Interact with IMOU API. Source code in imouapi/api.pyclass ImouAPIClient : \"\"\"Interact with IMOU API.\"\"\" def __init__ ( self , app_id : str , app_secret : str , session : ClientSession ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo session: aiohttp client session \"\"\" self . _app_id = app_id self . _app_secret = app_secret self . _session = session self . _base_url = API_URL self . _timeout = DEFAULT_TIMEOUT self . _log_http_requests_enabled = False self . _redact_log_message_enabled = True self . _access_token = None self . _access_token_expire_time = None self . _connected = False self . _retries = 1 _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url ) def _redact_log_message ( self , data : str ) -> str : \"\"\"Redact log messages to remove sensitive information.\"\"\" if not self . _redact_log_message_enabled : return data for keyword in ( \"appId\" , \"sign\" , \"token\" , \"accessToken\" , \"playToken\" , \"thumbUrl\" , \"picUrl\" ): for tick in ( ' \\\" ' , \"'\" ): data = re . sub ( f \" { tick }{ keyword }{ tick } : \\\\ s* { tick } [^ { tick } ]+ { tick } \" , f \" { tick }{ keyword }{ tick } : { tick } XXXXXXXXX { tick } \" , data , ) return data def get_base_url ( self ) -> str : \"\"\"Get base url for the API.\"\"\" return self . _base_url def set_base_url ( self , value : str ) -> None : \"\"\"Set a custom base url for the API.\"\"\" self . _base_url = value _LOGGER . debug ( \"Set endpoint URL to %s \" , self . _base_url ) def get_timeout ( self ) -> int : \"\"\"Get timeout for the API.\"\"\" return self . _timeout def set_timeout ( self , value : int ) -> None : \"\"\"Set a custom timeout.\"\"\" self . _timeout = value _LOGGER . debug ( \"Set timeout to %s \" , self . _base_url ) def set_session ( self , value : ClientSession ) -> None : \"\"\"Set an aiohttp client session.\"\"\" self . _session = value def get_session ( self ) -> ClientSession : \"\"\"Return the aiohttp client session.\"\"\" return self . _session def set_log_http_requests ( self , value : bool ) -> None : \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\" self . _log_http_requests_enabled = value def set_redact_log_messages ( self , value : bool ) -> None : \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\" self . _redact_log_message_enabled = value async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token\" ) self . _connected = True return True async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect () def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected async def _async_call_api ( self , api : str , payload : dict , is_connect_request : bool = False ) -> dict : # noqa: C901 \"\"\"Submit request to the HTTP API endpoint.\"\"\" # connect if not connected if not is_connect_request : while not self . is_connected (): _LOGGER . debug ( \"Connection attempt %d / %d \" , self . _retries , MAX_RETRIES ) # if noo many attempts, give up if self . _retries >= MAX_RETRIES : _LOGGER . error ( \"Too many unsuccesful connection attempts\" ) break try : await self . async_connect () except ImouException as exception : _LOGGER . error ( exception . to_string ()) self . _retries = self . _retries + 1 if not self . is_connected (): raise NotConnected () # calculate timestamp, nonce, sign and id as per https://open.imoulife.com/book/http/develop.html timestamp = round ( time . time ()) nonce = secrets . token_urlsafe () sign = hashlib . md5 ( f \"time: { timestamp } ,nonce: { nonce } ,appSecret: { self . _app_secret } \" . encode ( \"utf-8\" )) . hexdigest () request_id = str ( random . randint ( 1 , 10000 )) # add the access token to the payload if already available if self . _access_token is not None : payload [ \"token\" ] = self . _access_token # prepare the API request url = f \" { self . _base_url } / { api } \" body = { \"system\" : { \"ver\" : \"1.0\" , \"sign\" : sign , \"appId\" : self . _app_id , \"time\" : timestamp , \"nonce\" : nonce , }, \"params\" : payload , \"id\" : request_id , } if self . _log_http_requests_enabled : _LOGGER . debug ( \"[HTTP_REQUEST] %s : %s \" , url , self . _redact_log_message ( str ( body ))) # send the request to the API endpoint try : response = await self . _session . request ( \"POST\" , url , json = body , timeout = self . _timeout ) except Exception as exception : raise ConnectionFailed ( f \" { exception } \" ) from exception # parse the response and look for errors response_status = response . status if self . _log_http_requests_enabled : _LOGGER . debug ( \"[HTTP_RESPONSE] %s : %s \" , response_status , self . _redact_log_message ( str ( await response . text ())) ) if response_status != 200 : raise APIError ( f \"status code { response . status } \" ) try : response_body = json . loads ( await response . text ()) except Exception as exception : raise InvalidResponse ( f \"unable to parse response text { await response . text () } \" ) from exception if ( \"result\" not in response_body or \"code\" not in response_body [ \"result\" ] or \"msg\" not in response_body [ \"result\" ] ): raise InvalidResponse ( f \"cannot find result, code or msg in { response_body } \" ) result_code = response_body [ \"result\" ][ \"code\" ] result_message = response_body [ \"result\" ][ \"msg\" ] if result_code != \"0\" : error_message = result_code + \": \" + result_message if result_code in ( \"OP1008\" , \"SN1001\" ): raise InvalidConfiguration ( f \"Invalid appId or appSecret ( { error_message } )\" ) if result_code == \"OP1009\" : raise NotAuthorized ( f \" { error_message } \" ) # if the access token is invalid or expired, reconnect if result_code == \"TK1002\" : await self . async_reconnect () response_data = await self . _async_call_api ( api , payload , is_connect_request ) return response_data raise APIError ( error_message ) # return the payload of the reponse response_data = response_body [ \"result\" ][ \"data\" ] if \"data\" in response_body [ \"result\" ] else {} return response_data async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # prepare the payload payload = { \"bindId\" : - 1 , \"limit\" : 50 , \"type\" : \"bindAndShare\" , \"needApInfo\" : True , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceOpenList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices (Open) \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOpenList.html).\"\"\" # define the api endpoint api = \"deviceOpenList\" # prepare the payload payload = { \"bindId\" : - 1 , \"limit\" : 50 , \"type\" : \"bindAndShare\" , \"needApInfo\" : True , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceOpenDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices (Open) \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOpenDetailList.html).\"\"\" # define the api endpoint api = \"deviceOpenDetailList\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async def async_api_listDeviceAbility ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Ability to obtain multiple devices, channels, and accessories in batches \\ (https://open.imoulife.com/book/http/device/manage/query/listDeviceAbility.html).\"\"\" # define the api endpoint api = \"listDeviceAbility\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceStorage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Obtain device storage medium capacity information. \\ (https://open.imoulife.com/book/http/device/config/storage/deviceStorage.html).\"\"\" # define the api endpoint api = \"deviceStorage\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # prepare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # prepare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # prepare the payload now_time = datetime . now () begin_time = now_time - timedelta ( days = 30 ) end_time = now_time + timedelta ( days = 1 ) payload = { \"deviceId\" : device_id , \"count\" : \"10\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getNightVisionMode ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Query the night vision mode configuration of the device \\ (https://open.imoulife.com/book/http/device/config/video/getNightVisionMode.html).\"\"\" # define the api endpoint api = \"getNightVisionMode\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setNightVisionMode ( self , device_id : str , mode : str ) -> dict : # pylint: disable=invalid-name \"\"\"Set the night vision mode of the device \\ (https://open.imoulife.com/book/http/device/config/video/setNightVisionMode.html).\"\"\" # define the api endpoint api = \"setNightVisionMode\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"mode\" : mode , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getMessageCallback ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Get the message callback address information currently set \\ (https://open.imoulife.com/book/http/push/getMessageCallback.html).\"\"\" # define the api endpoint api = \"getMessageCallback\" # prepare the payload payload : dict = {} # call the api return await self . _async_call_api ( api , payload ) async def async_api_setMessageCallbackOn ( self , callback_url : str ) -> dict : # pylint: disable=invalid-name \"\"\"Set the message callback address. \\ (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\" # define the api endpoint api = \"setMessageCallback\" # prepare the payload payload = { \"callbackFlag\" : \"alarm,deviceStatus\" , # \"basePush\": \"2\", \"callbackUrl\" : callback_url , \"status\" : \"on\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setMessageCallbackOff ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Unset the message callback address. \\ (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\" # define the api endpoint api = \"setMessageCallback\" # prepare the payload payload = { \"status\" : \"off\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_restartDevice ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Restart the device. \\ (https://open.imoulife.com/book/en/http/device/operate/restartDevice.html).\"\"\" # define the api endpoint api = \"restartDevice\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceSdcardStatus ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the SD card status of the device. \\ (https://open.imoulife.com/book/en/http/device/config/storage/deviceSdcardStatus.html).\"\"\" # define the api endpoint api = \"deviceSdcardStatus\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_devicePTZInfo ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the current PTZ position information of the device. \\ (https://open.imoulife.com/book/en/http/device/operate/devicePTZInfo.html).\"\"\" # define the api endpoint api = \"devicePTZInfo\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_controlLocationPTZ ( # pylint: disable=invalid-name self , device_id : str , h : float , v : float , z : float ) -> dict : \"\"\"PTZ positioning interface. \\ (https://open.imoulife.com/book/en/http/device/operate/controlLocationPTZ.html).\"\"\" # define the api endpoint api = \"controlLocationPTZ\" # prepare the payload try : h = float ( h ) v = float ( v ) z = float ( z ) except Exception as exception : raise APIError ( f \"cannot convert to float h: { h } , v: { v } , z: { z } \" ) from exception if ( h < - 1 or h > 1 ) or ( v < - 1 or v > 1 ): raise APIError ( f \"h and v must be [-1;1]: h: { h } , v: { v } \" ) if z < 0 or z > 1 : raise APIError ( f \"z must be [0;1]: z: { z } \" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"h\" : h , \"v\" : v , \"z\" : z , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_controlMovePTZ ( # pylint: disable=invalid-name self , device_id : str , operation : str , duration : int ) -> dict : \"\"\"PTZ movement control interface. \\ (https://open.imoulife.com/book/en/http/device/operate/controlMovePTZ.html).\"\"\" # define the api endpoint api = \"controlMovePTZ\" # prepare the payload operation = operation . upper () if operation not in PTZ_OPERATIONS : raise APIError ( f \"operation must one of { PTZ_OPERATIONS . keys () } \" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"operation\" : str ( PTZ_OPERATIONS [ operation ]), \"duration\" : str ( duration ), } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setDeviceSnapEnhanced ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Capture pictures, supports the capture frequency of 1 time per second. \\ (https://open.imoulife.com/book/en/http/device/operate/setDeviceSnapEnhanced.html).\"\"\" # define the api endpoint api = \"setDeviceSnapEnhanced\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_bindDeviceLive ( self , device_id : str , profile : str ) -> dict : # pylint: disable=invalid-name \"\"\"Create device source live broadcast address for profile (HD or SD). \\ (https://open.imoulife.com/book/en/http/device/live/bindDeviceLive.html).\"\"\" # define the api endpoint api = \"bindDeviceLive\" # prepare the payload profile = profile . upper () stream_id = 0 if profile == \"HD\" : stream_id = 0 elif profile == \"SD\" : stream_id = 1 else : raise APIError ( \"profile must one of HD, SD\" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , # streamId, 0: HD main stream; 1: SD auxiliary stream \"streamId\" : stream_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getLiveStreamInfo ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Obtain the live broadcast address. \\ (https://open.imoulife.com/book/en/http/device/live/getLiveStreamInfo.html).\"\"\" # define the api endpoint api = \"getLiveStreamInfo\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_liveList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Get the live broadcast details list created under the developer's current account. \\ https://open.imoulife.com/book/en/http/device/live/liveList.html).\"\"\" # define the api endpoint api = \"liveList\" # prepare the payload payload = { \"queryRange\" : \"1-20\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_unbindLive ( self , live_token : str ) -> dict : # pylint: disable=invalid-name \"\"\"Delete the live broadcast address. \\ (https://open.imoulife.com/book/en/http/device/live/unbindLive.html).\"\"\" # define the api endpoint api = \"unbindLive\" # prepare the payload payload = { \"liveToken\" : live_token } # call the api return await self . _async_call_api ( api , payload ) __init__ ( app_id , app_secret , session ) \u00b6 Initialize the instance. Parameters: Name Type Description Default app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required session ClientSession aiohttp client session required Source code in imouapi/api.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def __init__ ( self , app_id : str , app_secret : str , session : ClientSession ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo session: aiohttp client session \"\"\" self . _app_id = app_id self . _app_secret = app_secret self . _session = session self . _base_url = API_URL self . _timeout = DEFAULT_TIMEOUT self . _log_http_requests_enabled = False self . _redact_log_message_enabled = True self . _access_token = None self . _access_token_expire_time = None self . _connected = False self . _retries = 1 _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url ) async_api_bindDeviceLive ( device_id , profile ) async \u00b6 Create device source live broadcast address for profile (HD or SD). (https://open.imoulife.com/book/en/http/device/live/bindDeviceLive.html). Source code in imouapi/api.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 async def async_api_bindDeviceLive ( self , device_id : str , profile : str ) -> dict : # pylint: disable=invalid-name \"\"\"Create device source live broadcast address for profile (HD or SD). \\ (https://open.imoulife.com/book/en/http/device/live/bindDeviceLive.html).\"\"\" # define the api endpoint api = \"bindDeviceLive\" # prepare the payload profile = profile . upper () stream_id = 0 if profile == \"HD\" : stream_id = 0 elif profile == \"SD\" : stream_id = 1 else : raise APIError ( \"profile must one of HD, SD\" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , # streamId, 0: HD main stream; 1: SD auxiliary stream \"streamId\" : stream_id , } # call the api return await self . _async_call_api ( api , payload ) async_api_controlLocationPTZ ( device_id , h , v , z ) async \u00b6 PTZ positioning interface. (https://open.imoulife.com/book/en/http/device/operate/controlLocationPTZ.html). Source code in imouapi/api.py 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 async def async_api_controlLocationPTZ ( # pylint: disable=invalid-name self , device_id : str , h : float , v : float , z : float ) -> dict : \"\"\"PTZ positioning interface. \\ (https://open.imoulife.com/book/en/http/device/operate/controlLocationPTZ.html).\"\"\" # define the api endpoint api = \"controlLocationPTZ\" # prepare the payload try : h = float ( h ) v = float ( v ) z = float ( z ) except Exception as exception : raise APIError ( f \"cannot convert to float h: { h } , v: { v } , z: { z } \" ) from exception if ( h < - 1 or h > 1 ) or ( v < - 1 or v > 1 ): raise APIError ( f \"h and v must be [-1;1]: h: { h } , v: { v } \" ) if z < 0 or z > 1 : raise APIError ( f \"z must be [0;1]: z: { z } \" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"h\" : h , \"v\" : v , \"z\" : z , } # call the api return await self . _async_call_api ( api , payload ) async_api_controlMovePTZ ( device_id , operation , duration ) async \u00b6 PTZ movement control interface. (https://open.imoulife.com/book/en/http/device/operate/controlMovePTZ.html). Source code in imouapi/api.py 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 async def async_api_controlMovePTZ ( # pylint: disable=invalid-name self , device_id : str , operation : str , duration : int ) -> dict : \"\"\"PTZ movement control interface. \\ (https://open.imoulife.com/book/en/http/device/operate/controlMovePTZ.html).\"\"\" # define the api endpoint api = \"controlMovePTZ\" # prepare the payload operation = operation . upper () if operation not in PTZ_OPERATIONS : raise APIError ( f \"operation must one of { PTZ_OPERATIONS . keys () } \" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"operation\" : str ( PTZ_OPERATIONS [ operation ]), \"duration\" : str ( duration ), } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceBaseDetailList ( devices ) async \u00b6 Return the details of the requested devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html). Source code in imouapi/api.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceBaseList () async \u00b6 Return the list of registered devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html). Source code in imouapi/api.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # prepare the payload payload = { \"bindId\" : - 1 , \"limit\" : 50 , \"type\" : \"bindAndShare\" , \"needApInfo\" : True , } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceOnline ( device_id ) async \u00b6 Device online or offline (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html). Source code in imouapi/api.py 306 307 308 309 310 311 312 313 314 315 316 async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceOpenDetailList ( devices ) async \u00b6 Return the details of the requested devices (Open) (https://open.imoulife.com/book/http/device/manage/query/deviceOpenDetailList.html). Source code in imouapi/api.py 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 async def async_api_deviceOpenDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices (Open) \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOpenDetailList.html).\"\"\" # define the api endpoint api = \"deviceOpenDetailList\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceOpenList () async \u00b6 Return the list of registered devices (Open) (https://open.imoulife.com/book/http/device/manage/query/deviceOpenList.html). Source code in imouapi/api.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 async def async_api_deviceOpenList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices (Open) \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOpenList.html).\"\"\" # define the api endpoint api = \"deviceOpenList\" # prepare the payload payload = { \"bindId\" : - 1 , \"limit\" : 50 , \"type\" : \"bindAndShare\" , \"needApInfo\" : True , } # call the api return await self . _async_call_api ( api , payload ) async_api_devicePTZInfo ( device_id ) async \u00b6 Get the current PTZ position information of the device. (https://open.imoulife.com/book/en/http/device/operate/devicePTZInfo.html). Source code in imouapi/api.py 468 469 470 471 472 473 474 475 476 477 478 479 async def async_api_devicePTZInfo ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the current PTZ position information of the device. \\ (https://open.imoulife.com/book/en/http/device/operate/devicePTZInfo.html).\"\"\" # define the api endpoint api = \"devicePTZInfo\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceSdcardStatus ( device_id ) async \u00b6 Get the SD card status of the device. (https://open.imoulife.com/book/en/http/device/config/storage/deviceSdcardStatus.html). Source code in imouapi/api.py 456 457 458 459 460 461 462 463 464 465 466 async def async_api_deviceSdcardStatus ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the SD card status of the device. \\ (https://open.imoulife.com/book/en/http/device/config/storage/deviceSdcardStatus.html).\"\"\" # define the api endpoint api = \"deviceSdcardStatus\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceStorage ( device_id ) async \u00b6 Obtain device storage medium capacity information. (https://open.imoulife.com/book/http/device/config/storage/deviceStorage.html). Source code in imouapi/api.py 318 319 320 321 322 323 324 325 326 327 328 async def async_api_deviceStorage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Obtain device storage medium capacity information. \\ (https://open.imoulife.com/book/http/device/config/storage/deviceStorage.html).\"\"\" # define the api endpoint api = \"deviceStorage\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async_api_getAlarmMessage ( device_id ) async \u00b6 Get the device message list of the device channel in the specified time period (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html). Source code in imouapi/api.py 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # prepare the payload now_time = datetime . now () begin_time = now_time - timedelta ( days = 30 ) end_time = now_time + timedelta ( days = 1 ) payload = { \"deviceId\" : device_id , \"count\" : \"10\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload ) async_api_getDeviceCameraStatus ( device_id , enable_type ) async \u00b6 Get the status of the device switch (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html). Source code in imouapi/api.py 330 331 332 333 334 335 336 337 338 339 340 341 342 343 async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # prepare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload ) async_api_getLiveStreamInfo ( device_id ) async \u00b6 Obtain the live broadcast address. (https://open.imoulife.com/book/en/http/device/live/getLiveStreamInfo.html). Source code in imouapi/api.py 565 566 567 568 569 570 571 572 573 574 575 576 async def async_api_getLiveStreamInfo ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Obtain the live broadcast address. \\ (https://open.imoulife.com/book/en/http/device/live/getLiveStreamInfo.html).\"\"\" # define the api endpoint api = \"getLiveStreamInfo\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async_api_getMessageCallback () async \u00b6 Get the message callback address information currently set (https://open.imoulife.com/book/http/push/getMessageCallback.html). Source code in imouapi/api.py 407 408 409 410 411 412 413 414 415 async def async_api_getMessageCallback ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Get the message callback address information currently set \\ (https://open.imoulife.com/book/http/push/getMessageCallback.html).\"\"\" # define the api endpoint api = \"getMessageCallback\" # prepare the payload payload : dict = {} # call the api return await self . _async_call_api ( api , payload ) async_api_getNightVisionMode ( device_id ) async \u00b6 Query the night vision mode configuration of the device (https://open.imoulife.com/book/http/device/config/video/getNightVisionMode.html). Source code in imouapi/api.py 380 381 382 383 384 385 386 387 388 389 390 391 async def async_api_getNightVisionMode ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Query the night vision mode configuration of the device \\ (https://open.imoulife.com/book/http/device/config/video/getNightVisionMode.html).\"\"\" # define the api endpoint api = \"getNightVisionMode\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async_api_listDeviceAbility ( devices ) async \u00b6 Ability to obtain multiple devices, channels, and accessories in batches (https://open.imoulife.com/book/http/device/manage/query/listDeviceAbility.html). Source code in imouapi/api.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 async def async_api_listDeviceAbility ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Ability to obtain multiple devices, channels, and accessories in batches \\ (https://open.imoulife.com/book/http/device/manage/query/listDeviceAbility.html).\"\"\" # define the api endpoint api = \"listDeviceAbility\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async_api_liveList () async \u00b6 Get the live broadcast details list created under the developer's current account. https://open.imoulife.com/book/en/http/device/live/liveList.html). Source code in imouapi/api.py 578 579 580 581 582 583 584 585 586 587 588 async def async_api_liveList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Get the live broadcast details list created under the developer's current account. \\ https://open.imoulife.com/book/en/http/device/live/liveList.html).\"\"\" # define the api endpoint api = \"liveList\" # prepare the payload payload = { \"queryRange\" : \"1-20\" , } # call the api return await self . _async_call_api ( api , payload ) async_api_restartDevice ( device_id ) async \u00b6 Restart the device. (https://open.imoulife.com/book/en/http/device/operate/restartDevice.html). Source code in imouapi/api.py 444 445 446 447 448 449 450 451 452 453 454 async def async_api_restartDevice ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Restart the device. \\ (https://open.imoulife.com/book/en/http/device/operate/restartDevice.html).\"\"\" # define the api endpoint api = \"restartDevice\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async_api_setDeviceCameraStatus ( device_id , enable_type , value ) async \u00b6 Set a device switch (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html). Source code in imouapi/api.py 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # prepare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value , } # call the api return await self . _async_call_api ( api , payload ) async_api_setDeviceSnapEnhanced ( device_id ) async \u00b6 Capture pictures, supports the capture frequency of 1 time per second. (https://open.imoulife.com/book/en/http/device/operate/setDeviceSnapEnhanced.html). Source code in imouapi/api.py 529 530 531 532 533 534 535 536 537 538 539 540 async def async_api_setDeviceSnapEnhanced ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Capture pictures, supports the capture frequency of 1 time per second. \\ (https://open.imoulife.com/book/en/http/device/operate/setDeviceSnapEnhanced.html).\"\"\" # define the api endpoint api = \"setDeviceSnapEnhanced\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async_api_setMessageCallbackOff () async \u00b6 Unset the message callback address. (https://open.imoulife.com/book/http/push/setMessageCallback.html). Source code in imouapi/api.py 432 433 434 435 436 437 438 439 440 441 442 async def async_api_setMessageCallbackOff ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Unset the message callback address. \\ (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\" # define the api endpoint api = \"setMessageCallback\" # prepare the payload payload = { \"status\" : \"off\" , } # call the api return await self . _async_call_api ( api , payload ) async_api_setMessageCallbackOn ( callback_url ) async \u00b6 Set the message callback address. (https://open.imoulife.com/book/http/push/setMessageCallback.html). Source code in imouapi/api.py 417 418 419 420 421 422 423 424 425 426 427 428 429 430 async def async_api_setMessageCallbackOn ( self , callback_url : str ) -> dict : # pylint: disable=invalid-name \"\"\"Set the message callback address. \\ (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\" # define the api endpoint api = \"setMessageCallback\" # prepare the payload payload = { \"callbackFlag\" : \"alarm,deviceStatus\" , # \"basePush\": \"2\", \"callbackUrl\" : callback_url , \"status\" : \"on\" , } # call the api return await self . _async_call_api ( api , payload ) async_api_setNightVisionMode ( device_id , mode ) async \u00b6 Set the night vision mode of the device (https://open.imoulife.com/book/http/device/config/video/setNightVisionMode.html). Source code in imouapi/api.py 393 394 395 396 397 398 399 400 401 402 403 404 405 async def async_api_setNightVisionMode ( self , device_id : str , mode : str ) -> dict : # pylint: disable=invalid-name \"\"\"Set the night vision mode of the device \\ (https://open.imoulife.com/book/http/device/config/video/setNightVisionMode.html).\"\"\" # define the api endpoint api = \"setNightVisionMode\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"mode\" : mode , } # call the api return await self . _async_call_api ( api , payload ) async_api_unbindLive ( live_token ) async \u00b6 Delete the live broadcast address. (https://open.imoulife.com/book/en/http/device/live/unbindLive.html). Source code in imouapi/api.py 590 591 592 593 594 595 596 597 598 async def async_api_unbindLive ( self , live_token : str ) -> dict : # pylint: disable=invalid-name \"\"\"Delete the live broadcast address. \\ (https://open.imoulife.com/book/en/http/device/live/unbindLive.html).\"\"\" # define the api endpoint api = \"unbindLive\" # prepare the payload payload = { \"liveToken\" : live_token } # call the api return await self . _async_call_api ( api , payload ) async_connect () async \u00b6 Authenticate against the API and retrieve an access token. Source code in imouapi/api.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token\" ) self . _connected = True return True async_disconnect () async \u00b6 Disconnect from the API. Source code in imouapi/api.py 118 119 120 121 122 123 124 async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True async_reconnect () async \u00b6 Reconnect to the API. Source code in imouapi/api.py 126 127 128 129 async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect () get_base_url () \u00b6 Get base url for the API. Source code in imouapi/api.py 67 68 69 def get_base_url ( self ) -> str : \"\"\"Get base url for the API.\"\"\" return self . _base_url get_session () \u00b6 Return the aiohttp client session. Source code in imouapi/api.py 89 90 91 def get_session ( self ) -> ClientSession : \"\"\"Return the aiohttp client session.\"\"\" return self . _session get_timeout () \u00b6 Get timeout for the API. Source code in imouapi/api.py 76 77 78 def get_timeout ( self ) -> int : \"\"\"Get timeout for the API.\"\"\" return self . _timeout is_connected () \u00b6 Return true if already connected. Source code in imouapi/api.py 131 132 133 def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected set_base_url ( value ) \u00b6 Set a custom base url for the API. Source code in imouapi/api.py 71 72 73 74 def set_base_url ( self , value : str ) -> None : \"\"\"Set a custom base url for the API.\"\"\" self . _base_url = value _LOGGER . debug ( \"Set endpoint URL to %s \" , self . _base_url ) set_log_http_requests ( value ) \u00b6 Set to true if you want in debug logs also HTTP requests and responses. Source code in imouapi/api.py 93 94 95 def set_log_http_requests ( self , value : bool ) -> None : \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\" self . _log_http_requests_enabled = value set_redact_log_messages ( value ) \u00b6 Set to true if you want debug logs redacted from sensitive data. Source code in imouapi/api.py 97 98 99 def set_redact_log_messages ( self , value : bool ) -> None : \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\" self . _redact_log_message_enabled = value set_session ( value ) \u00b6 Set an aiohttp client session. Source code in imouapi/api.py 85 86 87 def set_session ( self , value : ClientSession ) -> None : \"\"\"Set an aiohttp client session.\"\"\" self . _session = value set_timeout ( value ) \u00b6 Set a custom timeout. Source code in imouapi/api.py 80 81 82 83 def set_timeout ( self , value : int ) -> None : \"\"\"Set a custom timeout.\"\"\" self . _timeout = value _LOGGER . debug ( \"Set timeout to %s \" , self . _base_url )","title":"api"},{"location":"modules/api/#imouapi.api.ImouAPIClient","text":"Interact with IMOU API. Source code in imouapi/api.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 class ImouAPIClient : \"\"\"Interact with IMOU API.\"\"\" def __init__ ( self , app_id : str , app_secret : str , session : ClientSession ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo session: aiohttp client session \"\"\" self . _app_id = app_id self . _app_secret = app_secret self . _session = session self . _base_url = API_URL self . _timeout = DEFAULT_TIMEOUT self . _log_http_requests_enabled = False self . _redact_log_message_enabled = True self . _access_token = None self . _access_token_expire_time = None self . _connected = False self . _retries = 1 _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url ) def _redact_log_message ( self , data : str ) -> str : \"\"\"Redact log messages to remove sensitive information.\"\"\" if not self . _redact_log_message_enabled : return data for keyword in ( \"appId\" , \"sign\" , \"token\" , \"accessToken\" , \"playToken\" , \"thumbUrl\" , \"picUrl\" ): for tick in ( ' \\\" ' , \"'\" ): data = re . sub ( f \" { tick }{ keyword }{ tick } : \\\\ s* { tick } [^ { tick } ]+ { tick } \" , f \" { tick }{ keyword }{ tick } : { tick } XXXXXXXXX { tick } \" , data , ) return data def get_base_url ( self ) -> str : \"\"\"Get base url for the API.\"\"\" return self . _base_url def set_base_url ( self , value : str ) -> None : \"\"\"Set a custom base url for the API.\"\"\" self . _base_url = value _LOGGER . debug ( \"Set endpoint URL to %s \" , self . _base_url ) def get_timeout ( self ) -> int : \"\"\"Get timeout for the API.\"\"\" return self . _timeout def set_timeout ( self , value : int ) -> None : \"\"\"Set a custom timeout.\"\"\" self . _timeout = value _LOGGER . debug ( \"Set timeout to %s \" , self . _base_url ) def set_session ( self , value : ClientSession ) -> None : \"\"\"Set an aiohttp client session.\"\"\" self . _session = value def get_session ( self ) -> ClientSession : \"\"\"Return the aiohttp client session.\"\"\" return self . _session def set_log_http_requests ( self , value : bool ) -> None : \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\" self . _log_http_requests_enabled = value def set_redact_log_messages ( self , value : bool ) -> None : \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\" self . _redact_log_message_enabled = value async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token\" ) self . _connected = True return True async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect () def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected async def _async_call_api ( self , api : str , payload : dict , is_connect_request : bool = False ) -> dict : # noqa: C901 \"\"\"Submit request to the HTTP API endpoint.\"\"\" # connect if not connected if not is_connect_request : while not self . is_connected (): _LOGGER . debug ( \"Connection attempt %d / %d \" , self . _retries , MAX_RETRIES ) # if noo many attempts, give up if self . _retries >= MAX_RETRIES : _LOGGER . error ( \"Too many unsuccesful connection attempts\" ) break try : await self . async_connect () except ImouException as exception : _LOGGER . error ( exception . to_string ()) self . _retries = self . _retries + 1 if not self . is_connected (): raise NotConnected () # calculate timestamp, nonce, sign and id as per https://open.imoulife.com/book/http/develop.html timestamp = round ( time . time ()) nonce = secrets . token_urlsafe () sign = hashlib . md5 ( f \"time: { timestamp } ,nonce: { nonce } ,appSecret: { self . _app_secret } \" . encode ( \"utf-8\" )) . hexdigest () request_id = str ( random . randint ( 1 , 10000 )) # add the access token to the payload if already available if self . _access_token is not None : payload [ \"token\" ] = self . _access_token # prepare the API request url = f \" { self . _base_url } / { api } \" body = { \"system\" : { \"ver\" : \"1.0\" , \"sign\" : sign , \"appId\" : self . _app_id , \"time\" : timestamp , \"nonce\" : nonce , }, \"params\" : payload , \"id\" : request_id , } if self . _log_http_requests_enabled : _LOGGER . debug ( \"[HTTP_REQUEST] %s : %s \" , url , self . _redact_log_message ( str ( body ))) # send the request to the API endpoint try : response = await self . _session . request ( \"POST\" , url , json = body , timeout = self . _timeout ) except Exception as exception : raise ConnectionFailed ( f \" { exception } \" ) from exception # parse the response and look for errors response_status = response . status if self . _log_http_requests_enabled : _LOGGER . debug ( \"[HTTP_RESPONSE] %s : %s \" , response_status , self . _redact_log_message ( str ( await response . text ())) ) if response_status != 200 : raise APIError ( f \"status code { response . status } \" ) try : response_body = json . loads ( await response . text ()) except Exception as exception : raise InvalidResponse ( f \"unable to parse response text { await response . text () } \" ) from exception if ( \"result\" not in response_body or \"code\" not in response_body [ \"result\" ] or \"msg\" not in response_body [ \"result\" ] ): raise InvalidResponse ( f \"cannot find result, code or msg in { response_body } \" ) result_code = response_body [ \"result\" ][ \"code\" ] result_message = response_body [ \"result\" ][ \"msg\" ] if result_code != \"0\" : error_message = result_code + \": \" + result_message if result_code in ( \"OP1008\" , \"SN1001\" ): raise InvalidConfiguration ( f \"Invalid appId or appSecret ( { error_message } )\" ) if result_code == \"OP1009\" : raise NotAuthorized ( f \" { error_message } \" ) # if the access token is invalid or expired, reconnect if result_code == \"TK1002\" : await self . async_reconnect () response_data = await self . _async_call_api ( api , payload , is_connect_request ) return response_data raise APIError ( error_message ) # return the payload of the reponse response_data = response_body [ \"result\" ][ \"data\" ] if \"data\" in response_body [ \"result\" ] else {} return response_data async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # prepare the payload payload = { \"bindId\" : - 1 , \"limit\" : 50 , \"type\" : \"bindAndShare\" , \"needApInfo\" : True , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceOpenList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices (Open) \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOpenList.html).\"\"\" # define the api endpoint api = \"deviceOpenList\" # prepare the payload payload = { \"bindId\" : - 1 , \"limit\" : 50 , \"type\" : \"bindAndShare\" , \"needApInfo\" : True , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceOpenDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices (Open) \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOpenDetailList.html).\"\"\" # define the api endpoint api = \"deviceOpenDetailList\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async def async_api_listDeviceAbility ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Ability to obtain multiple devices, channels, and accessories in batches \\ (https://open.imoulife.com/book/http/device/manage/query/listDeviceAbility.html).\"\"\" # define the api endpoint api = \"listDeviceAbility\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceStorage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Obtain device storage medium capacity information. \\ (https://open.imoulife.com/book/http/device/config/storage/deviceStorage.html).\"\"\" # define the api endpoint api = \"deviceStorage\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # prepare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # prepare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # prepare the payload now_time = datetime . now () begin_time = now_time - timedelta ( days = 30 ) end_time = now_time + timedelta ( days = 1 ) payload = { \"deviceId\" : device_id , \"count\" : \"10\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getNightVisionMode ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Query the night vision mode configuration of the device \\ (https://open.imoulife.com/book/http/device/config/video/getNightVisionMode.html).\"\"\" # define the api endpoint api = \"getNightVisionMode\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setNightVisionMode ( self , device_id : str , mode : str ) -> dict : # pylint: disable=invalid-name \"\"\"Set the night vision mode of the device \\ (https://open.imoulife.com/book/http/device/config/video/setNightVisionMode.html).\"\"\" # define the api endpoint api = \"setNightVisionMode\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"mode\" : mode , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getMessageCallback ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Get the message callback address information currently set \\ (https://open.imoulife.com/book/http/push/getMessageCallback.html).\"\"\" # define the api endpoint api = \"getMessageCallback\" # prepare the payload payload : dict = {} # call the api return await self . _async_call_api ( api , payload ) async def async_api_setMessageCallbackOn ( self , callback_url : str ) -> dict : # pylint: disable=invalid-name \"\"\"Set the message callback address. \\ (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\" # define the api endpoint api = \"setMessageCallback\" # prepare the payload payload = { \"callbackFlag\" : \"alarm,deviceStatus\" , # \"basePush\": \"2\", \"callbackUrl\" : callback_url , \"status\" : \"on\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setMessageCallbackOff ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Unset the message callback address. \\ (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\" # define the api endpoint api = \"setMessageCallback\" # prepare the payload payload = { \"status\" : \"off\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_restartDevice ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Restart the device. \\ (https://open.imoulife.com/book/en/http/device/operate/restartDevice.html).\"\"\" # define the api endpoint api = \"restartDevice\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceSdcardStatus ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the SD card status of the device. \\ (https://open.imoulife.com/book/en/http/device/config/storage/deviceSdcardStatus.html).\"\"\" # define the api endpoint api = \"deviceSdcardStatus\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_devicePTZInfo ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the current PTZ position information of the device. \\ (https://open.imoulife.com/book/en/http/device/operate/devicePTZInfo.html).\"\"\" # define the api endpoint api = \"devicePTZInfo\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_controlLocationPTZ ( # pylint: disable=invalid-name self , device_id : str , h : float , v : float , z : float ) -> dict : \"\"\"PTZ positioning interface. \\ (https://open.imoulife.com/book/en/http/device/operate/controlLocationPTZ.html).\"\"\" # define the api endpoint api = \"controlLocationPTZ\" # prepare the payload try : h = float ( h ) v = float ( v ) z = float ( z ) except Exception as exception : raise APIError ( f \"cannot convert to float h: { h } , v: { v } , z: { z } \" ) from exception if ( h < - 1 or h > 1 ) or ( v < - 1 or v > 1 ): raise APIError ( f \"h and v must be [-1;1]: h: { h } , v: { v } \" ) if z < 0 or z > 1 : raise APIError ( f \"z must be [0;1]: z: { z } \" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"h\" : h , \"v\" : v , \"z\" : z , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_controlMovePTZ ( # pylint: disable=invalid-name self , device_id : str , operation : str , duration : int ) -> dict : \"\"\"PTZ movement control interface. \\ (https://open.imoulife.com/book/en/http/device/operate/controlMovePTZ.html).\"\"\" # define the api endpoint api = \"controlMovePTZ\" # prepare the payload operation = operation . upper () if operation not in PTZ_OPERATIONS : raise APIError ( f \"operation must one of { PTZ_OPERATIONS . keys () } \" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"operation\" : str ( PTZ_OPERATIONS [ operation ]), \"duration\" : str ( duration ), } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setDeviceSnapEnhanced ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Capture pictures, supports the capture frequency of 1 time per second. \\ (https://open.imoulife.com/book/en/http/device/operate/setDeviceSnapEnhanced.html).\"\"\" # define the api endpoint api = \"setDeviceSnapEnhanced\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_bindDeviceLive ( self , device_id : str , profile : str ) -> dict : # pylint: disable=invalid-name \"\"\"Create device source live broadcast address for profile (HD or SD). \\ (https://open.imoulife.com/book/en/http/device/live/bindDeviceLive.html).\"\"\" # define the api endpoint api = \"bindDeviceLive\" # prepare the payload profile = profile . upper () stream_id = 0 if profile == \"HD\" : stream_id = 0 elif profile == \"SD\" : stream_id = 1 else : raise APIError ( \"profile must one of HD, SD\" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , # streamId, 0: HD main stream; 1: SD auxiliary stream \"streamId\" : stream_id , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getLiveStreamInfo ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Obtain the live broadcast address. \\ (https://open.imoulife.com/book/en/http/device/live/getLiveStreamInfo.html).\"\"\" # define the api endpoint api = \"getLiveStreamInfo\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_liveList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Get the live broadcast details list created under the developer's current account. \\ https://open.imoulife.com/book/en/http/device/live/liveList.html).\"\"\" # define the api endpoint api = \"liveList\" # prepare the payload payload = { \"queryRange\" : \"1-20\" , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_unbindLive ( self , live_token : str ) -> dict : # pylint: disable=invalid-name \"\"\"Delete the live broadcast address. \\ (https://open.imoulife.com/book/en/http/device/live/unbindLive.html).\"\"\" # define the api endpoint api = \"unbindLive\" # prepare the payload payload = { \"liveToken\" : live_token } # call the api return await self . _async_call_api ( api , payload )","title":"ImouAPIClient"},{"location":"modules/api/#imouapi.api.ImouAPIClient.__init__","text":"Initialize the instance. Parameters: Name Type Description Default app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required session ClientSession aiohttp client session required Source code in imouapi/api.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def __init__ ( self , app_id : str , app_secret : str , session : ClientSession ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo session: aiohttp client session \"\"\" self . _app_id = app_id self . _app_secret = app_secret self . _session = session self . _base_url = API_URL self . _timeout = DEFAULT_TIMEOUT self . _log_http_requests_enabled = False self . _redact_log_message_enabled = True self . _access_token = None self . _access_token_expire_time = None self . _connected = False self . _retries = 1 _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url )","title":"__init__()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_bindDeviceLive","text":"Create device source live broadcast address for profile (HD or SD). (https://open.imoulife.com/book/en/http/device/live/bindDeviceLive.html). Source code in imouapi/api.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 async def async_api_bindDeviceLive ( self , device_id : str , profile : str ) -> dict : # pylint: disable=invalid-name \"\"\"Create device source live broadcast address for profile (HD or SD). \\ (https://open.imoulife.com/book/en/http/device/live/bindDeviceLive.html).\"\"\" # define the api endpoint api = \"bindDeviceLive\" # prepare the payload profile = profile . upper () stream_id = 0 if profile == \"HD\" : stream_id = 0 elif profile == \"SD\" : stream_id = 1 else : raise APIError ( \"profile must one of HD, SD\" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , # streamId, 0: HD main stream; 1: SD auxiliary stream \"streamId\" : stream_id , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_bindDeviceLive()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_controlLocationPTZ","text":"PTZ positioning interface. (https://open.imoulife.com/book/en/http/device/operate/controlLocationPTZ.html). Source code in imouapi/api.py 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 async def async_api_controlLocationPTZ ( # pylint: disable=invalid-name self , device_id : str , h : float , v : float , z : float ) -> dict : \"\"\"PTZ positioning interface. \\ (https://open.imoulife.com/book/en/http/device/operate/controlLocationPTZ.html).\"\"\" # define the api endpoint api = \"controlLocationPTZ\" # prepare the payload try : h = float ( h ) v = float ( v ) z = float ( z ) except Exception as exception : raise APIError ( f \"cannot convert to float h: { h } , v: { v } , z: { z } \" ) from exception if ( h < - 1 or h > 1 ) or ( v < - 1 or v > 1 ): raise APIError ( f \"h and v must be [-1;1]: h: { h } , v: { v } \" ) if z < 0 or z > 1 : raise APIError ( f \"z must be [0;1]: z: { z } \" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"h\" : h , \"v\" : v , \"z\" : z , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_controlLocationPTZ()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_controlMovePTZ","text":"PTZ movement control interface. (https://open.imoulife.com/book/en/http/device/operate/controlMovePTZ.html). Source code in imouapi/api.py 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 async def async_api_controlMovePTZ ( # pylint: disable=invalid-name self , device_id : str , operation : str , duration : int ) -> dict : \"\"\"PTZ movement control interface. \\ (https://open.imoulife.com/book/en/http/device/operate/controlMovePTZ.html).\"\"\" # define the api endpoint api = \"controlMovePTZ\" # prepare the payload operation = operation . upper () if operation not in PTZ_OPERATIONS : raise APIError ( f \"operation must one of { PTZ_OPERATIONS . keys () } \" ) payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"operation\" : str ( PTZ_OPERATIONS [ operation ]), \"duration\" : str ( duration ), } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_controlMovePTZ()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceBaseDetailList","text":"Return the details of the requested devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html). Source code in imouapi/api.py 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceBaseDetailList()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceBaseList","text":"Return the list of registered devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html). Source code in imouapi/api.py 222 223 224 225 226 227 228 229 230 231 232 233 234 235 async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # prepare the payload payload = { \"bindId\" : - 1 , \"limit\" : 50 , \"type\" : \"bindAndShare\" , \"needApInfo\" : True , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceBaseList()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceOnline","text":"Device online or offline (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html). Source code in imouapi/api.py 306 307 308 309 310 311 312 313 314 315 316 async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceOnline()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceOpenDetailList","text":"Return the details of the requested devices (Open) (https://open.imoulife.com/book/http/device/manage/query/deviceOpenDetailList.html). Source code in imouapi/api.py 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 async def async_api_deviceOpenDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices (Open) \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOpenDetailList.html).\"\"\" # define the api endpoint api = \"deviceOpenDetailList\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceOpenDetailList()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceOpenList","text":"Return the list of registered devices (Open) (https://open.imoulife.com/book/http/device/manage/query/deviceOpenList.html). Source code in imouapi/api.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 async def async_api_deviceOpenList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices (Open) \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOpenList.html).\"\"\" # define the api endpoint api = \"deviceOpenList\" # prepare the payload payload = { \"bindId\" : - 1 , \"limit\" : 50 , \"type\" : \"bindAndShare\" , \"needApInfo\" : True , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceOpenList()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_devicePTZInfo","text":"Get the current PTZ position information of the device. (https://open.imoulife.com/book/en/http/device/operate/devicePTZInfo.html). Source code in imouapi/api.py 468 469 470 471 472 473 474 475 476 477 478 479 async def async_api_devicePTZInfo ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the current PTZ position information of the device. \\ (https://open.imoulife.com/book/en/http/device/operate/devicePTZInfo.html).\"\"\" # define the api endpoint api = \"devicePTZInfo\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_devicePTZInfo()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceSdcardStatus","text":"Get the SD card status of the device. (https://open.imoulife.com/book/en/http/device/config/storage/deviceSdcardStatus.html). Source code in imouapi/api.py 456 457 458 459 460 461 462 463 464 465 466 async def async_api_deviceSdcardStatus ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the SD card status of the device. \\ (https://open.imoulife.com/book/en/http/device/config/storage/deviceSdcardStatus.html).\"\"\" # define the api endpoint api = \"deviceSdcardStatus\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceSdcardStatus()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceStorage","text":"Obtain device storage medium capacity information. (https://open.imoulife.com/book/http/device/config/storage/deviceStorage.html). Source code in imouapi/api.py 318 319 320 321 322 323 324 325 326 327 328 async def async_api_deviceStorage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Obtain device storage medium capacity information. \\ (https://open.imoulife.com/book/http/device/config/storage/deviceStorage.html).\"\"\" # define the api endpoint api = \"deviceStorage\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceStorage()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getAlarmMessage","text":"Get the device message list of the device channel in the specified time period (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html). Source code in imouapi/api.py 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # prepare the payload now_time = datetime . now () begin_time = now_time - timedelta ( days = 30 ) end_time = now_time + timedelta ( days = 1 ) payload = { \"deviceId\" : device_id , \"count\" : \"10\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_getAlarmMessage()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getDeviceCameraStatus","text":"Get the status of the device switch (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html). Source code in imouapi/api.py 330 331 332 333 334 335 336 337 338 339 340 341 342 343 async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # prepare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_getDeviceCameraStatus()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getLiveStreamInfo","text":"Obtain the live broadcast address. (https://open.imoulife.com/book/en/http/device/live/getLiveStreamInfo.html). Source code in imouapi/api.py 565 566 567 568 569 570 571 572 573 574 575 576 async def async_api_getLiveStreamInfo ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Obtain the live broadcast address. \\ (https://open.imoulife.com/book/en/http/device/live/getLiveStreamInfo.html).\"\"\" # define the api endpoint api = \"getLiveStreamInfo\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_getLiveStreamInfo()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getMessageCallback","text":"Get the message callback address information currently set (https://open.imoulife.com/book/http/push/getMessageCallback.html). Source code in imouapi/api.py 407 408 409 410 411 412 413 414 415 async def async_api_getMessageCallback ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Get the message callback address information currently set \\ (https://open.imoulife.com/book/http/push/getMessageCallback.html).\"\"\" # define the api endpoint api = \"getMessageCallback\" # prepare the payload payload : dict = {} # call the api return await self . _async_call_api ( api , payload )","title":"async_api_getMessageCallback()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getNightVisionMode","text":"Query the night vision mode configuration of the device (https://open.imoulife.com/book/http/device/config/video/getNightVisionMode.html). Source code in imouapi/api.py 380 381 382 383 384 385 386 387 388 389 390 391 async def async_api_getNightVisionMode ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Query the night vision mode configuration of the device \\ (https://open.imoulife.com/book/http/device/config/video/getNightVisionMode.html).\"\"\" # define the api endpoint api = \"getNightVisionMode\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_getNightVisionMode()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_listDeviceAbility","text":"Ability to obtain multiple devices, channels, and accessories in batches (https://open.imoulife.com/book/http/device/manage/query/listDeviceAbility.html). Source code in imouapi/api.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 async def async_api_listDeviceAbility ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Ability to obtain multiple devices, channels, and accessories in batches \\ (https://open.imoulife.com/book/http/device/manage/query/listDeviceAbility.html).\"\"\" # define the api endpoint api = \"listDeviceAbility\" # prepare the payload device_list = [] for device in devices : device_list . append ( { \"deviceId\" : device , \"channelList\" : \"0\" , } ) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_listDeviceAbility()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_liveList","text":"Get the live broadcast details list created under the developer's current account. https://open.imoulife.com/book/en/http/device/live/liveList.html). Source code in imouapi/api.py 578 579 580 581 582 583 584 585 586 587 588 async def async_api_liveList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Get the live broadcast details list created under the developer's current account. \\ https://open.imoulife.com/book/en/http/device/live/liveList.html).\"\"\" # define the api endpoint api = \"liveList\" # prepare the payload payload = { \"queryRange\" : \"1-20\" , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_liveList()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_restartDevice","text":"Restart the device. (https://open.imoulife.com/book/en/http/device/operate/restartDevice.html). Source code in imouapi/api.py 444 445 446 447 448 449 450 451 452 453 454 async def async_api_restartDevice ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Restart the device. \\ (https://open.imoulife.com/book/en/http/device/operate/restartDevice.html).\"\"\" # define the api endpoint api = \"restartDevice\" # prepare the payload payload = { \"deviceId\" : device_id , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_restartDevice()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setDeviceCameraStatus","text":"Set a device switch (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html). Source code in imouapi/api.py 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # prepare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_setDeviceCameraStatus()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setDeviceSnapEnhanced","text":"Capture pictures, supports the capture frequency of 1 time per second. (https://open.imoulife.com/book/en/http/device/operate/setDeviceSnapEnhanced.html). Source code in imouapi/api.py 529 530 531 532 533 534 535 536 537 538 539 540 async def async_api_setDeviceSnapEnhanced ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Capture pictures, supports the capture frequency of 1 time per second. \\ (https://open.imoulife.com/book/en/http/device/operate/setDeviceSnapEnhanced.html).\"\"\" # define the api endpoint api = \"setDeviceSnapEnhanced\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_setDeviceSnapEnhanced()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setMessageCallbackOff","text":"Unset the message callback address. (https://open.imoulife.com/book/http/push/setMessageCallback.html). Source code in imouapi/api.py 432 433 434 435 436 437 438 439 440 441 442 async def async_api_setMessageCallbackOff ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Unset the message callback address. \\ (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\" # define the api endpoint api = \"setMessageCallback\" # prepare the payload payload = { \"status\" : \"off\" , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_setMessageCallbackOff()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setMessageCallbackOn","text":"Set the message callback address. (https://open.imoulife.com/book/http/push/setMessageCallback.html). Source code in imouapi/api.py 417 418 419 420 421 422 423 424 425 426 427 428 429 430 async def async_api_setMessageCallbackOn ( self , callback_url : str ) -> dict : # pylint: disable=invalid-name \"\"\"Set the message callback address. \\ (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\" # define the api endpoint api = \"setMessageCallback\" # prepare the payload payload = { \"callbackFlag\" : \"alarm,deviceStatus\" , # \"basePush\": \"2\", \"callbackUrl\" : callback_url , \"status\" : \"on\" , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_setMessageCallbackOn()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setNightVisionMode","text":"Set the night vision mode of the device (https://open.imoulife.com/book/http/device/config/video/setNightVisionMode.html). Source code in imouapi/api.py 393 394 395 396 397 398 399 400 401 402 403 404 405 async def async_api_setNightVisionMode ( self , device_id : str , mode : str ) -> dict : # pylint: disable=invalid-name \"\"\"Set the night vision mode of the device \\ (https://open.imoulife.com/book/http/device/config/video/setNightVisionMode.html).\"\"\" # define the api endpoint api = \"setNightVisionMode\" # prepare the payload payload = { \"deviceId\" : device_id , \"channelId\" : \"0\" , \"mode\" : mode , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_setNightVisionMode()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_unbindLive","text":"Delete the live broadcast address. (https://open.imoulife.com/book/en/http/device/live/unbindLive.html). Source code in imouapi/api.py 590 591 592 593 594 595 596 597 598 async def async_api_unbindLive ( self , live_token : str ) -> dict : # pylint: disable=invalid-name \"\"\"Delete the live broadcast address. \\ (https://open.imoulife.com/book/en/http/device/live/unbindLive.html).\"\"\" # define the api endpoint api = \"unbindLive\" # prepare the payload payload = { \"liveToken\" : live_token } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_unbindLive()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_connect","text":"Authenticate against the API and retrieve an access token. Source code in imouapi/api.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token\" ) self . _connected = True return True","title":"async_connect()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_disconnect","text":"Disconnect from the API. Source code in imouapi/api.py 118 119 120 121 122 123 124 async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True","title":"async_disconnect()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_reconnect","text":"Reconnect to the API. Source code in imouapi/api.py 126 127 128 129 async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect ()","title":"async_reconnect()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.get_base_url","text":"Get base url for the API. Source code in imouapi/api.py 67 68 69 def get_base_url ( self ) -> str : \"\"\"Get base url for the API.\"\"\" return self . _base_url","title":"get_base_url()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.get_session","text":"Return the aiohttp client session. Source code in imouapi/api.py 89 90 91 def get_session ( self ) -> ClientSession : \"\"\"Return the aiohttp client session.\"\"\" return self . _session","title":"get_session()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.get_timeout","text":"Get timeout for the API. Source code in imouapi/api.py 76 77 78 def get_timeout ( self ) -> int : \"\"\"Get timeout for the API.\"\"\" return self . _timeout","title":"get_timeout()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.is_connected","text":"Return true if already connected. Source code in imouapi/api.py 131 132 133 def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected","title":"is_connected()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_base_url","text":"Set a custom base url for the API. Source code in imouapi/api.py 71 72 73 74 def set_base_url ( self , value : str ) -> None : \"\"\"Set a custom base url for the API.\"\"\" self . _base_url = value _LOGGER . debug ( \"Set endpoint URL to %s \" , self . _base_url )","title":"set_base_url()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_log_http_requests","text":"Set to true if you want in debug logs also HTTP requests and responses. Source code in imouapi/api.py 93 94 95 def set_log_http_requests ( self , value : bool ) -> None : \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\" self . _log_http_requests_enabled = value","title":"set_log_http_requests()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_redact_log_messages","text":"Set to true if you want debug logs redacted from sensitive data. Source code in imouapi/api.py 97 98 99 def set_redact_log_messages ( self , value : bool ) -> None : \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\" self . _redact_log_message_enabled = value","title":"set_redact_log_messages()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_session","text":"Set an aiohttp client session. Source code in imouapi/api.py 85 86 87 def set_session ( self , value : ClientSession ) -> None : \"\"\"Set an aiohttp client session.\"\"\" self . _session = value","title":"set_session()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_timeout","text":"Set a custom timeout. Source code in imouapi/api.py 80 81 82 83 def set_timeout ( self , value : int ) -> None : \"\"\"Set a custom timeout.\"\"\" self . _timeout = value _LOGGER . debug ( \"Set timeout to %s \" , self . _base_url )","title":"set_timeout()"},{"location":"modules/device/","text":"High level API to discover and interacting with Imou devices and their sensors. ImouDevice \u00b6 A representation of an IMOU Device. Source code in imouapi/device.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 class ImouDevice : \"\"\"A representation of an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an ImouAPIClient instance device_id: device id \"\"\" self . _api_client = api_client self . _device_id = device_id self . _catalog = \"N.A.\" self . _firmware = \"N.A.\" self . _name = \"N.A.\" self . _given_name = \"\" self . _device_model = \"N.A.\" self . _manufacturer = \"Imou\" self . _status = \"UNKNOWN\" self . _capabilities : list [ str ] = [] self . _switches : list [ str ] = [] self . _sensor_instances : dict [ str , list ] = { \"switch\" : [], \"sensor\" : [], \"binary_sensor\" : [], \"select\" : [], \"button\" : [], \"siren\" : [], \"camera\" : [], } self . _initialized = False self . _enabled = True self . _sleepable = False self . _wait_after_wakeup = WAIT_AFTER_WAKE_UP self . _camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_api_client ( self ) -> ImouAPIClient : \"\"\"Get api client.\"\"\" return self . _api_client def get_name ( self ) -> str : \"\"\"Get device name.\"\"\" if self . _given_name != \"\" : return self . _given_name return self . _name def set_name ( self , given_name : str ) -> None : \"\"\"Set device name.\"\"\" self . _given_name = given_name def get_model ( self ) -> str : \"\"\"Get model.\"\"\" return self . _device_model def get_manufacturer ( self ) -> str : \"\"\"Get manufacturer.\"\"\" return self . _manufacturer def get_firmware ( self ) -> str : \"\"\"Get firmware.\"\"\" return self . _firmware def get_status ( self ) -> str : \"\"\"Get status.\"\"\" return self . _status def is_online ( self ) -> bool : \"\"\"Get online status.\"\"\" return ONLINE_STATUS [ self . _status ] == \"Online\" or ONLINE_STATUS [ self . _status ] == \"Dormant\" def get_sleepable ( self ) -> bool : \"\"\"Get sleepable.\"\"\" return self . _sleepable def get_all_sensors ( self ) -> list [ ImouEntity ]: \"\"\"Get all the sensor instances.\"\"\" sensors = [] for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : sensors . append ( sensor_instance ) return sensors def get_sensors_by_platform ( self , platform : str ) -> list [ ImouEntity ]: \"\"\"Get sensor instances associated to a given platform.\"\"\" if platform not in self . _sensor_instances : return [] return self . _sensor_instances [ platform ] def get_sensor_by_name ( self , name : str ) -> Union [ ImouSensor , ImouBinarySensor , ImouSwitch , ImouSelect , ImouButton , None ]: \"\"\"Get sensor instance with a given name.\"\"\" for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : if sensor_instance . get_name () == name : return sensor_instance return None def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value def is_enabled ( self ) -> bool : \"\"\"Is enabled.\"\"\" return self . _enabled def set_wait_after_wakeup ( self , value : float ) -> None : \"\"\"Set wait after wakeup.\"\"\" self . _wait_after_wakeup = value def get_wait_after_wakeup ( self ) -> float : \"\"\"Get wait after wakeup.\"\"\" return self . _wait_after_wakeup def set_camera_wait_before_download ( self , value : float ) -> None : \"\"\"Set camera wait before download.\"\"\" self . _camera_wait_before_download = value def get_camera_wait_before_download ( self ) -> float : \"\"\"Get camera wait before download.\"\"\" return self . _camera_wait_before_download def _add_sensor_instance ( self , platform , instance ): \"\"\"Add a sensor instance.\"\"\" instance . set_device ( self ) self . _sensor_instances [ platform ] . append ( instance ) async def async_initialize ( self ) -> None : \"\"\"Initialize the instance by retrieving the device details and associated sensors.\"\"\" # get the details for this device from the API device_array = await self . _api_client . async_api_deviceBaseDetailList ([ self . _device_id ]) if \"deviceList\" not in device_array or len ( device_array [ \"deviceList\" ]) != 1 : raise InvalidResponse ( f \"deviceList not found in { str ( device_array ) } \" ) # reponse is an array, our data is in the first element device_data = device_array [ \"deviceList\" ][ 0 ] try : # get device details self . _catalog = device_data [ \"catalog\" ] self . _firmware = device_data [ \"version\" ] self . _name = device_data [ \"name\" ] self . _device_model = device_data [ \"deviceModel\" ] # get device capabilities self . _capabilities = device_data [ \"ability\" ] . split ( \",\" ) # Add undocumented capabilities or capabilities inherited from other capabilities if \"AlarmMD\" in self . _capabilities : self . _capabilities . append ( \"MotionDetect\" ) if \"WLM\" in self . _capabilities : self . _capabilities . append ( \"Linkagewhitelight\" ) if \"WLAN\" in self . _capabilities : self . _capabilities . append ( \"pushNotifications\" ) switches_keys = IMOU_SWITCHES . keys () # add switches. For each possible switch, check if there is a capability with the same name \\ # (ref. https://open.imoulife.com/book/en/faq/feature.html) for switch_type in switches_keys : for capability in self . _capabilities : capability = capability . lower () capability = re . sub ( \"v \\\\ d$\" , '' , capability ) if switch_type . lower () == capability and switch_type . lower () not in self . _switches : self . _switches . append ( switch_type ) # create an instance and save it self . _add_sensor_instance ( \"switch\" , ImouSwitch ( self . _api_client , self . _device_id , self . get_name (), switch_type , ), ) break # identify sleepable devices if \"Dormant\" in self . _capabilities : self . _sleepable = True # add storageUsed sensor if \"LocalStorage\" in self . _capabilities : self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"storageUsed\" , ), ) # add callbackUrl sensor self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"callbackUrl\" , ), ) # add status sensor self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"status\" , ), ) # add online binary sensor if \"WLAN\" in self . _capabilities : self . _add_sensor_instance ( \"binary_sensor\" , ImouBinarySensor ( self . _api_client , self . _device_id , self . get_name (), \"online\" , ), ) # add motionAlarm binary sensor if \"AlarmMD\" in self . _capabilities : self . _add_sensor_instance ( \"binary_sensor\" , ImouBinarySensor ( self . _api_client , self . _device_id , self . get_name (), \"motionAlarm\" , ), ) # add nightVisionMode select if \"NVM\" in self . _capabilities : self . _add_sensor_instance ( \"select\" , ImouSelect ( self . _api_client , self . _device_id , self . get_name (), \"nightVisionMode\" , ), ) # add restartDevice button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"restartDevice\" , ), ) # add refreshData button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"refreshData\" , ), ) # add refreshAlarm button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"refreshAlarm\" , ), ) # add siren siren if \"Siren\" in self . _capabilities : self . _add_sensor_instance ( \"siren\" , ImouSiren ( self . _api_client , self . _device_id , self . get_name (), \"siren\" , ), ) # add cameras self . _add_sensor_instance ( \"camera\" , ImouCamera ( self . _api_client , self . _device_id , self . get_name (), \"camera\" , \"HD\" , ), ) self . _add_sensor_instance ( \"camera\" , ImouCamera ( self . _api_client , self . _device_id , self . get_name (), \"cameraSD\" , \"SD\" , ), ) except Exception as exception : raise InvalidResponse ( f \" missing parameter or error parsing in { device_data } \" ) from exception _LOGGER . debug ( \"Retrieved device %s \" , self . to_string ()) _LOGGER . debug ( \"Device details: \\n %s \" , self . dump ()) # keep track that we have already asked for the device details self . _initialized = True async def async_refresh_status ( self ) -> None : \"\"\"Refresh status attribute.\"\"\" data = await self . _api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data or data [ \"onLine\" ] not in ONLINE_STATUS : raise InvalidResponse ( f \"onLine not valid in { data } \" ) self . _status = data [ \"onLine\" ] async def async_wakeup ( self ) -> bool : \"\"\"Wake up a dormant device.\"\"\" # if this is a regular device, just return if not self . _sleepable : return True # if the device is already online, return await self . async_refresh_status () if ONLINE_STATUS [ self . _status ] == \"Olnline\" : return True # wake up the device _LOGGER . debug ( \"[ %s ] waking up the dormant device\" , self . get_name ()) await self . _api_client . async_api_setDeviceCameraStatus ( self . _device_id , \"closeDormant\" , True ) # wait for the device to be fully up await asyncio . sleep ( self . _wait_after_wakeup ) # ensure the device is up await self . async_refresh_status () if ONLINE_STATUS [ self . _status ] == \"Online\" : _LOGGER . debug ( \"[ %s ] device is now online\" , self . get_name ()) return True _LOGGER . warning ( \"[ %s ] failed to wake up dormant device\" , self . get_name ()) return False async def async_get_data ( self ) -> bool : \"\"\"Update device properties and its sensors.\"\"\" if not self . _enabled : return False if not self . _initialized : # get the details of the device first await self . async_initialize () _LOGGER . debug ( \"[ %s ] update requested\" , self . get_name ()) # check if the device is online await self . async_refresh_status () # update the status of all the sensors (if the device is online) if self . is_online (): for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : await sensor_instance . async_update () return True def to_string ( self ) -> str : \"\"\"Return the object as a string.\"\"\" return f \" { self . _name } ( { self . _device_model } , serial { self . _device_id } )\" def get_diagnostics ( self ) -> dict [ str , Any ]: \"\"\"Return diagnostics for the device.\"\"\" # prepare capabilities capabilities = [] for capability_name in self . _capabilities : capability = {} description = ( f \" { IMOU_CAPABILITIES [ capability_name ] } ( { capability_name } )\" if capability_name in IMOU_CAPABILITIES else capability_name ) capability [ \"name\" ] = capability_name capability [ \"description\" ] = description capabilities . append ( capability ) # prepare switches switches = [] for sensor_instance in self . _sensor_instances [ \"switch\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () switches . append ( sensor ) # prepare sensors sensors = [] for sensor_instance in self . _sensor_instances [ \"sensor\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SENSORS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . get_state () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () sensors . append ( sensor ) # prepare binary sensors binary_sensors = [] for sensor_instance in self . _sensor_instances [ \"binary_sensor\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { BINARY_SENSORS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () binary_sensors . append ( sensor ) # prepare select selects = [] for sensor_instance in self . _sensor_instances [ \"select\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SELECT [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"current_option\" ] = sensor_instance . get_current_option () sensor [ \"available_options\" ] = sensor_instance . get_available_options () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () selects . append ( sensor ) # prepare button buttons = [] for sensor_instance in self . _sensor_instances [ \"button\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { BUTTONS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () buttons . append ( sensor ) # prepare sirens sirens = [] for sensor_instance in self . _sensor_instances [ \"siren\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SIRENS [ sensor_name ] } ( { sensor_name } )\" if sensor_name in SIRENS else sensor_name sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () sirens . append ( sensor ) # prepare cameras cameras = [] for sensor_instance in self . _sensor_instances [ \"camera\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { CAMERAS [ sensor_name ] } ( { sensor_name } )\" if sensor_name in CAMERAS else sensor_name sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () cameras . append ( sensor ) # prepare data structure to return data : dict [ str , Any ] = { \"api\" : { \"base_url\" : self . _api_client . get_base_url (), \"timeout\" : self . _api_client . get_timeout (), \"is_connected\" : self . _api_client . is_connected (), }, \"device\" : { \"device_id\" : self . _device_id , \"name\" : self . _name , \"catalog\" : self . _catalog , \"given_name\" : self . _given_name , \"model\" : self . _device_model , \"firmware\" : self . _firmware , \"manufacturer\" : self . _manufacturer , \"status\" : self . _status , \"sleepable\" : self . _sleepable , }, \"capabilities\" : capabilities , \"switches\" : switches , \"sensors\" : sensors , \"binary_sensors\" : binary_sensors , \"selects\" : selects , \"buttons\" : buttons , \"sirens\" : sirens , \"cameras\" : cameras , } return data def dump ( self ) -> str : \"\"\"Return the full description of the object and its attributes.\"\"\" data = self . get_diagnostics () dump = ( f \"- Device ID: { data [ 'device' ][ 'device_id' ] } \\n \" + f \" Name: { data [ 'device' ][ 'name' ] } \\n \" + f \" Catalog: { data [ 'device' ][ 'catalog' ] } \\n \" + f \" Model: { data [ 'device' ][ 'model' ] } \\n \" + f \" Firmware: { data [ 'device' ][ 'firmware' ] } \\n \" + f \" Status: { ONLINE_STATUS [ data [ 'device' ][ 'status' ]] } \\n \" + f \" Sleepable: { data [ 'device' ][ 'sleepable' ] } \\n \" ) dump = dump + \" Capabilities: \\n \" for capability in data [ 'capabilities' ]: dump = dump + f \" - { capability [ 'description' ] } \\n \" dump = dump + \" Switches: \\n \" for sensor in data [ 'switches' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Sensors: \\n \" for sensor in data [ 'sensors' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Binary Sensors: \\n \" for sensor in data [ 'binary_sensors' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Select: \\n \" for sensor in data [ 'selects' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'current_option' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Buttons: \\n \" for sensor in data [ 'buttons' ]: dump = ( dump + f \" - { sensor [ 'description' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Sirens: \\n \" for sensor in data [ 'sirens' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Cameras: \\n \" for sensor in data [ 'cameras' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) return dump __init__ ( api_client , device_id ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an ImouAPIClient instance required device_id str device id required Source code in imouapi/device.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def __init__ ( self , api_client : ImouAPIClient , device_id : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an ImouAPIClient instance device_id: device id \"\"\" self . _api_client = api_client self . _device_id = device_id self . _catalog = \"N.A.\" self . _firmware = \"N.A.\" self . _name = \"N.A.\" self . _given_name = \"\" self . _device_model = \"N.A.\" self . _manufacturer = \"Imou\" self . _status = \"UNKNOWN\" self . _capabilities : list [ str ] = [] self . _switches : list [ str ] = [] self . _sensor_instances : dict [ str , list ] = { \"switch\" : [], \"sensor\" : [], \"binary_sensor\" : [], \"select\" : [], \"button\" : [], \"siren\" : [], \"camera\" : [], } self . _initialized = False self . _enabled = True self . _sleepable = False self . _wait_after_wakeup = WAIT_AFTER_WAKE_UP self . _camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD async_get_data () async \u00b6 Update device properties and its sensors. Source code in imouapi/device.py 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 async def async_get_data ( self ) -> bool : \"\"\"Update device properties and its sensors.\"\"\" if not self . _enabled : return False if not self . _initialized : # get the details of the device first await self . async_initialize () _LOGGER . debug ( \"[ %s ] update requested\" , self . get_name ()) # check if the device is online await self . async_refresh_status () # update the status of all the sensors (if the device is online) if self . is_online (): for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : await sensor_instance . async_update () return True async_initialize () async \u00b6 Initialize the instance by retrieving the device details and associated sensors. Source code in imouapi/device.pyasync def async_initialize ( self ) -> None : \"\"\"Initialize the instance by retrieving the device details and associated sensors.\"\"\" # get the details for this device from the API device_array = await self . _api_client . async_api_deviceBaseDetailList ([ self . _device_id ]) if \"deviceList\" not in device_array or len ( device_array [ \"deviceList\" ]) != 1 : raise InvalidResponse ( f \"deviceList not found in { str ( device_array ) } \" ) # reponse is an array, our data is in the first element device_data = device_array [ \"deviceList\" ][ 0 ] try : # get device details self . _catalog = device_data [ \"catalog\" ] self . _firmware = device_data [ \"version\" ] self . _name = device_data [ \"name\" ] self . _device_model = device_data [ \"deviceModel\" ] # get device capabilities self . _capabilities = device_data [ \"ability\" ] . split ( \",\" ) # Add undocumented capabilities or capabilities inherited from other capabilities if \"AlarmMD\" in self . _capabilities : self . _capabilities . append ( \"MotionDetect\" ) if \"WLM\" in self . _capabilities : self . _capabilities . append ( \"Linkagewhitelight\" ) if \"WLAN\" in self . _capabilities : self . _capabilities . append ( \"pushNotifications\" ) switches_keys = IMOU_SWITCHES . keys () # add switches. For each possible switch, check if there is a capability with the same name \\ # (ref. https://open.imoulife.com/book/en/faq/feature.html) for switch_type in switches_keys : for capability in self . _capabilities : capability = capability . lower () capability = re . sub ( \"v \\\\ d$\" , '' , capability ) if switch_type . lower () == capability and switch_type . lower () not in self . _switches : self . _switches . append ( switch_type ) # create an instance and save it self . _add_sensor_instance ( \"switch\" , ImouSwitch ( self . _api_client , self . _device_id , self . get_name (), switch_type , ), ) break # identify sleepable devices if \"Dormant\" in self . _capabilities : self . _sleepable = True # add storageUsed sensor if \"LocalStorage\" in self . _capabilities : self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"storageUsed\" , ), ) # add callbackUrl sensor self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"callbackUrl\" , ), ) # add status sensor self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"status\" , ), ) # add online binary sensor if \"WLAN\" in self . _capabilities : self . _add_sensor_instance ( \"binary_sensor\" , ImouBinarySensor ( self . _api_client , self . _device_id , self . get_name (), \"online\" , ), ) # add motionAlarm binary sensor if \"AlarmMD\" in self . _capabilities : self . _add_sensor_instance ( \"binary_sensor\" , ImouBinarySensor ( self . _api_client , self . _device_id , self . get_name (), \"motionAlarm\" , ), ) # add nightVisionMode select if \"NVM\" in self . _capabilities : self . _add_sensor_instance ( \"select\" , ImouSelect ( self . _api_client , self . _device_id , self . get_name (), \"nightVisionMode\" , ), ) # add restartDevice button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"restartDevice\" , ), ) # add refreshData button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"refreshData\" , ), ) # add refreshAlarm button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"refreshAlarm\" , ), ) # add siren siren if \"Siren\" in self . _capabilities : self . _add_sensor_instance ( \"siren\" , ImouSiren ( self . _api_client , self . _device_id , self . get_name (), \"siren\" , ), ) # add cameras self . _add_sensor_instance ( \"camera\" , ImouCamera ( self . _api_client , self . _device_id , self . get_name (), \"camera\" , \"HD\" , ), ) self . _add_sensor_instance ( \"camera\" , ImouCamera ( self . _api_client , self . _device_id , self . get_name (), \"cameraSD\" , \"SD\" , ), ) except Exception as exception : raise InvalidResponse ( f \" missing parameter or error parsing in { device_data } \" ) from exception _LOGGER . debug ( \"Retrieved device %s \" , self . to_string ()) _LOGGER . debug ( \"Device details: \\n %s \" , self . dump ()) # keep track that we have already asked for the device details self . _initialized = True async_refresh_status () async \u00b6 Refresh status attribute. Source code in imouapi/device.py 358 359 360 361 362 363 async def async_refresh_status ( self ) -> None : \"\"\"Refresh status attribute.\"\"\" data = await self . _api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data or data [ \"onLine\" ] not in ONLINE_STATUS : raise InvalidResponse ( f \"onLine not valid in { data } \" ) self . _status = data [ \"onLine\" ] async_wakeup () async \u00b6 Wake up a dormant device. Source code in imouapi/device.py 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 async def async_wakeup ( self ) -> bool : \"\"\"Wake up a dormant device.\"\"\" # if this is a regular device, just return if not self . _sleepable : return True # if the device is already online, return await self . async_refresh_status () if ONLINE_STATUS [ self . _status ] == \"Olnline\" : return True # wake up the device _LOGGER . debug ( \"[ %s ] waking up the dormant device\" , self . get_name ()) await self . _api_client . async_api_setDeviceCameraStatus ( self . _device_id , \"closeDormant\" , True ) # wait for the device to be fully up await asyncio . sleep ( self . _wait_after_wakeup ) # ensure the device is up await self . async_refresh_status () if ONLINE_STATUS [ self . _status ] == \"Online\" : _LOGGER . debug ( \"[ %s ] device is now online\" , self . get_name ()) return True _LOGGER . warning ( \"[ %s ] failed to wake up dormant device\" , self . get_name ()) return False dump () \u00b6 Return the full description of the object and its attributes. Source code in imouapi/device.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 def dump ( self ) -> str : \"\"\"Return the full description of the object and its attributes.\"\"\" data = self . get_diagnostics () dump = ( f \"- Device ID: { data [ 'device' ][ 'device_id' ] } \\n \" + f \" Name: { data [ 'device' ][ 'name' ] } \\n \" + f \" Catalog: { data [ 'device' ][ 'catalog' ] } \\n \" + f \" Model: { data [ 'device' ][ 'model' ] } \\n \" + f \" Firmware: { data [ 'device' ][ 'firmware' ] } \\n \" + f \" Status: { ONLINE_STATUS [ data [ 'device' ][ 'status' ]] } \\n \" + f \" Sleepable: { data [ 'device' ][ 'sleepable' ] } \\n \" ) dump = dump + \" Capabilities: \\n \" for capability in data [ 'capabilities' ]: dump = dump + f \" - { capability [ 'description' ] } \\n \" dump = dump + \" Switches: \\n \" for sensor in data [ 'switches' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Sensors: \\n \" for sensor in data [ 'sensors' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Binary Sensors: \\n \" for sensor in data [ 'binary_sensors' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Select: \\n \" for sensor in data [ 'selects' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'current_option' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Buttons: \\n \" for sensor in data [ 'buttons' ]: dump = ( dump + f \" - { sensor [ 'description' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Sirens: \\n \" for sensor in data [ 'sirens' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Cameras: \\n \" for sensor in data [ 'cameras' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) return dump get_all_sensors () \u00b6 Get all the sensor instances. Source code in imouapi/device.py 120 121 122 123 124 125 126 127 128 129 def get_all_sensors ( self ) -> list [ ImouEntity ]: \"\"\"Get all the sensor instances.\"\"\" sensors = [] for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : sensors . append ( sensor_instance ) return sensors get_api_client () \u00b6 Get api client. Source code in imouapi/device.py 82 83 84 def get_api_client ( self ) -> ImouAPIClient : \"\"\"Get api client.\"\"\" return self . _api_client get_camera_wait_before_download () \u00b6 Get camera wait before download. Source code in imouapi/device.py 170 171 172 def get_camera_wait_before_download ( self ) -> float : \"\"\"Get camera wait before download.\"\"\" return self . _camera_wait_before_download get_device_id () \u00b6 Get device id. Source code in imouapi/device.py 78 79 80 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id get_diagnostics () \u00b6 Return diagnostics for the device. Source code in imouapi/device.pydef get_diagnostics ( self ) -> dict [ str , Any ]: \"\"\"Return diagnostics for the device.\"\"\" # prepare capabilities capabilities = [] for capability_name in self . _capabilities : capability = {} description = ( f \" { IMOU_CAPABILITIES [ capability_name ] } ( { capability_name } )\" if capability_name in IMOU_CAPABILITIES else capability_name ) capability [ \"name\" ] = capability_name capability [ \"description\" ] = description capabilities . append ( capability ) # prepare switches switches = [] for sensor_instance in self . _sensor_instances [ \"switch\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () switches . append ( sensor ) # prepare sensors sensors = [] for sensor_instance in self . _sensor_instances [ \"sensor\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SENSORS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . get_state () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () sensors . append ( sensor ) # prepare binary sensors binary_sensors = [] for sensor_instance in self . _sensor_instances [ \"binary_sensor\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { BINARY_SENSORS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () binary_sensors . append ( sensor ) # prepare select selects = [] for sensor_instance in self . _sensor_instances [ \"select\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SELECT [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"current_option\" ] = sensor_instance . get_current_option () sensor [ \"available_options\" ] = sensor_instance . get_available_options () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () selects . append ( sensor ) # prepare button buttons = [] for sensor_instance in self . _sensor_instances [ \"button\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { BUTTONS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () buttons . append ( sensor ) # prepare sirens sirens = [] for sensor_instance in self . _sensor_instances [ \"siren\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SIRENS [ sensor_name ] } ( { sensor_name } )\" if sensor_name in SIRENS else sensor_name sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () sirens . append ( sensor ) # prepare cameras cameras = [] for sensor_instance in self . _sensor_instances [ \"camera\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { CAMERAS [ sensor_name ] } ( { sensor_name } )\" if sensor_name in CAMERAS else sensor_name sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () cameras . append ( sensor ) # prepare data structure to return data : dict [ str , Any ] = { \"api\" : { \"base_url\" : self . _api_client . get_base_url (), \"timeout\" : self . _api_client . get_timeout (), \"is_connected\" : self . _api_client . is_connected (), }, \"device\" : { \"device_id\" : self . _device_id , \"name\" : self . _name , \"catalog\" : self . _catalog , \"given_name\" : self . _given_name , \"model\" : self . _device_model , \"firmware\" : self . _firmware , \"manufacturer\" : self . _manufacturer , \"status\" : self . _status , \"sleepable\" : self . _sleepable , }, \"capabilities\" : capabilities , \"switches\" : switches , \"sensors\" : sensors , \"binary_sensors\" : binary_sensors , \"selects\" : selects , \"buttons\" : buttons , \"sirens\" : sirens , \"cameras\" : cameras , } return data get_firmware () \u00b6 Get firmware. Source code in imouapi/device.py 104 105 106 def get_firmware ( self ) -> str : \"\"\"Get firmware.\"\"\" return self . _firmware get_manufacturer () \u00b6 Get manufacturer. Source code in imouapi/device.py 100 101 102 def get_manufacturer ( self ) -> str : \"\"\"Get manufacturer.\"\"\" return self . _manufacturer get_model () \u00b6 Get model. Source code in imouapi/device.py 96 97 98 def get_model ( self ) -> str : \"\"\"Get model.\"\"\" return self . _device_model get_name () \u00b6 Get device name. Source code in imouapi/device.py 86 87 88 89 90 def get_name ( self ) -> str : \"\"\"Get device name.\"\"\" if self . _given_name != \"\" : return self . _given_name return self . _name get_sensor_by_name ( name ) \u00b6 Get sensor instance with a given name. Source code in imouapi/device.py 137 138 139 140 141 142 143 144 145 146 147 148 def get_sensor_by_name ( self , name : str ) -> Union [ ImouSensor , ImouBinarySensor , ImouSwitch , ImouSelect , ImouButton , None ]: \"\"\"Get sensor instance with a given name.\"\"\" for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : if sensor_instance . get_name () == name : return sensor_instance return None get_sensors_by_platform ( platform ) \u00b6 Get sensor instances associated to a given platform. Source code in imouapi/device.py 131 132 133 134 135 def get_sensors_by_platform ( self , platform : str ) -> list [ ImouEntity ]: \"\"\"Get sensor instances associated to a given platform.\"\"\" if platform not in self . _sensor_instances : return [] return self . _sensor_instances [ platform ] get_sleepable () \u00b6 Get sleepable. Source code in imouapi/device.py 116 117 118 def get_sleepable ( self ) -> bool : \"\"\"Get sleepable.\"\"\" return self . _sleepable get_status () \u00b6 Get status. Source code in imouapi/device.py 108 109 110 def get_status ( self ) -> str : \"\"\"Get status.\"\"\" return self . _status get_wait_after_wakeup () \u00b6 Get wait after wakeup. Source code in imouapi/device.py 162 163 164 def get_wait_after_wakeup ( self ) -> float : \"\"\"Get wait after wakeup.\"\"\" return self . _wait_after_wakeup is_enabled () \u00b6 Is enabled. Source code in imouapi/device.py 154 155 156 def is_enabled ( self ) -> bool : \"\"\"Is enabled.\"\"\" return self . _enabled is_online () \u00b6 Get online status. Source code in imouapi/device.py 112 113 114 def is_online ( self ) -> bool : \"\"\"Get online status.\"\"\" return ONLINE_STATUS [ self . _status ] == \"Online\" or ONLINE_STATUS [ self . _status ] == \"Dormant\" set_camera_wait_before_download ( value ) \u00b6 Set camera wait before download. Source code in imouapi/device.py 166 167 168 def set_camera_wait_before_download ( self , value : float ) -> None : \"\"\"Set camera wait before download.\"\"\" self . _camera_wait_before_download = value set_enabled ( value ) \u00b6 Set enable. Source code in imouapi/device.py 150 151 152 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value set_name ( given_name ) \u00b6 Set device name. Source code in imouapi/device.py 92 93 94 def set_name ( self , given_name : str ) -> None : \"\"\"Set device name.\"\"\" self . _given_name = given_name set_wait_after_wakeup ( value ) \u00b6 Set wait after wakeup. Source code in imouapi/device.py 158 159 160 def set_wait_after_wakeup ( self , value : float ) -> None : \"\"\"Set wait after wakeup.\"\"\" self . _wait_after_wakeup = value to_string () \u00b6 Return the object as a string. Source code in imouapi/device.py 409 410 411 def to_string ( self ) -> str : \"\"\"Return the object as a string.\"\"\" return f \" { self . _name } ( { self . _device_model } , serial { self . _device_id } )\" ImouDiscoverService \u00b6 Class for discovering IMOU devices. Source code in imouapi/device.py 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 class ImouDiscoverService : \"\"\"Class for discovering IMOU devices.\"\"\" def __init__ ( self , api_client : ImouAPIClient ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an ImouAPIClient instance \"\"\" self . _api_client = api_client async def async_discover_devices ( self ) -> dict : \"\"\"Discover registered devices and return a dict device name -> device object.\"\"\" _LOGGER . debug ( \"Starting discovery\" ) # get the list of devices devices_data = await self . _api_client . async_api_deviceBaseList () if \"deviceList\" not in devices_data or \"count\" not in devices_data : raise InvalidResponse ( f \"deviceList or count not found in { devices_data } \" ) _LOGGER . debug ( \"Discovered %d registered devices\" , devices_data [ \"count\" ]) # extract the device id for each device devices = {} for device_data in devices_data [ \"deviceList\" ]: # create a a device instance from the device id and initialize it device = ImouDevice ( self . _api_client , device_data [ \"deviceId\" ]) await device . async_initialize () _LOGGER . debug ( \" - %s \" , device . to_string ()) devices [ f \" { device . get_name () } \" ] = device # return a dict with device name -> device instance return devices __init__ ( api_client ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an ImouAPIClient instance required Source code in imouapi/device.py 611 612 613 614 615 616 617 618 def __init__ ( self , api_client : ImouAPIClient ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an ImouAPIClient instance \"\"\" self . _api_client = api_client async_discover_devices () async \u00b6 Discover registered devices and return a dict device name -> device object. Source code in imouapi/device.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 async def async_discover_devices ( self ) -> dict : \"\"\"Discover registered devices and return a dict device name -> device object.\"\"\" _LOGGER . debug ( \"Starting discovery\" ) # get the list of devices devices_data = await self . _api_client . async_api_deviceBaseList () if \"deviceList\" not in devices_data or \"count\" not in devices_data : raise InvalidResponse ( f \"deviceList or count not found in { devices_data } \" ) _LOGGER . debug ( \"Discovered %d registered devices\" , devices_data [ \"count\" ]) # extract the device id for each device devices = {} for device_data in devices_data [ \"deviceList\" ]: # create a a device instance from the device id and initialize it device = ImouDevice ( self . _api_client , device_data [ \"deviceId\" ]) await device . async_initialize () _LOGGER . debug ( \" - %s \" , device . to_string ()) devices [ f \" { device . get_name () } \" ] = device # return a dict with device name -> device instance return devices","title":"device"},{"location":"modules/device/#imouapi.device.ImouDevice","text":"A representation of an IMOU Device. Source code in imouapi/device.pyclass ImouDevice : \"\"\"A representation of an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an ImouAPIClient instance device_id: device id \"\"\" self . _api_client = api_client self . _device_id = device_id self . _catalog = \"N.A.\" self . _firmware = \"N.A.\" self . _name = \"N.A.\" self . _given_name = \"\" self . _device_model = \"N.A.\" self . _manufacturer = \"Imou\" self . _status = \"UNKNOWN\" self . _capabilities : list [ str ] = [] self . _switches : list [ str ] = [] self . _sensor_instances : dict [ str , list ] = { \"switch\" : [], \"sensor\" : [], \"binary_sensor\" : [], \"select\" : [], \"button\" : [], \"siren\" : [], \"camera\" : [], } self . _initialized = False self . _enabled = True self . _sleepable = False self . _wait_after_wakeup = WAIT_AFTER_WAKE_UP self . _camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_api_client ( self ) -> ImouAPIClient : \"\"\"Get api client.\"\"\" return self . _api_client def get_name ( self ) -> str : \"\"\"Get device name.\"\"\" if self . _given_name != \"\" : return self . _given_name return self . _name def set_name ( self , given_name : str ) -> None : \"\"\"Set device name.\"\"\" self . _given_name = given_name def get_model ( self ) -> str : \"\"\"Get model.\"\"\" return self . _device_model def get_manufacturer ( self ) -> str : \"\"\"Get manufacturer.\"\"\" return self . _manufacturer def get_firmware ( self ) -> str : \"\"\"Get firmware.\"\"\" return self . _firmware def get_status ( self ) -> str : \"\"\"Get status.\"\"\" return self . _status def is_online ( self ) -> bool : \"\"\"Get online status.\"\"\" return ONLINE_STATUS [ self . _status ] == \"Online\" or ONLINE_STATUS [ self . _status ] == \"Dormant\" def get_sleepable ( self ) -> bool : \"\"\"Get sleepable.\"\"\" return self . _sleepable def get_all_sensors ( self ) -> list [ ImouEntity ]: \"\"\"Get all the sensor instances.\"\"\" sensors = [] for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : sensors . append ( sensor_instance ) return sensors def get_sensors_by_platform ( self , platform : str ) -> list [ ImouEntity ]: \"\"\"Get sensor instances associated to a given platform.\"\"\" if platform not in self . _sensor_instances : return [] return self . _sensor_instances [ platform ] def get_sensor_by_name ( self , name : str ) -> Union [ ImouSensor , ImouBinarySensor , ImouSwitch , ImouSelect , ImouButton , None ]: \"\"\"Get sensor instance with a given name.\"\"\" for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : if sensor_instance . get_name () == name : return sensor_instance return None def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value def is_enabled ( self ) -> bool : \"\"\"Is enabled.\"\"\" return self . _enabled def set_wait_after_wakeup ( self , value : float ) -> None : \"\"\"Set wait after wakeup.\"\"\" self . _wait_after_wakeup = value def get_wait_after_wakeup ( self ) -> float : \"\"\"Get wait after wakeup.\"\"\" return self . _wait_after_wakeup def set_camera_wait_before_download ( self , value : float ) -> None : \"\"\"Set camera wait before download.\"\"\" self . _camera_wait_before_download = value def get_camera_wait_before_download ( self ) -> float : \"\"\"Get camera wait before download.\"\"\" return self . _camera_wait_before_download def _add_sensor_instance ( self , platform , instance ): \"\"\"Add a sensor instance.\"\"\" instance . set_device ( self ) self . _sensor_instances [ platform ] . append ( instance ) async def async_initialize ( self ) -> None : \"\"\"Initialize the instance by retrieving the device details and associated sensors.\"\"\" # get the details for this device from the API device_array = await self . _api_client . async_api_deviceBaseDetailList ([ self . _device_id ]) if \"deviceList\" not in device_array or len ( device_array [ \"deviceList\" ]) != 1 : raise InvalidResponse ( f \"deviceList not found in { str ( device_array ) } \" ) # reponse is an array, our data is in the first element device_data = device_array [ \"deviceList\" ][ 0 ] try : # get device details self . _catalog = device_data [ \"catalog\" ] self . _firmware = device_data [ \"version\" ] self . _name = device_data [ \"name\" ] self . _device_model = device_data [ \"deviceModel\" ] # get device capabilities self . _capabilities = device_data [ \"ability\" ] . split ( \",\" ) # Add undocumented capabilities or capabilities inherited from other capabilities if \"AlarmMD\" in self . _capabilities : self . _capabilities . append ( \"MotionDetect\" ) if \"WLM\" in self . _capabilities : self . _capabilities . append ( \"Linkagewhitelight\" ) if \"WLAN\" in self . _capabilities : self . _capabilities . append ( \"pushNotifications\" ) switches_keys = IMOU_SWITCHES . keys () # add switches. For each possible switch, check if there is a capability with the same name \\ # (ref. https://open.imoulife.com/book/en/faq/feature.html) for switch_type in switches_keys : for capability in self . _capabilities : capability = capability . lower () capability = re . sub ( \"v \\\\ d$\" , '' , capability ) if switch_type . lower () == capability and switch_type . lower () not in self . _switches : self . _switches . append ( switch_type ) # create an instance and save it self . _add_sensor_instance ( \"switch\" , ImouSwitch ( self . _api_client , self . _device_id , self . get_name (), switch_type , ), ) break # identify sleepable devices if \"Dormant\" in self . _capabilities : self . _sleepable = True # add storageUsed sensor if \"LocalStorage\" in self . _capabilities : self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"storageUsed\" , ), ) # add callbackUrl sensor self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"callbackUrl\" , ), ) # add status sensor self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"status\" , ), ) # add online binary sensor if \"WLAN\" in self . _capabilities : self . _add_sensor_instance ( \"binary_sensor\" , ImouBinarySensor ( self . _api_client , self . _device_id , self . get_name (), \"online\" , ), ) # add motionAlarm binary sensor if \"AlarmMD\" in self . _capabilities : self . _add_sensor_instance ( \"binary_sensor\" , ImouBinarySensor ( self . _api_client , self . _device_id , self . get_name (), \"motionAlarm\" , ), ) # add nightVisionMode select if \"NVM\" in self . _capabilities : self . _add_sensor_instance ( \"select\" , ImouSelect ( self . _api_client , self . _device_id , self . get_name (), \"nightVisionMode\" , ), ) # add restartDevice button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"restartDevice\" , ), ) # add refreshData button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"refreshData\" , ), ) # add refreshAlarm button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"refreshAlarm\" , ), ) # add siren siren if \"Siren\" in self . _capabilities : self . _add_sensor_instance ( \"siren\" , ImouSiren ( self . _api_client , self . _device_id , self . get_name (), \"siren\" , ), ) # add cameras self . _add_sensor_instance ( \"camera\" , ImouCamera ( self . _api_client , self . _device_id , self . get_name (), \"camera\" , \"HD\" , ), ) self . _add_sensor_instance ( \"camera\" , ImouCamera ( self . _api_client , self . _device_id , self . get_name (), \"cameraSD\" , \"SD\" , ), ) except Exception as exception : raise InvalidResponse ( f \" missing parameter or error parsing in { device_data } \" ) from exception _LOGGER . debug ( \"Retrieved device %s \" , self . to_string ()) _LOGGER . debug ( \"Device details: \\n %s \" , self . dump ()) # keep track that we have already asked for the device details self . _initialized = True async def async_refresh_status ( self ) -> None : \"\"\"Refresh status attribute.\"\"\" data = await self . _api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data or data [ \"onLine\" ] not in ONLINE_STATUS : raise InvalidResponse ( f \"onLine not valid in { data } \" ) self . _status = data [ \"onLine\" ] async def async_wakeup ( self ) -> bool : \"\"\"Wake up a dormant device.\"\"\" # if this is a regular device, just return if not self . _sleepable : return True # if the device is already online, return await self . async_refresh_status () if ONLINE_STATUS [ self . _status ] == \"Olnline\" : return True # wake up the device _LOGGER . debug ( \"[ %s ] waking up the dormant device\" , self . get_name ()) await self . _api_client . async_api_setDeviceCameraStatus ( self . _device_id , \"closeDormant\" , True ) # wait for the device to be fully up await asyncio . sleep ( self . _wait_after_wakeup ) # ensure the device is up await self . async_refresh_status () if ONLINE_STATUS [ self . _status ] == \"Online\" : _LOGGER . debug ( \"[ %s ] device is now online\" , self . get_name ()) return True _LOGGER . warning ( \"[ %s ] failed to wake up dormant device\" , self . get_name ()) return False async def async_get_data ( self ) -> bool : \"\"\"Update device properties and its sensors.\"\"\" if not self . _enabled : return False if not self . _initialized : # get the details of the device first await self . async_initialize () _LOGGER . debug ( \"[ %s ] update requested\" , self . get_name ()) # check if the device is online await self . async_refresh_status () # update the status of all the sensors (if the device is online) if self . is_online (): for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : await sensor_instance . async_update () return True def to_string ( self ) -> str : \"\"\"Return the object as a string.\"\"\" return f \" { self . _name } ( { self . _device_model } , serial { self . _device_id } )\" def get_diagnostics ( self ) -> dict [ str , Any ]: \"\"\"Return diagnostics for the device.\"\"\" # prepare capabilities capabilities = [] for capability_name in self . _capabilities : capability = {} description = ( f \" { IMOU_CAPABILITIES [ capability_name ] } ( { capability_name } )\" if capability_name in IMOU_CAPABILITIES else capability_name ) capability [ \"name\" ] = capability_name capability [ \"description\" ] = description capabilities . append ( capability ) # prepare switches switches = [] for sensor_instance in self . _sensor_instances [ \"switch\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () switches . append ( sensor ) # prepare sensors sensors = [] for sensor_instance in self . _sensor_instances [ \"sensor\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SENSORS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . get_state () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () sensors . append ( sensor ) # prepare binary sensors binary_sensors = [] for sensor_instance in self . _sensor_instances [ \"binary_sensor\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { BINARY_SENSORS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () binary_sensors . append ( sensor ) # prepare select selects = [] for sensor_instance in self . _sensor_instances [ \"select\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SELECT [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"current_option\" ] = sensor_instance . get_current_option () sensor [ \"available_options\" ] = sensor_instance . get_available_options () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () selects . append ( sensor ) # prepare button buttons = [] for sensor_instance in self . _sensor_instances [ \"button\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { BUTTONS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () buttons . append ( sensor ) # prepare sirens sirens = [] for sensor_instance in self . _sensor_instances [ \"siren\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SIRENS [ sensor_name ] } ( { sensor_name } )\" if sensor_name in SIRENS else sensor_name sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () sirens . append ( sensor ) # prepare cameras cameras = [] for sensor_instance in self . _sensor_instances [ \"camera\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { CAMERAS [ sensor_name ] } ( { sensor_name } )\" if sensor_name in CAMERAS else sensor_name sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () cameras . append ( sensor ) # prepare data structure to return data : dict [ str , Any ] = { \"api\" : { \"base_url\" : self . _api_client . get_base_url (), \"timeout\" : self . _api_client . get_timeout (), \"is_connected\" : self . _api_client . is_connected (), }, \"device\" : { \"device_id\" : self . _device_id , \"name\" : self . _name , \"catalog\" : self . _catalog , \"given_name\" : self . _given_name , \"model\" : self . _device_model , \"firmware\" : self . _firmware , \"manufacturer\" : self . _manufacturer , \"status\" : self . _status , \"sleepable\" : self . _sleepable , }, \"capabilities\" : capabilities , \"switches\" : switches , \"sensors\" : sensors , \"binary_sensors\" : binary_sensors , \"selects\" : selects , \"buttons\" : buttons , \"sirens\" : sirens , \"cameras\" : cameras , } return data def dump ( self ) -> str : \"\"\"Return the full description of the object and its attributes.\"\"\" data = self . get_diagnostics () dump = ( f \"- Device ID: { data [ 'device' ][ 'device_id' ] } \\n \" + f \" Name: { data [ 'device' ][ 'name' ] } \\n \" + f \" Catalog: { data [ 'device' ][ 'catalog' ] } \\n \" + f \" Model: { data [ 'device' ][ 'model' ] } \\n \" + f \" Firmware: { data [ 'device' ][ 'firmware' ] } \\n \" + f \" Status: { ONLINE_STATUS [ data [ 'device' ][ 'status' ]] } \\n \" + f \" Sleepable: { data [ 'device' ][ 'sleepable' ] } \\n \" ) dump = dump + \" Capabilities: \\n \" for capability in data [ 'capabilities' ]: dump = dump + f \" - { capability [ 'description' ] } \\n \" dump = dump + \" Switches: \\n \" for sensor in data [ 'switches' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Sensors: \\n \" for sensor in data [ 'sensors' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Binary Sensors: \\n \" for sensor in data [ 'binary_sensors' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Select: \\n \" for sensor in data [ 'selects' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'current_option' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Buttons: \\n \" for sensor in data [ 'buttons' ]: dump = ( dump + f \" - { sensor [ 'description' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Sirens: \\n \" for sensor in data [ 'sirens' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Cameras: \\n \" for sensor in data [ 'cameras' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) return dump","title":"ImouDevice"},{"location":"modules/device/#imouapi.device.ImouDevice.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an ImouAPIClient instance required device_id str device id required Source code in imouapi/device.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def __init__ ( self , api_client : ImouAPIClient , device_id : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an ImouAPIClient instance device_id: device id \"\"\" self . _api_client = api_client self . _device_id = device_id self . _catalog = \"N.A.\" self . _firmware = \"N.A.\" self . _name = \"N.A.\" self . _given_name = \"\" self . _device_model = \"N.A.\" self . _manufacturer = \"Imou\" self . _status = \"UNKNOWN\" self . _capabilities : list [ str ] = [] self . _switches : list [ str ] = [] self . _sensor_instances : dict [ str , list ] = { \"switch\" : [], \"sensor\" : [], \"binary_sensor\" : [], \"select\" : [], \"button\" : [], \"siren\" : [], \"camera\" : [], } self . _initialized = False self . _enabled = True self . _sleepable = False self . _wait_after_wakeup = WAIT_AFTER_WAKE_UP self . _camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD","title":"__init__()"},{"location":"modules/device/#imouapi.device.ImouDevice.async_get_data","text":"Update device properties and its sensors. Source code in imouapi/device.py 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 async def async_get_data ( self ) -> bool : \"\"\"Update device properties and its sensors.\"\"\" if not self . _enabled : return False if not self . _initialized : # get the details of the device first await self . async_initialize () _LOGGER . debug ( \"[ %s ] update requested\" , self . get_name ()) # check if the device is online await self . async_refresh_status () # update the status of all the sensors (if the device is online) if self . is_online (): for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : await sensor_instance . async_update () return True","title":"async_get_data()"},{"location":"modules/device/#imouapi.device.ImouDevice.async_initialize","text":"Initialize the instance by retrieving the device details and associated sensors. Source code in imouapi/device.pyasync def async_initialize ( self ) -> None : \"\"\"Initialize the instance by retrieving the device details and associated sensors.\"\"\" # get the details for this device from the API device_array = await self . _api_client . async_api_deviceBaseDetailList ([ self . _device_id ]) if \"deviceList\" not in device_array or len ( device_array [ \"deviceList\" ]) != 1 : raise InvalidResponse ( f \"deviceList not found in { str ( device_array ) } \" ) # reponse is an array, our data is in the first element device_data = device_array [ \"deviceList\" ][ 0 ] try : # get device details self . _catalog = device_data [ \"catalog\" ] self . _firmware = device_data [ \"version\" ] self . _name = device_data [ \"name\" ] self . _device_model = device_data [ \"deviceModel\" ] # get device capabilities self . _capabilities = device_data [ \"ability\" ] . split ( \",\" ) # Add undocumented capabilities or capabilities inherited from other capabilities if \"AlarmMD\" in self . _capabilities : self . _capabilities . append ( \"MotionDetect\" ) if \"WLM\" in self . _capabilities : self . _capabilities . append ( \"Linkagewhitelight\" ) if \"WLAN\" in self . _capabilities : self . _capabilities . append ( \"pushNotifications\" ) switches_keys = IMOU_SWITCHES . keys () # add switches. For each possible switch, check if there is a capability with the same name \\ # (ref. https://open.imoulife.com/book/en/faq/feature.html) for switch_type in switches_keys : for capability in self . _capabilities : capability = capability . lower () capability = re . sub ( \"v \\\\ d$\" , '' , capability ) if switch_type . lower () == capability and switch_type . lower () not in self . _switches : self . _switches . append ( switch_type ) # create an instance and save it self . _add_sensor_instance ( \"switch\" , ImouSwitch ( self . _api_client , self . _device_id , self . get_name (), switch_type , ), ) break # identify sleepable devices if \"Dormant\" in self . _capabilities : self . _sleepable = True # add storageUsed sensor if \"LocalStorage\" in self . _capabilities : self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"storageUsed\" , ), ) # add callbackUrl sensor self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"callbackUrl\" , ), ) # add status sensor self . _add_sensor_instance ( \"sensor\" , ImouSensor ( self . _api_client , self . _device_id , self . get_name (), \"status\" , ), ) # add online binary sensor if \"WLAN\" in self . _capabilities : self . _add_sensor_instance ( \"binary_sensor\" , ImouBinarySensor ( self . _api_client , self . _device_id , self . get_name (), \"online\" , ), ) # add motionAlarm binary sensor if \"AlarmMD\" in self . _capabilities : self . _add_sensor_instance ( \"binary_sensor\" , ImouBinarySensor ( self . _api_client , self . _device_id , self . get_name (), \"motionAlarm\" , ), ) # add nightVisionMode select if \"NVM\" in self . _capabilities : self . _add_sensor_instance ( \"select\" , ImouSelect ( self . _api_client , self . _device_id , self . get_name (), \"nightVisionMode\" , ), ) # add restartDevice button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"restartDevice\" , ), ) # add refreshData button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"refreshData\" , ), ) # add refreshAlarm button self . _add_sensor_instance ( \"button\" , ImouButton ( self . _api_client , self . _device_id , self . get_name (), \"refreshAlarm\" , ), ) # add siren siren if \"Siren\" in self . _capabilities : self . _add_sensor_instance ( \"siren\" , ImouSiren ( self . _api_client , self . _device_id , self . get_name (), \"siren\" , ), ) # add cameras self . _add_sensor_instance ( \"camera\" , ImouCamera ( self . _api_client , self . _device_id , self . get_name (), \"camera\" , \"HD\" , ), ) self . _add_sensor_instance ( \"camera\" , ImouCamera ( self . _api_client , self . _device_id , self . get_name (), \"cameraSD\" , \"SD\" , ), ) except Exception as exception : raise InvalidResponse ( f \" missing parameter or error parsing in { device_data } \" ) from exception _LOGGER . debug ( \"Retrieved device %s \" , self . to_string ()) _LOGGER . debug ( \"Device details: \\n %s \" , self . dump ()) # keep track that we have already asked for the device details self . _initialized = True","title":"async_initialize()"},{"location":"modules/device/#imouapi.device.ImouDevice.async_refresh_status","text":"Refresh status attribute. Source code in imouapi/device.py 358 359 360 361 362 363 async def async_refresh_status ( self ) -> None : \"\"\"Refresh status attribute.\"\"\" data = await self . _api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data or data [ \"onLine\" ] not in ONLINE_STATUS : raise InvalidResponse ( f \"onLine not valid in { data } \" ) self . _status = data [ \"onLine\" ]","title":"async_refresh_status()"},{"location":"modules/device/#imouapi.device.ImouDevice.async_wakeup","text":"Wake up a dormant device. Source code in imouapi/device.py 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 async def async_wakeup ( self ) -> bool : \"\"\"Wake up a dormant device.\"\"\" # if this is a regular device, just return if not self . _sleepable : return True # if the device is already online, return await self . async_refresh_status () if ONLINE_STATUS [ self . _status ] == \"Olnline\" : return True # wake up the device _LOGGER . debug ( \"[ %s ] waking up the dormant device\" , self . get_name ()) await self . _api_client . async_api_setDeviceCameraStatus ( self . _device_id , \"closeDormant\" , True ) # wait for the device to be fully up await asyncio . sleep ( self . _wait_after_wakeup ) # ensure the device is up await self . async_refresh_status () if ONLINE_STATUS [ self . _status ] == \"Online\" : _LOGGER . debug ( \"[ %s ] device is now online\" , self . get_name ()) return True _LOGGER . warning ( \"[ %s ] failed to wake up dormant device\" , self . get_name ()) return False","title":"async_wakeup()"},{"location":"modules/device/#imouapi.device.ImouDevice.dump","text":"Return the full description of the object and its attributes. Source code in imouapi/device.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 def dump ( self ) -> str : \"\"\"Return the full description of the object and its attributes.\"\"\" data = self . get_diagnostics () dump = ( f \"- Device ID: { data [ 'device' ][ 'device_id' ] } \\n \" + f \" Name: { data [ 'device' ][ 'name' ] } \\n \" + f \" Catalog: { data [ 'device' ][ 'catalog' ] } \\n \" + f \" Model: { data [ 'device' ][ 'model' ] } \\n \" + f \" Firmware: { data [ 'device' ][ 'firmware' ] } \\n \" + f \" Status: { ONLINE_STATUS [ data [ 'device' ][ 'status' ]] } \\n \" + f \" Sleepable: { data [ 'device' ][ 'sleepable' ] } \\n \" ) dump = dump + \" Capabilities: \\n \" for capability in data [ 'capabilities' ]: dump = dump + f \" - { capability [ 'description' ] } \\n \" dump = dump + \" Switches: \\n \" for sensor in data [ 'switches' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Sensors: \\n \" for sensor in data [ 'sensors' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Binary Sensors: \\n \" for sensor in data [ 'binary_sensors' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Select: \\n \" for sensor in data [ 'selects' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'current_option' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Buttons: \\n \" for sensor in data [ 'buttons' ]: dump = ( dump + f \" - { sensor [ 'description' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Sirens: \\n \" for sensor in data [ 'sirens' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'state' ] } { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) dump = dump + \" Cameras: \\n \" for sensor in data [ 'cameras' ]: dump = ( dump + f \" - { sensor [ 'description' ] } : { sensor [ 'attributes' ] if len ( sensor [ 'attributes' ]) > 0 else '' } \\n \" # noqa: E501 ) return dump","title":"dump()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_all_sensors","text":"Get all the sensor instances. Source code in imouapi/device.py 120 121 122 123 124 125 126 127 128 129 def get_all_sensors ( self ) -> list [ ImouEntity ]: \"\"\"Get all the sensor instances.\"\"\" sensors = [] for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : sensors . append ( sensor_instance ) return sensors","title":"get_all_sensors()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_api_client","text":"Get api client. Source code in imouapi/device.py 82 83 84 def get_api_client ( self ) -> ImouAPIClient : \"\"\"Get api client.\"\"\" return self . _api_client","title":"get_api_client()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_camera_wait_before_download","text":"Get camera wait before download. Source code in imouapi/device.py 170 171 172 def get_camera_wait_before_download ( self ) -> float : \"\"\"Get camera wait before download.\"\"\" return self . _camera_wait_before_download","title":"get_camera_wait_before_download()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_device_id","text":"Get device id. Source code in imouapi/device.py 78 79 80 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id","title":"get_device_id()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_diagnostics","text":"Return diagnostics for the device. Source code in imouapi/device.pydef get_diagnostics ( self ) -> dict [ str , Any ]: \"\"\"Return diagnostics for the device.\"\"\" # prepare capabilities capabilities = [] for capability_name in self . _capabilities : capability = {} description = ( f \" { IMOU_CAPABILITIES [ capability_name ] } ( { capability_name } )\" if capability_name in IMOU_CAPABILITIES else capability_name ) capability [ \"name\" ] = capability_name capability [ \"description\" ] = description capabilities . append ( capability ) # prepare switches switches = [] for sensor_instance in self . _sensor_instances [ \"switch\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () switches . append ( sensor ) # prepare sensors sensors = [] for sensor_instance in self . _sensor_instances [ \"sensor\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SENSORS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . get_state () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () sensors . append ( sensor ) # prepare binary sensors binary_sensors = [] for sensor_instance in self . _sensor_instances [ \"binary_sensor\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { BINARY_SENSORS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () binary_sensors . append ( sensor ) # prepare select selects = [] for sensor_instance in self . _sensor_instances [ \"select\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SELECT [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"current_option\" ] = sensor_instance . get_current_option () sensor [ \"available_options\" ] = sensor_instance . get_available_options () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () selects . append ( sensor ) # prepare button buttons = [] for sensor_instance in self . _sensor_instances [ \"button\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { BUTTONS [ sensor_name ] } ( { sensor_name } )\" sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () buttons . append ( sensor ) # prepare sirens sirens = [] for sensor_instance in self . _sensor_instances [ \"siren\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { SIRENS [ sensor_name ] } ( { sensor_name } )\" if sensor_name in SIRENS else sensor_name sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"state\" ] = sensor_instance . is_on () sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () sirens . append ( sensor ) # prepare cameras cameras = [] for sensor_instance in self . _sensor_instances [ \"camera\" ]: sensor = {} sensor_name = sensor_instance . get_name () description = f \" { CAMERAS [ sensor_name ] } ( { sensor_name } )\" if sensor_name in CAMERAS else sensor_name sensor [ \"name\" ] = sensor_name sensor [ \"description\" ] = description sensor [ \"is_enabled\" ] = sensor_instance . is_enabled () sensor [ \"is_updated\" ] = sensor_instance . is_updated () sensor [ \"attributes\" ] = sensor_instance . get_attributes () cameras . append ( sensor ) # prepare data structure to return data : dict [ str , Any ] = { \"api\" : { \"base_url\" : self . _api_client . get_base_url (), \"timeout\" : self . _api_client . get_timeout (), \"is_connected\" : self . _api_client . is_connected (), }, \"device\" : { \"device_id\" : self . _device_id , \"name\" : self . _name , \"catalog\" : self . _catalog , \"given_name\" : self . _given_name , \"model\" : self . _device_model , \"firmware\" : self . _firmware , \"manufacturer\" : self . _manufacturer , \"status\" : self . _status , \"sleepable\" : self . _sleepable , }, \"capabilities\" : capabilities , \"switches\" : switches , \"sensors\" : sensors , \"binary_sensors\" : binary_sensors , \"selects\" : selects , \"buttons\" : buttons , \"sirens\" : sirens , \"cameras\" : cameras , } return data","title":"get_diagnostics()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_firmware","text":"Get firmware. Source code in imouapi/device.py 104 105 106 def get_firmware ( self ) -> str : \"\"\"Get firmware.\"\"\" return self . _firmware","title":"get_firmware()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_manufacturer","text":"Get manufacturer. Source code in imouapi/device.py 100 101 102 def get_manufacturer ( self ) -> str : \"\"\"Get manufacturer.\"\"\" return self . _manufacturer","title":"get_manufacturer()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_model","text":"Get model. Source code in imouapi/device.py 96 97 98 def get_model ( self ) -> str : \"\"\"Get model.\"\"\" return self . _device_model","title":"get_model()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_name","text":"Get device name. Source code in imouapi/device.py 86 87 88 89 90 def get_name ( self ) -> str : \"\"\"Get device name.\"\"\" if self . _given_name != \"\" : return self . _given_name return self . _name","title":"get_name()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_sensor_by_name","text":"Get sensor instance with a given name. Source code in imouapi/device.py 137 138 139 140 141 142 143 144 145 146 147 148 def get_sensor_by_name ( self , name : str ) -> Union [ ImouSensor , ImouBinarySensor , ImouSwitch , ImouSelect , ImouButton , None ]: \"\"\"Get sensor instance with a given name.\"\"\" for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : if sensor_instance . get_name () == name : return sensor_instance return None","title":"get_sensor_by_name()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_sensors_by_platform","text":"Get sensor instances associated to a given platform. Source code in imouapi/device.py 131 132 133 134 135 def get_sensors_by_platform ( self , platform : str ) -> list [ ImouEntity ]: \"\"\"Get sensor instances associated to a given platform.\"\"\" if platform not in self . _sensor_instances : return [] return self . _sensor_instances [ platform ]","title":"get_sensors_by_platform()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_sleepable","text":"Get sleepable. Source code in imouapi/device.py 116 117 118 def get_sleepable ( self ) -> bool : \"\"\"Get sleepable.\"\"\" return self . _sleepable","title":"get_sleepable()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_status","text":"Get status. Source code in imouapi/device.py 108 109 110 def get_status ( self ) -> str : \"\"\"Get status.\"\"\" return self . _status","title":"get_status()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_wait_after_wakeup","text":"Get wait after wakeup. Source code in imouapi/device.py 162 163 164 def get_wait_after_wakeup ( self ) -> float : \"\"\"Get wait after wakeup.\"\"\" return self . _wait_after_wakeup","title":"get_wait_after_wakeup()"},{"location":"modules/device/#imouapi.device.ImouDevice.is_enabled","text":"Is enabled. Source code in imouapi/device.py 154 155 156 def is_enabled ( self ) -> bool : \"\"\"Is enabled.\"\"\" return self . _enabled","title":"is_enabled()"},{"location":"modules/device/#imouapi.device.ImouDevice.is_online","text":"Get online status. Source code in imouapi/device.py 112 113 114 def is_online ( self ) -> bool : \"\"\"Get online status.\"\"\" return ONLINE_STATUS [ self . _status ] == \"Online\" or ONLINE_STATUS [ self . _status ] == \"Dormant\"","title":"is_online()"},{"location":"modules/device/#imouapi.device.ImouDevice.set_camera_wait_before_download","text":"Set camera wait before download. Source code in imouapi/device.py 166 167 168 def set_camera_wait_before_download ( self , value : float ) -> None : \"\"\"Set camera wait before download.\"\"\" self . _camera_wait_before_download = value","title":"set_camera_wait_before_download()"},{"location":"modules/device/#imouapi.device.ImouDevice.set_enabled","text":"Set enable. Source code in imouapi/device.py 150 151 152 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value","title":"set_enabled()"},{"location":"modules/device/#imouapi.device.ImouDevice.set_name","text":"Set device name. Source code in imouapi/device.py 92 93 94 def set_name ( self , given_name : str ) -> None : \"\"\"Set device name.\"\"\" self . _given_name = given_name","title":"set_name()"},{"location":"modules/device/#imouapi.device.ImouDevice.set_wait_after_wakeup","text":"Set wait after wakeup. Source code in imouapi/device.py 158 159 160 def set_wait_after_wakeup ( self , value : float ) -> None : \"\"\"Set wait after wakeup.\"\"\" self . _wait_after_wakeup = value","title":"set_wait_after_wakeup()"},{"location":"modules/device/#imouapi.device.ImouDevice.to_string","text":"Return the object as a string. Source code in imouapi/device.py 409 410 411 def to_string ( self ) -> str : \"\"\"Return the object as a string.\"\"\" return f \" { self . _name } ( { self . _device_model } , serial { self . _device_id } )\"","title":"to_string()"},{"location":"modules/device/#imouapi.device.ImouDiscoverService","text":"Class for discovering IMOU devices. Source code in imouapi/device.py 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 class ImouDiscoverService : \"\"\"Class for discovering IMOU devices.\"\"\" def __init__ ( self , api_client : ImouAPIClient ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an ImouAPIClient instance \"\"\" self . _api_client = api_client async def async_discover_devices ( self ) -> dict : \"\"\"Discover registered devices and return a dict device name -> device object.\"\"\" _LOGGER . debug ( \"Starting discovery\" ) # get the list of devices devices_data = await self . _api_client . async_api_deviceBaseList () if \"deviceList\" not in devices_data or \"count\" not in devices_data : raise InvalidResponse ( f \"deviceList or count not found in { devices_data } \" ) _LOGGER . debug ( \"Discovered %d registered devices\" , devices_data [ \"count\" ]) # extract the device id for each device devices = {} for device_data in devices_data [ \"deviceList\" ]: # create a a device instance from the device id and initialize it device = ImouDevice ( self . _api_client , device_data [ \"deviceId\" ]) await device . async_initialize () _LOGGER . debug ( \" - %s \" , device . to_string ()) devices [ f \" { device . get_name () } \" ] = device # return a dict with device name -> device instance return devices","title":"ImouDiscoverService"},{"location":"modules/device/#imouapi.device.ImouDiscoverService.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an ImouAPIClient instance required Source code in imouapi/device.py 611 612 613 614 615 616 617 618 def __init__ ( self , api_client : ImouAPIClient ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an ImouAPIClient instance \"\"\" self . _api_client = api_client","title":"__init__()"},{"location":"modules/device/#imouapi.device.ImouDiscoverService.async_discover_devices","text":"Discover registered devices and return a dict device name -> device object. Source code in imouapi/device.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 async def async_discover_devices ( self ) -> dict : \"\"\"Discover registered devices and return a dict device name -> device object.\"\"\" _LOGGER . debug ( \"Starting discovery\" ) # get the list of devices devices_data = await self . _api_client . async_api_deviceBaseList () if \"deviceList\" not in devices_data or \"count\" not in devices_data : raise InvalidResponse ( f \"deviceList or count not found in { devices_data } \" ) _LOGGER . debug ( \"Discovered %d registered devices\" , devices_data [ \"count\" ]) # extract the device id for each device devices = {} for device_data in devices_data [ \"deviceList\" ]: # create a a device instance from the device id and initialize it device = ImouDevice ( self . _api_client , device_data [ \"deviceId\" ]) await device . async_initialize () _LOGGER . debug ( \" - %s \" , device . to_string ()) devices [ f \" { device . get_name () } \" ] = device # return a dict with device name -> device instance return devices","title":"async_discover_devices()"},{"location":"modules/device_entity/","text":"Classes for representing entities beloging to an Imou device. ImouBinarySensor \u00b6 Bases: ImouEntity A representation of a sensor within an IMOU Device. Source code in imouapi/device_entity.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 class ImouBinarySensor ( ImouEntity ): \"\"\"A representation of a sensor within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const BINARY_SENSORS \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , BINARY_SENSORS [ sensor_type ]) # keep track of the status of the sensor self . _state = None async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # online sensor if self . _name == \"online\" : # get the device status if self . _device_instance is not None : await self . _device_instance . async_refresh_status () self . _state = self . _device_instance . is_online () # motionAlarm sensor if self . _name == \"motionAlarm\" : # get the time of the last alarm data = await self . api_client . async_api_getAlarmMessage ( self . _device_id ) if \"alarms\" not in data : raise InvalidResponse ( f \"alarms not found in { data } \" ) if len ( data [ \"alarms\" ]) > 0 : alarm = data [ \"alarms\" ][ 0 ] if \"time\" not in alarm or \"type\" not in alarm or \"msgType\" not in alarm or \"deviceId\" not in alarm : raise InvalidResponse ( f \"time, type, msgType or deviceId not found in { alarm } \" ) # convert it into ISO 8601 alarm_time = datetime . utcfromtimestamp ( alarm [ \"time\" ]) . isoformat () # if previously stored alarm time is different, an alarm occurred in the mean time if \"alarm_time\" in self . _attributes and alarm_time != self . _attributes [ \"alarm_time\" ]: self . _state = True else : self . _state = False # save attributes self . _attributes = { \"alarm_time\" : alarm_time , \"alarm_type\" : alarm [ \"msgType\" ], \"alarm_code\" : alarm [ \"type\" ], } _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _state , self . _attributes , ) if not self . _updated : self . _updated = True def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state __init__ ( api_client , device_id , device_name , sensor_type ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type from const BINARY_SENSORS required Source code in imouapi/device_entity.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const BINARY_SENSORS \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , BINARY_SENSORS [ sensor_type ]) # keep track of the status of the sensor self . _state = None async_update ( kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # online sensor if self . _name == \"online\" : # get the device status if self . _device_instance is not None : await self . _device_instance . async_refresh_status () self . _state = self . _device_instance . is_online () # motionAlarm sensor if self . _name == \"motionAlarm\" : # get the time of the last alarm data = await self . api_client . async_api_getAlarmMessage ( self . _device_id ) if \"alarms\" not in data : raise InvalidResponse ( f \"alarms not found in { data } \" ) if len ( data [ \"alarms\" ]) > 0 : alarm = data [ \"alarms\" ][ 0 ] if \"time\" not in alarm or \"type\" not in alarm or \"msgType\" not in alarm or \"deviceId\" not in alarm : raise InvalidResponse ( f \"time, type, msgType or deviceId not found in { alarm } \" ) # convert it into ISO 8601 alarm_time = datetime . utcfromtimestamp ( alarm [ \"time\" ]) . isoformat () # if previously stored alarm time is different, an alarm occurred in the mean time if \"alarm_time\" in self . _attributes and alarm_time != self . _attributes [ \"alarm_time\" ]: self . _state = True else : self . _state = False # save attributes self . _attributes = { \"alarm_time\" : alarm_time , \"alarm_type\" : alarm [ \"msgType\" ], \"alarm_code\" : alarm [ \"type\" ], } _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _state , self . _attributes , ) if not self . _updated : self . _updated = True is_on () \u00b6 Return the status of the switch. Source code in imouapi/device_entity.py 242 243 244 def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state ImouButton \u00b6 Bases: ImouEntity A representation of a button within an IMOU Device. Source code in imouapi/device_entity.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 class ImouButton ( ImouEntity ): \"\"\"A representation of a button within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const BUTTON \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , BUTTONS [ sensor_type ]) async def async_press ( self ) -> None : \"\"\"Press action.\"\"\" if not await self . _async_is_ready (): return if self . _name == \"restartDevice\" : # restart the device await self . api_client . async_api_restartDevice ( self . _device_id ) _LOGGER . debug ( \"[ %s ] pressed button %s \" , self . _device_name , self . _description , ) if not self . _updated : self . _updated = True async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" return __init__ ( api_client , device_id , device_name , sensor_type ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type from const BUTTON required Source code in imouapi/device_entity.py 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const BUTTON \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , BUTTONS [ sensor_type ]) async_press () async \u00b6 Press action. Source code in imouapi/device_entity.py 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 async def async_press ( self ) -> None : \"\"\"Press action.\"\"\" if not await self . _async_is_ready (): return if self . _name == \"restartDevice\" : # restart the device await self . api_client . async_api_restartDevice ( self . _device_id ) _LOGGER . debug ( \"[ %s ] pressed button %s \" , self . _device_name , self . _description , ) if not self . _updated : self . _updated = True async_update ( kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 439 440 441 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" return ImouCamera \u00b6 Bases: ImouEntity A representation of a camera within an IMOU Device. Source code in imouapi/device_entity.pyclass ImouCamera ( ImouEntity ): \"\"\"A representation of a camera within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , profile : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the CAMERAS constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , CAMERAS [ sensor_type ]) self . _state = False self . _profile = profile async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return async def async_get_image ( self ) -> Union [ bytes , None ]: \"\"\"Get image snapshot.\"\"\" if not await self . _async_is_ready (): return None _LOGGER . debug ( \"[ %s ] requested an image snapshot\" , self . _device_name , ) # request a snapshot and get the url data = await self . api_client . async_api_setDeviceSnapEnhanced ( self . _device_id ) if \"url\" not in data : raise InvalidResponse ( f \"url not found in { data } \" ) url = data [ \"url\" ] # wait for the image to be available camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD if self . _device_instance is not None : self . _device_instance . get_camera_wait_before_download () await asyncio . sleep ( camera_wait_before_download ) # retrieve the image from the url session = self . api_client . get_session () if session is None : raise NotConnected () try : response = await session . request ( \"GET\" , url , timeout = self . api_client . get_timeout ()) if response . status != 200 : raise InvalidResponse ( f \"status code { response . status } \" ) image = await response . read () except Exception as exception : raise InvalidResponse ( f \"unable to retrieve image from { url } : { exception } \" ) from exception return image async def async_open_stream ( self ) -> None : \"\"\"Open a new stream.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] opening a new live stream\" , self . _device_name , ) # Create a device live broadcast address for profile try : data = await self . api_client . async_api_bindDeviceLive ( self . _device_id , self . _profile ) if \"streams\" not in data or \"hls\" not in data [ \"streams\" ][ 0 ] or \"liveToken\" not in data : raise InvalidResponse ( f \"streams, hls or liveToken not found in { data } \" ) except APIError as exception : # The video live already exists if \"LV1001\" in exception . to_string (): pass else : raise APIError from exception async def async_get_existing_stream ( self ) -> dict : \"\"\"Get existing streams if any and return a data structure with url and token.\"\"\" existing_stream = { \"url\" : None , \"token\" : None , } data = {} # request existing live streaming information for the device try : data = await self . api_client . async_api_getLiveStreamInfo ( self . _device_id ) except APIError as exception : # The video live does not exist if \"LV1002\" in exception . to_string (): pass else : raise APIError from exception # streams already available, find the right one if \"streams\" in data : for stream in data [ \"streams\" ]: if ( \"streamId\" not in stream or \"status\" not in stream or \"hls\" not in stream or \"liveToken\" not in stream ): raise InvalidResponse ( f \"streamId, status, liveToken, hls not found in { stream } \" ) # identify the right stream for this profile if ( ( ( self . _profile == \"HD\" and stream [ \"streamId\" ] == 0 ) or ( self . _profile == \"SD\" and stream [ \"streamId\" ] == 1 ) ) and stream [ \"hls\" ] . startswith ( \"https://\" ) and stream [ \"status\" ] == \"1\" ): existing_stream [ \"url\" ] = stream [ \"hls\" ] existing_stream [ \"token\" ] = stream [ \"liveToken\" ] break if existing_stream [ \"url\" ] is None or existing_stream [ \"token\" ] is None : raise InvalidResponse ( f \"stream not found in { data } \" ) # return a data structure containing the url and the token return existing_stream async def async_close_stream ( self ) -> None : \"\"\"Close a live stream.\"\"\" # get the existing stream if any existing_stream = await self . async_get_existing_stream () if existing_stream [ \"token\" ] is not None : await self . api_client . async_api_unbindLive ( existing_stream [ \"token\" ]) _LOGGER . debug ( \"[ %s ] closing live stream\" , self . _device_name , ) async def async_get_stream_url ( self ) -> dict : \"\"\"Get a live stream URL, taking care of creating a stream if needed.\"\"\" # get the existing stream if any existing_stream = await self . async_get_existing_stream () if existing_stream [ \"url\" ] is not None : return existing_stream [ \"url\" ] else : # otherwise open the stream await self . async_open_stream () # get the right stream url and return it existing_stream = await self . async_get_existing_stream () if existing_stream [ \"url\" ] is None : raise APIError ( \"unable to get live streaming\" ) _LOGGER . debug ( \"[ %s ] live streaming url: %s \" , self . _device_name , existing_stream [ \"url\" ]) return existing_stream [ \"url\" ] async def async_service_ptz_location ( self , horizontal : float , vertical : float , zoom : float ) -> dict : \"\"\"Perform PTZ location action.\"\"\" _LOGGER . debug ( \"[ %s ] invoked PTZ location action horizontal: %f , vertical: %f , zoom: %f \" , self . _device_name , horizontal , vertical , zoom , ) return await self . api_client . async_api_controlLocationPTZ ( self . _device_id , horizontal , vertical , zoom , ) async def async_service_ptz_move ( self , operation : str , duration : int ) -> dict : \"\"\"Perform PTZ move action.\"\"\" _LOGGER . debug ( \"[ %s ] invoked PTZ move action. operation: %s , duration: %i \" , self . _device_name , operation , duration , ) return await self . api_client . async_api_controlMovePTZ ( self . _device_id , operation , duration , ) __init__ ( api_client , device_id , device_name , sensor_type , profile ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type (from the CAMERAS constant) required Source code in imouapi/device_entity.py 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , profile : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the CAMERAS constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , CAMERAS [ sensor_type ]) self . _state = False self . _profile = profile async_close_stream () async \u00b6 Close a live stream. Source code in imouapi/device_entity.py 633 634 635 636 637 638 639 640 641 642 async def async_close_stream ( self ) -> None : \"\"\"Close a live stream.\"\"\" # get the existing stream if any existing_stream = await self . async_get_existing_stream () if existing_stream [ \"token\" ] is not None : await self . api_client . async_api_unbindLive ( existing_stream [ \"token\" ]) _LOGGER . debug ( \"[ %s ] closing live stream\" , self . _device_name , ) async_get_existing_stream () async \u00b6 Get existing streams if any and return a data structure with url and token. Source code in imouapi/device_entity.py 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 async def async_get_existing_stream ( self ) -> dict : \"\"\"Get existing streams if any and return a data structure with url and token.\"\"\" existing_stream = { \"url\" : None , \"token\" : None , } data = {} # request existing live streaming information for the device try : data = await self . api_client . async_api_getLiveStreamInfo ( self . _device_id ) except APIError as exception : # The video live does not exist if \"LV1002\" in exception . to_string (): pass else : raise APIError from exception # streams already available, find the right one if \"streams\" in data : for stream in data [ \"streams\" ]: if ( \"streamId\" not in stream or \"status\" not in stream or \"hls\" not in stream or \"liveToken\" not in stream ): raise InvalidResponse ( f \"streamId, status, liveToken, hls not found in { stream } \" ) # identify the right stream for this profile if ( ( ( self . _profile == \"HD\" and stream [ \"streamId\" ] == 0 ) or ( self . _profile == \"SD\" and stream [ \"streamId\" ] == 1 ) ) and stream [ \"hls\" ] . startswith ( \"https://\" ) and stream [ \"status\" ] == \"1\" ): existing_stream [ \"url\" ] = stream [ \"hls\" ] existing_stream [ \"token\" ] = stream [ \"liveToken\" ] break if existing_stream [ \"url\" ] is None or existing_stream [ \"token\" ] is None : raise InvalidResponse ( f \"stream not found in { data } \" ) # return a data structure containing the url and the token return existing_stream async_get_image () async \u00b6 Get image snapshot. Source code in imouapi/device_entity.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 async def async_get_image ( self ) -> Union [ bytes , None ]: \"\"\"Get image snapshot.\"\"\" if not await self . _async_is_ready (): return None _LOGGER . debug ( \"[ %s ] requested an image snapshot\" , self . _device_name , ) # request a snapshot and get the url data = await self . api_client . async_api_setDeviceSnapEnhanced ( self . _device_id ) if \"url\" not in data : raise InvalidResponse ( f \"url not found in { data } \" ) url = data [ \"url\" ] # wait for the image to be available camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD if self . _device_instance is not None : self . _device_instance . get_camera_wait_before_download () await asyncio . sleep ( camera_wait_before_download ) # retrieve the image from the url session = self . api_client . get_session () if session is None : raise NotConnected () try : response = await session . request ( \"GET\" , url , timeout = self . api_client . get_timeout ()) if response . status != 200 : raise InvalidResponse ( f \"status code { response . status } \" ) image = await response . read () except Exception as exception : raise InvalidResponse ( f \"unable to retrieve image from { url } : { exception } \" ) from exception return image async_get_stream_url () async \u00b6 Get a live stream URL, taking care of creating a stream if needed. Source code in imouapi/device_entity.py 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 async def async_get_stream_url ( self ) -> dict : \"\"\"Get a live stream URL, taking care of creating a stream if needed.\"\"\" # get the existing stream if any existing_stream = await self . async_get_existing_stream () if existing_stream [ \"url\" ] is not None : return existing_stream [ \"url\" ] else : # otherwise open the stream await self . async_open_stream () # get the right stream url and return it existing_stream = await self . async_get_existing_stream () if existing_stream [ \"url\" ] is None : raise APIError ( \"unable to get live streaming\" ) _LOGGER . debug ( \"[ %s ] live streaming url: %s \" , self . _device_name , existing_stream [ \"url\" ]) return existing_stream [ \"url\" ] async_open_stream () async \u00b6 Open a new stream. Source code in imouapi/device_entity.py 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 async def async_open_stream ( self ) -> None : \"\"\"Open a new stream.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] opening a new live stream\" , self . _device_name , ) # Create a device live broadcast address for profile try : data = await self . api_client . async_api_bindDeviceLive ( self . _device_id , self . _profile ) if \"streams\" not in data or \"hls\" not in data [ \"streams\" ][ 0 ] or \"liveToken\" not in data : raise InvalidResponse ( f \"streams, hls or liveToken not found in { data } \" ) except APIError as exception : # The video live already exists if \"LV1001\" in exception . to_string (): pass else : raise APIError from exception async_service_ptz_location ( horizontal , vertical , zoom ) async \u00b6 Perform PTZ location action. Source code in imouapi/device_entity.py 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 async def async_service_ptz_location ( self , horizontal : float , vertical : float , zoom : float ) -> dict : \"\"\"Perform PTZ location action.\"\"\" _LOGGER . debug ( \"[ %s ] invoked PTZ location action horizontal: %f , vertical: %f , zoom: %f \" , self . _device_name , horizontal , vertical , zoom , ) return await self . api_client . async_api_controlLocationPTZ ( self . _device_id , horizontal , vertical , zoom , ) async_service_ptz_move ( operation , duration ) async \u00b6 Perform PTZ move action. Source code in imouapi/device_entity.py 676 677 678 679 680 681 682 683 684 685 686 687 688 async def async_service_ptz_move ( self , operation : str , duration : int ) -> dict : \"\"\"Perform PTZ move action.\"\"\" _LOGGER . debug ( \"[ %s ] invoked PTZ move action. operation: %s , duration: %i \" , self . _device_name , operation , duration , ) return await self . api_client . async_api_controlMovePTZ ( self . _device_id , operation , duration , ) async_update ( kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 534 535 536 537 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return ImouEntity \u00b6 Bases: ABC A representation of a sensor within an Imou Device. Source code in imouapi/device_entity.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 class ImouEntity ( ABC ): \"\"\"A representation of a sensor within an Imou Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , sensor_description : str , ) -> None : \"\"\"Initialize common parameters.\"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _description = sensor_description self . _enabled = True self . _updated = False self . _device_instance = None self . _attributes : dict [ str , str ] = {} def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value def is_enabled ( self ) -> bool : \"\"\"If enabled.\"\"\" return self . _enabled def is_updated ( self ) -> bool : \"\"\"If has been updated at least once.\"\"\" return self . _updated def set_device ( self , device_instance ) -> None : \"\"\"Set the device instance this entity is belonging to.\"\"\" self . _device_instance = device_instance def get_attributes ( self ) -> dict : \"\"\"Entity attributes.\"\"\" return self . _attributes async def _async_is_ready ( self ) -> bool : \"\"\"Check if the sensor is fully ready.\"\"\" # check if the sensor is enabled if not self . _enabled : return False # wake up the device if a dormant device and sleeping if self . _device_instance is not None : awake = await self . _device_instance . async_wakeup () if awake : return True return False return True @abstractmethod async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" __init__ ( api_client , device_id , device_name , sensor_type , sensor_description ) \u00b6 Initialize common parameters. Source code in imouapi/device_entity.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , sensor_description : str , ) -> None : \"\"\"Initialize common parameters.\"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _description = sensor_description self . _enabled = True self . _updated = False self . _device_instance = None self . _attributes : dict [ str , str ] = {} async_update ( kwargs ) abstractmethod async \u00b6 Update the entity. Source code in imouapi/device_entity.py 92 93 94 @abstractmethod async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" get_attributes () \u00b6 Entity attributes. Source code in imouapi/device_entity.py 75 76 77 def get_attributes ( self ) -> dict : \"\"\"Entity attributes.\"\"\" return self . _attributes get_description () \u00b6 Get description. Source code in imouapi/device_entity.py 55 56 57 def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description get_device_id () \u00b6 Get device id. Source code in imouapi/device_entity.py 47 48 49 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id get_name () \u00b6 Get name. Source code in imouapi/device_entity.py 51 52 53 def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name is_enabled () \u00b6 If enabled. Source code in imouapi/device_entity.py 63 64 65 def is_enabled ( self ) -> bool : \"\"\"If enabled.\"\"\" return self . _enabled is_updated () \u00b6 If has been updated at least once. Source code in imouapi/device_entity.py 67 68 69 def is_updated ( self ) -> bool : \"\"\"If has been updated at least once.\"\"\" return self . _updated set_device ( device_instance ) \u00b6 Set the device instance this entity is belonging to. Source code in imouapi/device_entity.py 71 72 73 def set_device ( self , device_instance ) -> None : \"\"\"Set the device instance this entity is belonging to.\"\"\" self . _device_instance = device_instance set_enabled ( value ) \u00b6 Set enable. Source code in imouapi/device_entity.py 59 60 61 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value ImouSelect \u00b6 Bases: ImouEntity A representation of a select within an IMOU Device. Source code in imouapi/device_entity.py 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 class ImouSelect ( ImouEntity ): \"\"\"A representation of a select within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const SELECT \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SELECT [ sensor_type ]) # keep track of the status of the sensor self . _current_option : Union [ str , None ] = None self . _available_options : list [ str ] = [] async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return if self . _name == \"nightVisionMode\" : # get the night vision mode option selected data = await self . api_client . async_api_getNightVisionMode ( self . _device_id ) if \"mode\" not in data or \"modes\" not in data : raise InvalidResponse ( f \"mode or modes not found in { data } \" ) self . _current_option = data [ \"mode\" ] self . _available_options = data [ \"modes\" ] _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _current_option , self . _attributes , ) if not self . _updated : self . _updated = True def get_current_option ( self ) -> Optional [ str ]: \"\"\"Return the current option.\"\"\" return self . _current_option def get_available_options ( self ) -> list [ str ]: \"\"\"Return the available options.\"\"\" return self . _available_options async def async_select_option ( self , option : str ) -> None : \"\"\"Change the selected option.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s setting to %s \" , self . _device_name , self . _description , option ) if self . _name == \"nightVisionMode\" : await self . api_client . async_api_setNightVisionMode ( self . _device_id , option ) self . _current_option = option __init__ ( api_client , device_id , device_name , sensor_type ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type from const SELECT required Source code in imouapi/device_entity.py 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const SELECT \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SELECT [ sensor_type ]) # keep track of the status of the sensor self . _current_option : Union [ str , None ] = None self . _available_options : list [ str ] = [] async_select_option ( option ) async \u00b6 Change the selected option. Source code in imouapi/device_entity.py 390 391 392 393 394 395 396 397 398 async def async_select_option ( self , option : str ) -> None : \"\"\"Change the selected option.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s setting to %s \" , self . _device_name , self . _description , option ) if self . _name == \"nightVisionMode\" : await self . api_client . async_api_setNightVisionMode ( self . _device_id , option ) self . _current_option = option async_update ( kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return if self . _name == \"nightVisionMode\" : # get the night vision mode option selected data = await self . api_client . async_api_getNightVisionMode ( self . _device_id ) if \"mode\" not in data or \"modes\" not in data : raise InvalidResponse ( f \"mode or modes not found in { data } \" ) self . _current_option = data [ \"mode\" ] self . _available_options = data [ \"modes\" ] _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _current_option , self . _attributes , ) if not self . _updated : self . _updated = True get_available_options () \u00b6 Return the available options. Source code in imouapi/device_entity.py 386 387 388 def get_available_options ( self ) -> list [ str ]: \"\"\"Return the available options.\"\"\" return self . _available_options get_current_option () \u00b6 Return the current option. Source code in imouapi/device_entity.py 382 383 384 def get_current_option ( self ) -> Optional [ str ]: \"\"\"Return the current option.\"\"\" return self . _current_option ImouSensor \u00b6 Bases: ImouEntity A representation of a sensor within an IMOU Device. Source code in imouapi/device_entity.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 class ImouSensor ( ImouEntity ): \"\"\"A representation of a sensor within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const SENSORS \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SENSORS [ sensor_type ]) # keep track of the status of the sensor self . _state = None async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # storageUsed sensor elif self . _name == \"storageUsed\" : # get SD card status data = await self . api_client . async_api_deviceSdcardStatus ( self . _device_id ) if \"status\" not in data : raise InvalidResponse ( f \"status not found in { data } \" ) if data [ \"status\" ] == \"normal\" : # get the storage status data = await self . api_client . async_api_deviceStorage ( self . _device_id ) if \"totalBytes\" not in data or \"usedBytes\" not in data : raise InvalidResponse ( f \"totalBytes or usedBytes not found in { data } \" ) percentage_used = int ( data [ \"usedBytes\" ] * 100 / data [ \"totalBytes\" ]) self . _state = percentage_used # callbackUrl sensor elif self . _name == \"callbackUrl\" : # get callback url data = await self . api_client . async_api_getMessageCallback () if \"callbackUrl\" not in data : raise InvalidResponse ( f \"callbackUrl not found in { data } \" ) self . _state = data [ \"callbackUrl\" ] # status sensor if self . _name == \"status\" : # get the device status data = await self . api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data : raise InvalidResponse ( f \"onLine not found in { data } \" ) if data [ \"onLine\" ] in ONLINE_STATUS : self . _state = ONLINE_STATUS [ data [ \"onLine\" ]] else : self . _state = ONLINE_STATUS [ \"UNKNOWN\" ] _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _state , self . _attributes , ) if not self . _updated : self . _updated = True def get_state ( self ) -> Optional [ str ]: \"\"\"Return the state.\"\"\" return self . _state __init__ ( api_client , device_id , device_name , sensor_type ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type from const SENSORS required Source code in imouapi/device_entity.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const SENSORS \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SENSORS [ sensor_type ]) # keep track of the status of the sensor self . _state = None async_update ( kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # storageUsed sensor elif self . _name == \"storageUsed\" : # get SD card status data = await self . api_client . async_api_deviceSdcardStatus ( self . _device_id ) if \"status\" not in data : raise InvalidResponse ( f \"status not found in { data } \" ) if data [ \"status\" ] == \"normal\" : # get the storage status data = await self . api_client . async_api_deviceStorage ( self . _device_id ) if \"totalBytes\" not in data or \"usedBytes\" not in data : raise InvalidResponse ( f \"totalBytes or usedBytes not found in { data } \" ) percentage_used = int ( data [ \"usedBytes\" ] * 100 / data [ \"totalBytes\" ]) self . _state = percentage_used # callbackUrl sensor elif self . _name == \"callbackUrl\" : # get callback url data = await self . api_client . async_api_getMessageCallback () if \"callbackUrl\" not in data : raise InvalidResponse ( f \"callbackUrl not found in { data } \" ) self . _state = data [ \"callbackUrl\" ] # status sensor if self . _name == \"status\" : # get the device status data = await self . api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data : raise InvalidResponse ( f \"onLine not found in { data } \" ) if data [ \"onLine\" ] in ONLINE_STATUS : self . _state = ONLINE_STATUS [ data [ \"onLine\" ]] else : self . _state = ONLINE_STATUS [ \"UNKNOWN\" ] _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _state , self . _attributes , ) if not self . _updated : self . _updated = True get_state () \u00b6 Return the state. Source code in imouapi/device_entity.py 168 169 170 def get_state ( self ) -> Optional [ str ]: \"\"\"Return the state.\"\"\" return self . _state ImouSiren \u00b6 Bases: ImouEntity A representation of a siren within an IMOU Device. Source code in imouapi/device_entity.py 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 class ImouSiren ( ImouEntity ): \"\"\"A representation of a siren within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the SIRENS constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SIRENS [ sensor_type ]) self . _state = False async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # siren sensor if self . _name == \"siren\" : # async_api_getDeviceCameraStatus() does not return the current state of the siren, do nothing here pass def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn ON ( %s )\" , self . _device_name , self . _description , kwargs ) # siren sensor if self . _name == \"siren\" : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn OFF ( %s )\" , self . _device_name , self . _description , kwargs ) # siren sensor if self . _name == \"siren\" : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not await self . _async_is_ready (): return if self . _state : await self . async_turn_off () else : await self . async_turn_on () __init__ ( api_client , device_id , device_name , sensor_type ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type (from the SIRENS constant) required Source code in imouapi/device_entity.py 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the SIRENS constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SIRENS [ sensor_type ]) self . _state = False async_toggle ( kwargs ) async \u00b6 Toggle the entity. Source code in imouapi/device_entity.py 500 501 502 503 504 505 506 507 async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not await self . _async_is_ready (): return if self . _state : await self . async_turn_off () else : await self . async_turn_on () async_turn_off ( kwargs ) async \u00b6 Turn the entity off. Source code in imouapi/device_entity.py 490 491 492 493 494 495 496 497 498 async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn OFF ( %s )\" , self . _device_name , self . _description , kwargs ) # siren sensor if self . _name == \"siren\" : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False async_turn_on ( kwargs ) async \u00b6 Turn the entity on. Source code in imouapi/device_entity.py 480 481 482 483 484 485 486 487 488 async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn ON ( %s )\" , self . _device_name , self . _description , kwargs ) # siren sensor if self . _name == \"siren\" : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True async_update ( kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 466 467 468 469 470 471 472 473 474 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # siren sensor if self . _name == \"siren\" : # async_api_getDeviceCameraStatus() does not return the current state of the siren, do nothing here pass is_on () \u00b6 Return the status of the switch. Source code in imouapi/device_entity.py 476 477 478 def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state ImouSwitch \u00b6 Bases: ImouEntity A representation of a switch within an IMOU Device. Source code in imouapi/device_entity.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 class ImouSwitch ( ImouEntity ): \"\"\"A representation of a switch within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the SWITCHES constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , IMOU_SWITCHES [ sensor_type ]) self . _state = None async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # pushNotifications sensor if self . _name == \"pushNotifications\" : data = await self . api_client . async_api_getMessageCallback () # all the other dynamically created sensors else : data = await self . api_client . async_api_getDeviceCameraStatus ( self . _device_id , self . _name ) _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , data [ \"status\" ] . upper (), self . _attributes , ) self . _state = data [ \"status\" ] == \"on\" if not self . _updated : self . _updated = True def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn ON ( %s )\" , self . _device_name , self . _description , kwargs ) # pushNotifications sensor if self . _name == \"pushNotifications\" : if \"url\" not in kwargs : raise APIError ( \"url not provided\" ) await self . api_client . async_api_setMessageCallbackOn ( kwargs . get ( \"url\" )) # all the other dynamically created sensors else : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn OFF ( %s )\" , self . _device_name , self . _description , kwargs ) if self . _name == \"pushNotifications\" : await self . api_client . async_api_setMessageCallbackOff () # all the other dynamically created sensors else : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not await self . _async_is_ready (): return if self . _state : await self . async_turn_off () else : await self . async_turn_on () __init__ ( api_client , device_id , device_name , sensor_type ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type (from the SWITCHES constant) required Source code in imouapi/device_entity.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the SWITCHES constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , IMOU_SWITCHES [ sensor_type ]) self . _state = None async_toggle ( kwargs ) async \u00b6 Toggle the entity. Source code in imouapi/device_entity.py 325 326 327 328 329 330 331 332 333 async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not await self . _async_is_ready (): return if self . _state : await self . async_turn_off () else : await self . async_turn_on () async_turn_off ( kwargs ) async \u00b6 Turn the entity off. Source code in imouapi/device_entity.py 312 313 314 315 316 317 318 319 320 321 322 323 async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn OFF ( %s )\" , self . _device_name , self . _description , kwargs ) if self . _name == \"pushNotifications\" : await self . api_client . async_api_setMessageCallbackOff () # all the other dynamically created sensors else : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False async_turn_on ( kwargs ) async \u00b6 Turn the entity on. Source code in imouapi/device_entity.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn ON ( %s )\" , self . _device_name , self . _description , kwargs ) # pushNotifications sensor if self . _name == \"pushNotifications\" : if \"url\" not in kwargs : raise APIError ( \"url not provided\" ) await self . api_client . async_api_setMessageCallbackOn ( kwargs . get ( \"url\" )) # all the other dynamically created sensors else : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True async_update ( kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # pushNotifications sensor if self . _name == \"pushNotifications\" : data = await self . api_client . async_api_getMessageCallback () # all the other dynamically created sensors else : data = await self . api_client . async_api_getDeviceCameraStatus ( self . _device_id , self . _name ) _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , data [ \"status\" ] . upper (), self . _attributes , ) self . _state = data [ \"status\" ] == \"on\" if not self . _updated : self . _updated = True is_on () \u00b6 Return the status of the switch. Source code in imouapi/device_entity.py 292 293 294 def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state","title":"device_entity"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor","text":"Bases: ImouEntity A representation of a sensor within an IMOU Device. Source code in imouapi/device_entity.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 class ImouBinarySensor ( ImouEntity ): \"\"\"A representation of a sensor within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const BINARY_SENSORS \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , BINARY_SENSORS [ sensor_type ]) # keep track of the status of the sensor self . _state = None async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # online sensor if self . _name == \"online\" : # get the device status if self . _device_instance is not None : await self . _device_instance . async_refresh_status () self . _state = self . _device_instance . is_online () # motionAlarm sensor if self . _name == \"motionAlarm\" : # get the time of the last alarm data = await self . api_client . async_api_getAlarmMessage ( self . _device_id ) if \"alarms\" not in data : raise InvalidResponse ( f \"alarms not found in { data } \" ) if len ( data [ \"alarms\" ]) > 0 : alarm = data [ \"alarms\" ][ 0 ] if \"time\" not in alarm or \"type\" not in alarm or \"msgType\" not in alarm or \"deviceId\" not in alarm : raise InvalidResponse ( f \"time, type, msgType or deviceId not found in { alarm } \" ) # convert it into ISO 8601 alarm_time = datetime . utcfromtimestamp ( alarm [ \"time\" ]) . isoformat () # if previously stored alarm time is different, an alarm occurred in the mean time if \"alarm_time\" in self . _attributes and alarm_time != self . _attributes [ \"alarm_time\" ]: self . _state = True else : self . _state = False # save attributes self . _attributes = { \"alarm_time\" : alarm_time , \"alarm_type\" : alarm [ \"msgType\" ], \"alarm_code\" : alarm [ \"type\" ], } _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _state , self . _attributes , ) if not self . _updated : self . _updated = True def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state","title":"ImouBinarySensor"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type from const BINARY_SENSORS required Source code in imouapi/device_entity.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const BINARY_SENSORS \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , BINARY_SENSORS [ sensor_type ]) # keep track of the status of the sensor self . _state = None","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # online sensor if self . _name == \"online\" : # get the device status if self . _device_instance is not None : await self . _device_instance . async_refresh_status () self . _state = self . _device_instance . is_online () # motionAlarm sensor if self . _name == \"motionAlarm\" : # get the time of the last alarm data = await self . api_client . async_api_getAlarmMessage ( self . _device_id ) if \"alarms\" not in data : raise InvalidResponse ( f \"alarms not found in { data } \" ) if len ( data [ \"alarms\" ]) > 0 : alarm = data [ \"alarms\" ][ 0 ] if \"time\" not in alarm or \"type\" not in alarm or \"msgType\" not in alarm or \"deviceId\" not in alarm : raise InvalidResponse ( f \"time, type, msgType or deviceId not found in { alarm } \" ) # convert it into ISO 8601 alarm_time = datetime . utcfromtimestamp ( alarm [ \"time\" ]) . isoformat () # if previously stored alarm time is different, an alarm occurred in the mean time if \"alarm_time\" in self . _attributes and alarm_time != self . _attributes [ \"alarm_time\" ]: self . _state = True else : self . _state = False # save attributes self . _attributes = { \"alarm_time\" : alarm_time , \"alarm_type\" : alarm [ \"msgType\" ], \"alarm_code\" : alarm [ \"type\" ], } _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _state , self . _attributes , ) if not self . _updated : self . _updated = True","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.is_on","text":"Return the status of the switch. Source code in imouapi/device_entity.py 242 243 244 def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state","title":"is_on()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouButton","text":"Bases: ImouEntity A representation of a button within an IMOU Device. Source code in imouapi/device_entity.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 class ImouButton ( ImouEntity ): \"\"\"A representation of a button within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const BUTTON \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , BUTTONS [ sensor_type ]) async def async_press ( self ) -> None : \"\"\"Press action.\"\"\" if not await self . _async_is_ready (): return if self . _name == \"restartDevice\" : # restart the device await self . api_client . async_api_restartDevice ( self . _device_id ) _LOGGER . debug ( \"[ %s ] pressed button %s \" , self . _device_name , self . _description , ) if not self . _updated : self . _updated = True async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" return","title":"ImouButton"},{"location":"modules/device_entity/#imouapi.device_entity.ImouButton.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type from const BUTTON required Source code in imouapi/device_entity.py 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const BUTTON \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , BUTTONS [ sensor_type ])","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouButton.async_press","text":"Press action. Source code in imouapi/device_entity.py 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 async def async_press ( self ) -> None : \"\"\"Press action.\"\"\" if not await self . _async_is_ready (): return if self . _name == \"restartDevice\" : # restart the device await self . api_client . async_api_restartDevice ( self . _device_id ) _LOGGER . debug ( \"[ %s ] pressed button %s \" , self . _device_name , self . _description , ) if not self . _updated : self . _updated = True","title":"async_press()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouButton.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 439 440 441 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" return","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera","text":"Bases: ImouEntity A representation of a camera within an IMOU Device. Source code in imouapi/device_entity.pyclass ImouCamera ( ImouEntity ): \"\"\"A representation of a camera within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , profile : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the CAMERAS constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , CAMERAS [ sensor_type ]) self . _state = False self . _profile = profile async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return async def async_get_image ( self ) -> Union [ bytes , None ]: \"\"\"Get image snapshot.\"\"\" if not await self . _async_is_ready (): return None _LOGGER . debug ( \"[ %s ] requested an image snapshot\" , self . _device_name , ) # request a snapshot and get the url data = await self . api_client . async_api_setDeviceSnapEnhanced ( self . _device_id ) if \"url\" not in data : raise InvalidResponse ( f \"url not found in { data } \" ) url = data [ \"url\" ] # wait for the image to be available camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD if self . _device_instance is not None : self . _device_instance . get_camera_wait_before_download () await asyncio . sleep ( camera_wait_before_download ) # retrieve the image from the url session = self . api_client . get_session () if session is None : raise NotConnected () try : response = await session . request ( \"GET\" , url , timeout = self . api_client . get_timeout ()) if response . status != 200 : raise InvalidResponse ( f \"status code { response . status } \" ) image = await response . read () except Exception as exception : raise InvalidResponse ( f \"unable to retrieve image from { url } : { exception } \" ) from exception return image async def async_open_stream ( self ) -> None : \"\"\"Open a new stream.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] opening a new live stream\" , self . _device_name , ) # Create a device live broadcast address for profile try : data = await self . api_client . async_api_bindDeviceLive ( self . _device_id , self . _profile ) if \"streams\" not in data or \"hls\" not in data [ \"streams\" ][ 0 ] or \"liveToken\" not in data : raise InvalidResponse ( f \"streams, hls or liveToken not found in { data } \" ) except APIError as exception : # The video live already exists if \"LV1001\" in exception . to_string (): pass else : raise APIError from exception async def async_get_existing_stream ( self ) -> dict : \"\"\"Get existing streams if any and return a data structure with url and token.\"\"\" existing_stream = { \"url\" : None , \"token\" : None , } data = {} # request existing live streaming information for the device try : data = await self . api_client . async_api_getLiveStreamInfo ( self . _device_id ) except APIError as exception : # The video live does not exist if \"LV1002\" in exception . to_string (): pass else : raise APIError from exception # streams already available, find the right one if \"streams\" in data : for stream in data [ \"streams\" ]: if ( \"streamId\" not in stream or \"status\" not in stream or \"hls\" not in stream or \"liveToken\" not in stream ): raise InvalidResponse ( f \"streamId, status, liveToken, hls not found in { stream } \" ) # identify the right stream for this profile if ( ( ( self . _profile == \"HD\" and stream [ \"streamId\" ] == 0 ) or ( self . _profile == \"SD\" and stream [ \"streamId\" ] == 1 ) ) and stream [ \"hls\" ] . startswith ( \"https://\" ) and stream [ \"status\" ] == \"1\" ): existing_stream [ \"url\" ] = stream [ \"hls\" ] existing_stream [ \"token\" ] = stream [ \"liveToken\" ] break if existing_stream [ \"url\" ] is None or existing_stream [ \"token\" ] is None : raise InvalidResponse ( f \"stream not found in { data } \" ) # return a data structure containing the url and the token return existing_stream async def async_close_stream ( self ) -> None : \"\"\"Close a live stream.\"\"\" # get the existing stream if any existing_stream = await self . async_get_existing_stream () if existing_stream [ \"token\" ] is not None : await self . api_client . async_api_unbindLive ( existing_stream [ \"token\" ]) _LOGGER . debug ( \"[ %s ] closing live stream\" , self . _device_name , ) async def async_get_stream_url ( self ) -> dict : \"\"\"Get a live stream URL, taking care of creating a stream if needed.\"\"\" # get the existing stream if any existing_stream = await self . async_get_existing_stream () if existing_stream [ \"url\" ] is not None : return existing_stream [ \"url\" ] else : # otherwise open the stream await self . async_open_stream () # get the right stream url and return it existing_stream = await self . async_get_existing_stream () if existing_stream [ \"url\" ] is None : raise APIError ( \"unable to get live streaming\" ) _LOGGER . debug ( \"[ %s ] live streaming url: %s \" , self . _device_name , existing_stream [ \"url\" ]) return existing_stream [ \"url\" ] async def async_service_ptz_location ( self , horizontal : float , vertical : float , zoom : float ) -> dict : \"\"\"Perform PTZ location action.\"\"\" _LOGGER . debug ( \"[ %s ] invoked PTZ location action horizontal: %f , vertical: %f , zoom: %f \" , self . _device_name , horizontal , vertical , zoom , ) return await self . api_client . async_api_controlLocationPTZ ( self . _device_id , horizontal , vertical , zoom , ) async def async_service_ptz_move ( self , operation : str , duration : int ) -> dict : \"\"\"Perform PTZ move action.\"\"\" _LOGGER . debug ( \"[ %s ] invoked PTZ move action. operation: %s , duration: %i \" , self . _device_name , operation , duration , ) return await self . api_client . async_api_controlMovePTZ ( self . _device_id , operation , duration , )","title":"ImouCamera"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type (from the CAMERAS constant) required Source code in imouapi/device_entity.py 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , profile : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the CAMERAS constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , CAMERAS [ sensor_type ]) self . _state = False self . _profile = profile","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_close_stream","text":"Close a live stream. Source code in imouapi/device_entity.py 633 634 635 636 637 638 639 640 641 642 async def async_close_stream ( self ) -> None : \"\"\"Close a live stream.\"\"\" # get the existing stream if any existing_stream = await self . async_get_existing_stream () if existing_stream [ \"token\" ] is not None : await self . api_client . async_api_unbindLive ( existing_stream [ \"token\" ]) _LOGGER . debug ( \"[ %s ] closing live stream\" , self . _device_name , )","title":"async_close_stream()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_get_existing_stream","text":"Get existing streams if any and return a data structure with url and token. Source code in imouapi/device_entity.py 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 async def async_get_existing_stream ( self ) -> dict : \"\"\"Get existing streams if any and return a data structure with url and token.\"\"\" existing_stream = { \"url\" : None , \"token\" : None , } data = {} # request existing live streaming information for the device try : data = await self . api_client . async_api_getLiveStreamInfo ( self . _device_id ) except APIError as exception : # The video live does not exist if \"LV1002\" in exception . to_string (): pass else : raise APIError from exception # streams already available, find the right one if \"streams\" in data : for stream in data [ \"streams\" ]: if ( \"streamId\" not in stream or \"status\" not in stream or \"hls\" not in stream or \"liveToken\" not in stream ): raise InvalidResponse ( f \"streamId, status, liveToken, hls not found in { stream } \" ) # identify the right stream for this profile if ( ( ( self . _profile == \"HD\" and stream [ \"streamId\" ] == 0 ) or ( self . _profile == \"SD\" and stream [ \"streamId\" ] == 1 ) ) and stream [ \"hls\" ] . startswith ( \"https://\" ) and stream [ \"status\" ] == \"1\" ): existing_stream [ \"url\" ] = stream [ \"hls\" ] existing_stream [ \"token\" ] = stream [ \"liveToken\" ] break if existing_stream [ \"url\" ] is None or existing_stream [ \"token\" ] is None : raise InvalidResponse ( f \"stream not found in { data } \" ) # return a data structure containing the url and the token return existing_stream","title":"async_get_existing_stream()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_get_image","text":"Get image snapshot. Source code in imouapi/device_entity.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 async def async_get_image ( self ) -> Union [ bytes , None ]: \"\"\"Get image snapshot.\"\"\" if not await self . _async_is_ready (): return None _LOGGER . debug ( \"[ %s ] requested an image snapshot\" , self . _device_name , ) # request a snapshot and get the url data = await self . api_client . async_api_setDeviceSnapEnhanced ( self . _device_id ) if \"url\" not in data : raise InvalidResponse ( f \"url not found in { data } \" ) url = data [ \"url\" ] # wait for the image to be available camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD if self . _device_instance is not None : self . _device_instance . get_camera_wait_before_download () await asyncio . sleep ( camera_wait_before_download ) # retrieve the image from the url session = self . api_client . get_session () if session is None : raise NotConnected () try : response = await session . request ( \"GET\" , url , timeout = self . api_client . get_timeout ()) if response . status != 200 : raise InvalidResponse ( f \"status code { response . status } \" ) image = await response . read () except Exception as exception : raise InvalidResponse ( f \"unable to retrieve image from { url } : { exception } \" ) from exception return image","title":"async_get_image()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_get_stream_url","text":"Get a live stream URL, taking care of creating a stream if needed. Source code in imouapi/device_entity.py 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 async def async_get_stream_url ( self ) -> dict : \"\"\"Get a live stream URL, taking care of creating a stream if needed.\"\"\" # get the existing stream if any existing_stream = await self . async_get_existing_stream () if existing_stream [ \"url\" ] is not None : return existing_stream [ \"url\" ] else : # otherwise open the stream await self . async_open_stream () # get the right stream url and return it existing_stream = await self . async_get_existing_stream () if existing_stream [ \"url\" ] is None : raise APIError ( \"unable to get live streaming\" ) _LOGGER . debug ( \"[ %s ] live streaming url: %s \" , self . _device_name , existing_stream [ \"url\" ]) return existing_stream [ \"url\" ]","title":"async_get_stream_url()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_open_stream","text":"Open a new stream. Source code in imouapi/device_entity.py 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 async def async_open_stream ( self ) -> None : \"\"\"Open a new stream.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] opening a new live stream\" , self . _device_name , ) # Create a device live broadcast address for profile try : data = await self . api_client . async_api_bindDeviceLive ( self . _device_id , self . _profile ) if \"streams\" not in data or \"hls\" not in data [ \"streams\" ][ 0 ] or \"liveToken\" not in data : raise InvalidResponse ( f \"streams, hls or liveToken not found in { data } \" ) except APIError as exception : # The video live already exists if \"LV1001\" in exception . to_string (): pass else : raise APIError from exception","title":"async_open_stream()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_service_ptz_location","text":"Perform PTZ location action. Source code in imouapi/device_entity.py 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 async def async_service_ptz_location ( self , horizontal : float , vertical : float , zoom : float ) -> dict : \"\"\"Perform PTZ location action.\"\"\" _LOGGER . debug ( \"[ %s ] invoked PTZ location action horizontal: %f , vertical: %f , zoom: %f \" , self . _device_name , horizontal , vertical , zoom , ) return await self . api_client . async_api_controlLocationPTZ ( self . _device_id , horizontal , vertical , zoom , )","title":"async_service_ptz_location()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_service_ptz_move","text":"Perform PTZ move action. Source code in imouapi/device_entity.py 676 677 678 679 680 681 682 683 684 685 686 687 688 async def async_service_ptz_move ( self , operation : str , duration : int ) -> dict : \"\"\"Perform PTZ move action.\"\"\" _LOGGER . debug ( \"[ %s ] invoked PTZ move action. operation: %s , duration: %i \" , self . _device_name , operation , duration , ) return await self . api_client . async_api_controlMovePTZ ( self . _device_id , operation , duration , )","title":"async_service_ptz_move()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 534 535 536 537 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity","text":"Bases: ABC A representation of a sensor within an Imou Device. Source code in imouapi/device_entity.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 class ImouEntity ( ABC ): \"\"\"A representation of a sensor within an Imou Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , sensor_description : str , ) -> None : \"\"\"Initialize common parameters.\"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _description = sensor_description self . _enabled = True self . _updated = False self . _device_instance = None self . _attributes : dict [ str , str ] = {} def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value def is_enabled ( self ) -> bool : \"\"\"If enabled.\"\"\" return self . _enabled def is_updated ( self ) -> bool : \"\"\"If has been updated at least once.\"\"\" return self . _updated def set_device ( self , device_instance ) -> None : \"\"\"Set the device instance this entity is belonging to.\"\"\" self . _device_instance = device_instance def get_attributes ( self ) -> dict : \"\"\"Entity attributes.\"\"\" return self . _attributes async def _async_is_ready ( self ) -> bool : \"\"\"Check if the sensor is fully ready.\"\"\" # check if the sensor is enabled if not self . _enabled : return False # wake up the device if a dormant device and sleeping if self . _device_instance is not None : awake = await self . _device_instance . async_wakeup () if awake : return True return False return True @abstractmethod async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\"","title":"ImouEntity"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.__init__","text":"Initialize common parameters. Source code in imouapi/device_entity.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , sensor_description : str , ) -> None : \"\"\"Initialize common parameters.\"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _description = sensor_description self . _enabled = True self . _updated = False self . _device_instance = None self . _attributes : dict [ str , str ] = {}","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 92 93 94 @abstractmethod async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\"","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_attributes","text":"Entity attributes. Source code in imouapi/device_entity.py 75 76 77 def get_attributes ( self ) -> dict : \"\"\"Entity attributes.\"\"\" return self . _attributes","title":"get_attributes()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_description","text":"Get description. Source code in imouapi/device_entity.py 55 56 57 def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description","title":"get_description()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_device_id","text":"Get device id. Source code in imouapi/device_entity.py 47 48 49 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id","title":"get_device_id()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_name","text":"Get name. Source code in imouapi/device_entity.py 51 52 53 def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name","title":"get_name()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.is_enabled","text":"If enabled. Source code in imouapi/device_entity.py 63 64 65 def is_enabled ( self ) -> bool : \"\"\"If enabled.\"\"\" return self . _enabled","title":"is_enabled()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.is_updated","text":"If has been updated at least once. Source code in imouapi/device_entity.py 67 68 69 def is_updated ( self ) -> bool : \"\"\"If has been updated at least once.\"\"\" return self . _updated","title":"is_updated()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.set_device","text":"Set the device instance this entity is belonging to. Source code in imouapi/device_entity.py 71 72 73 def set_device ( self , device_instance ) -> None : \"\"\"Set the device instance this entity is belonging to.\"\"\" self . _device_instance = device_instance","title":"set_device()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.set_enabled","text":"Set enable. Source code in imouapi/device_entity.py 59 60 61 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value","title":"set_enabled()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect","text":"Bases: ImouEntity A representation of a select within an IMOU Device. Source code in imouapi/device_entity.py 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 class ImouSelect ( ImouEntity ): \"\"\"A representation of a select within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const SELECT \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SELECT [ sensor_type ]) # keep track of the status of the sensor self . _current_option : Union [ str , None ] = None self . _available_options : list [ str ] = [] async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return if self . _name == \"nightVisionMode\" : # get the night vision mode option selected data = await self . api_client . async_api_getNightVisionMode ( self . _device_id ) if \"mode\" not in data or \"modes\" not in data : raise InvalidResponse ( f \"mode or modes not found in { data } \" ) self . _current_option = data [ \"mode\" ] self . _available_options = data [ \"modes\" ] _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _current_option , self . _attributes , ) if not self . _updated : self . _updated = True def get_current_option ( self ) -> Optional [ str ]: \"\"\"Return the current option.\"\"\" return self . _current_option def get_available_options ( self ) -> list [ str ]: \"\"\"Return the available options.\"\"\" return self . _available_options async def async_select_option ( self , option : str ) -> None : \"\"\"Change the selected option.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s setting to %s \" , self . _device_name , self . _description , option ) if self . _name == \"nightVisionMode\" : await self . api_client . async_api_setNightVisionMode ( self . _device_id , option ) self . _current_option = option","title":"ImouSelect"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type from const SELECT required Source code in imouapi/device_entity.py 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const SELECT \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SELECT [ sensor_type ]) # keep track of the status of the sensor self . _current_option : Union [ str , None ] = None self . _available_options : list [ str ] = []","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.async_select_option","text":"Change the selected option. Source code in imouapi/device_entity.py 390 391 392 393 394 395 396 397 398 async def async_select_option ( self , option : str ) -> None : \"\"\"Change the selected option.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s setting to %s \" , self . _device_name , self . _description , option ) if self . _name == \"nightVisionMode\" : await self . api_client . async_api_setNightVisionMode ( self . _device_id , option ) self . _current_option = option","title":"async_select_option()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return if self . _name == \"nightVisionMode\" : # get the night vision mode option selected data = await self . api_client . async_api_getNightVisionMode ( self . _device_id ) if \"mode\" not in data or \"modes\" not in data : raise InvalidResponse ( f \"mode or modes not found in { data } \" ) self . _current_option = data [ \"mode\" ] self . _available_options = data [ \"modes\" ] _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _current_option , self . _attributes , ) if not self . _updated : self . _updated = True","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.get_available_options","text":"Return the available options. Source code in imouapi/device_entity.py 386 387 388 def get_available_options ( self ) -> list [ str ]: \"\"\"Return the available options.\"\"\" return self . _available_options","title":"get_available_options()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.get_current_option","text":"Return the current option. Source code in imouapi/device_entity.py 382 383 384 def get_current_option ( self ) -> Optional [ str ]: \"\"\"Return the current option.\"\"\" return self . _current_option","title":"get_current_option()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor","text":"Bases: ImouEntity A representation of a sensor within an IMOU Device. Source code in imouapi/device_entity.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 class ImouSensor ( ImouEntity ): \"\"\"A representation of a sensor within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const SENSORS \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SENSORS [ sensor_type ]) # keep track of the status of the sensor self . _state = None async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # storageUsed sensor elif self . _name == \"storageUsed\" : # get SD card status data = await self . api_client . async_api_deviceSdcardStatus ( self . _device_id ) if \"status\" not in data : raise InvalidResponse ( f \"status not found in { data } \" ) if data [ \"status\" ] == \"normal\" : # get the storage status data = await self . api_client . async_api_deviceStorage ( self . _device_id ) if \"totalBytes\" not in data or \"usedBytes\" not in data : raise InvalidResponse ( f \"totalBytes or usedBytes not found in { data } \" ) percentage_used = int ( data [ \"usedBytes\" ] * 100 / data [ \"totalBytes\" ]) self . _state = percentage_used # callbackUrl sensor elif self . _name == \"callbackUrl\" : # get callback url data = await self . api_client . async_api_getMessageCallback () if \"callbackUrl\" not in data : raise InvalidResponse ( f \"callbackUrl not found in { data } \" ) self . _state = data [ \"callbackUrl\" ] # status sensor if self . _name == \"status\" : # get the device status data = await self . api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data : raise InvalidResponse ( f \"onLine not found in { data } \" ) if data [ \"onLine\" ] in ONLINE_STATUS : self . _state = ONLINE_STATUS [ data [ \"onLine\" ]] else : self . _state = ONLINE_STATUS [ \"UNKNOWN\" ] _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _state , self . _attributes , ) if not self . _updated : self . _updated = True def get_state ( self ) -> Optional [ str ]: \"\"\"Return the state.\"\"\" return self . _state","title":"ImouSensor"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type from const SENSORS required Source code in imouapi/device_entity.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type from const SENSORS \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SENSORS [ sensor_type ]) # keep track of the status of the sensor self . _state = None","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # storageUsed sensor elif self . _name == \"storageUsed\" : # get SD card status data = await self . api_client . async_api_deviceSdcardStatus ( self . _device_id ) if \"status\" not in data : raise InvalidResponse ( f \"status not found in { data } \" ) if data [ \"status\" ] == \"normal\" : # get the storage status data = await self . api_client . async_api_deviceStorage ( self . _device_id ) if \"totalBytes\" not in data or \"usedBytes\" not in data : raise InvalidResponse ( f \"totalBytes or usedBytes not found in { data } \" ) percentage_used = int ( data [ \"usedBytes\" ] * 100 / data [ \"totalBytes\" ]) self . _state = percentage_used # callbackUrl sensor elif self . _name == \"callbackUrl\" : # get callback url data = await self . api_client . async_api_getMessageCallback () if \"callbackUrl\" not in data : raise InvalidResponse ( f \"callbackUrl not found in { data } \" ) self . _state = data [ \"callbackUrl\" ] # status sensor if self . _name == \"status\" : # get the device status data = await self . api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data : raise InvalidResponse ( f \"onLine not found in { data } \" ) if data [ \"onLine\" ] in ONLINE_STATUS : self . _state = ONLINE_STATUS [ data [ \"onLine\" ]] else : self . _state = ONLINE_STATUS [ \"UNKNOWN\" ] _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , self . _state , self . _attributes , ) if not self . _updated : self . _updated = True","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.get_state","text":"Return the state. Source code in imouapi/device_entity.py 168 169 170 def get_state ( self ) -> Optional [ str ]: \"\"\"Return the state.\"\"\" return self . _state","title":"get_state()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren","text":"Bases: ImouEntity A representation of a siren within an IMOU Device. Source code in imouapi/device_entity.py 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 class ImouSiren ( ImouEntity ): \"\"\"A representation of a siren within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the SIRENS constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SIRENS [ sensor_type ]) self . _state = False async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # siren sensor if self . _name == \"siren\" : # async_api_getDeviceCameraStatus() does not return the current state of the siren, do nothing here pass def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn ON ( %s )\" , self . _device_name , self . _description , kwargs ) # siren sensor if self . _name == \"siren\" : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn OFF ( %s )\" , self . _device_name , self . _description , kwargs ) # siren sensor if self . _name == \"siren\" : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not await self . _async_is_ready (): return if self . _state : await self . async_turn_off () else : await self . async_turn_on ()","title":"ImouSiren"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type (from the SIRENS constant) required Source code in imouapi/device_entity.py 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the SIRENS constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , SIRENS [ sensor_type ]) self . _state = False","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.async_toggle","text":"Toggle the entity. Source code in imouapi/device_entity.py 500 501 502 503 504 505 506 507 async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not await self . _async_is_ready (): return if self . _state : await self . async_turn_off () else : await self . async_turn_on ()","title":"async_toggle()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.async_turn_off","text":"Turn the entity off. Source code in imouapi/device_entity.py 490 491 492 493 494 495 496 497 498 async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn OFF ( %s )\" , self . _device_name , self . _description , kwargs ) # siren sensor if self . _name == \"siren\" : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False","title":"async_turn_off()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.async_turn_on","text":"Turn the entity on. Source code in imouapi/device_entity.py 480 481 482 483 484 485 486 487 488 async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn ON ( %s )\" , self . _device_name , self . _description , kwargs ) # siren sensor if self . _name == \"siren\" : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True","title":"async_turn_on()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 466 467 468 469 470 471 472 473 474 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # siren sensor if self . _name == \"siren\" : # async_api_getDeviceCameraStatus() does not return the current state of the siren, do nothing here pass","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.is_on","text":"Return the status of the switch. Source code in imouapi/device_entity.py 476 477 478 def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state","title":"is_on()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch","text":"Bases: ImouEntity A representation of a switch within an IMOU Device. Source code in imouapi/device_entity.py 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 class ImouSwitch ( ImouEntity ): \"\"\"A representation of a switch within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the SWITCHES constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , IMOU_SWITCHES [ sensor_type ]) self . _state = None async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # pushNotifications sensor if self . _name == \"pushNotifications\" : data = await self . api_client . async_api_getMessageCallback () # all the other dynamically created sensors else : data = await self . api_client . async_api_getDeviceCameraStatus ( self . _device_id , self . _name ) _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , data [ \"status\" ] . upper (), self . _attributes , ) self . _state = data [ \"status\" ] == \"on\" if not self . _updated : self . _updated = True def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn ON ( %s )\" , self . _device_name , self . _description , kwargs ) # pushNotifications sensor if self . _name == \"pushNotifications\" : if \"url\" not in kwargs : raise APIError ( \"url not provided\" ) await self . api_client . async_api_setMessageCallbackOn ( kwargs . get ( \"url\" )) # all the other dynamically created sensors else : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn OFF ( %s )\" , self . _device_name , self . _description , kwargs ) if self . _name == \"pushNotifications\" : await self . api_client . async_api_setMessageCallbackOff () # all the other dynamically created sensors else : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not await self . _async_is_ready (): return if self . _state : await self . async_turn_off () else : await self . async_turn_on ()","title":"ImouSwitch"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the device name required sensor_type str the sensor type (from the SWITCHES constant) required Source code in imouapi/device_entity.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the device name sensor_type: the sensor type (from the SWITCHES constant) \"\"\" super () . __init__ ( api_client , device_id , device_name , sensor_type , IMOU_SWITCHES [ sensor_type ]) self . _state = None","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_toggle","text":"Toggle the entity. Source code in imouapi/device_entity.py 325 326 327 328 329 330 331 332 333 async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not await self . _async_is_ready (): return if self . _state : await self . async_turn_off () else : await self . async_turn_on ()","title":"async_toggle()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_turn_off","text":"Turn the entity off. Source code in imouapi/device_entity.py 312 313 314 315 316 317 318 319 320 321 322 323 async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn OFF ( %s )\" , self . _device_name , self . _description , kwargs ) if self . _name == \"pushNotifications\" : await self . api_client . async_api_setMessageCallbackOff () # all the other dynamically created sensors else : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False","title":"async_turn_off()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_turn_on","text":"Turn the entity on. Source code in imouapi/device_entity.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not await self . _async_is_ready (): return _LOGGER . debug ( \"[ %s ] %s requested to turn ON ( %s )\" , self . _device_name , self . _description , kwargs ) # pushNotifications sensor if self . _name == \"pushNotifications\" : if \"url\" not in kwargs : raise APIError ( \"url not provided\" ) await self . api_client . async_api_setMessageCallbackOn ( kwargs . get ( \"url\" )) # all the other dynamically created sensors else : await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True","title":"async_turn_on()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not await self . _async_is_ready (): return # pushNotifications sensor if self . _name == \"pushNotifications\" : data = await self . api_client . async_api_getMessageCallback () # all the other dynamically created sensors else : data = await self . api_client . async_api_getDeviceCameraStatus ( self . _device_id , self . _name ) _LOGGER . debug ( \"[ %s ] updating %s , value is %s %s \" , self . _device_name , self . _description , data [ \"status\" ] . upper (), self . _attributes , ) self . _state = data [ \"status\" ] == \"on\" if not self . _updated : self . _updated = True","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.is_on","text":"Return the status of the switch. Source code in imouapi/device_entity.py 292 293 294 def is_on ( self ) -> Optional [ bool ]: \"\"\"Return the status of the switch.\"\"\" return self . _state","title":"is_on()"},{"location":"modules/exceptions/","text":"Library exceptions. APIError \u00b6 Bases: ImouException Remote API error. Source code in imouapi/exceptions.py 60 61 62 63 64 65 class APIError ( ImouException ): \"\"\"Remote API error.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"api_error\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 63 64 65 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"api_error\" ConnectionFailed \u00b6 Bases: ImouException Failed to connect to the API. Source code in imouapi/exceptions.py 36 37 38 39 40 41 class ConnectionFailed ( ImouException ): \"\"\"Failed to connect to the API.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"connection_failed\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 39 40 41 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"connection_failed\" DeviceOffline \u00b6 Bases: ImouException Device is offline. Source code in imouapi/exceptions.py 76 77 78 79 80 81 class DeviceOffline ( ImouException ): \"\"\"Device is offline.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"device_offline\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 79 80 81 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"device_offline\" ImouException \u00b6 Bases: Exception Base exception. Source code in imouapi/exceptions.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class ImouException ( Exception ): \"\"\"Base exception.\"\"\" def __init__ ( self , message : str = \"\" ) -> None : \"\"\"Initialize.\"\"\" self . message = message super () . __init__ ( self . message ) def to_string ( self ) -> str : \"\"\"Return the exception as a string.\"\"\" return f \" { self . __class__ . __name__ } : { self . message } \\n \" + self . traceback () def traceback ( self ) -> str : \"\"\"Return the traceback as a string.\"\"\" etype , value , trace = sys . exc_info () return \"\" . join ( traceback . format_exception ( etype , value , trace , None )) def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"generic_error\" __init__ ( message = '' ) \u00b6 Initialize. Source code in imouapi/exceptions.py 9 10 11 12 def __init__ ( self , message : str = \"\" ) -> None : \"\"\"Initialize.\"\"\" self . message = message super () . __init__ ( self . message ) get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 23 24 25 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"generic_error\" to_string () \u00b6 Return the exception as a string. Source code in imouapi/exceptions.py 14 15 16 def to_string ( self ) -> str : \"\"\"Return the exception as a string.\"\"\" return f \" { self . __class__ . __name__ } : { self . message } \\n \" + self . traceback () traceback () \u00b6 Return the traceback as a string. Source code in imouapi/exceptions.py 18 19 20 21 def traceback ( self ) -> str : \"\"\"Return the traceback as a string.\"\"\" etype , value , trace = sys . exc_info () return \"\" . join ( traceback . format_exception ( etype , value , trace , None )) InvalidConfiguration \u00b6 Bases: ImouException Invalid App Id or App Secret provided. Source code in imouapi/exceptions.py 44 45 46 47 48 49 class InvalidConfiguration ( ImouException ): \"\"\"Invalid App Id or App Secret provided.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_configuration\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 47 48 49 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_configuration\" InvalidResponse \u00b6 Bases: ImouException Malformed or unexpected API response. Source code in imouapi/exceptions.py 68 69 70 71 72 73 class InvalidResponse ( ImouException ): \"\"\"Malformed or unexpected API response.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_reponse\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 71 72 73 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_reponse\" NotAuthorized \u00b6 Bases: ImouException Not authorized to operate on the device or invalid device id. Source code in imouapi/exceptions.py 52 53 54 55 56 57 class NotAuthorized ( ImouException ): \"\"\"Not authorized to operate on the device or invalid device id.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_authorized\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 55 56 57 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_authorized\" NotConnected \u00b6 Bases: ImouException Action requested but not yet connected to the API. Source code in imouapi/exceptions.py 28 29 30 31 32 33 class NotConnected ( ImouException ): \"\"\"Action requested but not yet connected to the API.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_connected\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 31 32 33 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_connected\"","title":"exceptions"},{"location":"modules/exceptions/#imouapi.exceptions.APIError","text":"Bases: ImouException Remote API error. Source code in imouapi/exceptions.py 60 61 62 63 64 65 class APIError ( ImouException ): \"\"\"Remote API error.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"api_error\"","title":"APIError"},{"location":"modules/exceptions/#imouapi.exceptions.APIError.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 63 64 65 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"api_error\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.ConnectionFailed","text":"Bases: ImouException Failed to connect to the API. Source code in imouapi/exceptions.py 36 37 38 39 40 41 class ConnectionFailed ( ImouException ): \"\"\"Failed to connect to the API.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"connection_failed\"","title":"ConnectionFailed"},{"location":"modules/exceptions/#imouapi.exceptions.ConnectionFailed.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 39 40 41 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"connection_failed\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.DeviceOffline","text":"Bases: ImouException Device is offline. Source code in imouapi/exceptions.py 76 77 78 79 80 81 class DeviceOffline ( ImouException ): \"\"\"Device is offline.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"device_offline\"","title":"DeviceOffline"},{"location":"modules/exceptions/#imouapi.exceptions.DeviceOffline.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 79 80 81 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"device_offline\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException","text":"Bases: Exception Base exception. Source code in imouapi/exceptions.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class ImouException ( Exception ): \"\"\"Base exception.\"\"\" def __init__ ( self , message : str = \"\" ) -> None : \"\"\"Initialize.\"\"\" self . message = message super () . __init__ ( self . message ) def to_string ( self ) -> str : \"\"\"Return the exception as a string.\"\"\" return f \" { self . __class__ . __name__ } : { self . message } \\n \" + self . traceback () def traceback ( self ) -> str : \"\"\"Return the traceback as a string.\"\"\" etype , value , trace = sys . exc_info () return \"\" . join ( traceback . format_exception ( etype , value , trace , None )) def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"generic_error\"","title":"ImouException"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.__init__","text":"Initialize. Source code in imouapi/exceptions.py 9 10 11 12 def __init__ ( self , message : str = \"\" ) -> None : \"\"\"Initialize.\"\"\" self . message = message super () . __init__ ( self . message )","title":"__init__()"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 23 24 25 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"generic_error\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.to_string","text":"Return the exception as a string. Source code in imouapi/exceptions.py 14 15 16 def to_string ( self ) -> str : \"\"\"Return the exception as a string.\"\"\" return f \" { self . __class__ . __name__ } : { self . message } \\n \" + self . traceback ()","title":"to_string()"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.traceback","text":"Return the traceback as a string. Source code in imouapi/exceptions.py 18 19 20 21 def traceback ( self ) -> str : \"\"\"Return the traceback as a string.\"\"\" etype , value , trace = sys . exc_info () return \"\" . join ( traceback . format_exception ( etype , value , trace , None ))","title":"traceback()"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidConfiguration","text":"Bases: ImouException Invalid App Id or App Secret provided. Source code in imouapi/exceptions.py 44 45 46 47 48 49 class InvalidConfiguration ( ImouException ): \"\"\"Invalid App Id or App Secret provided.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_configuration\"","title":"InvalidConfiguration"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidConfiguration.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 47 48 49 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_configuration\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidResponse","text":"Bases: ImouException Malformed or unexpected API response. Source code in imouapi/exceptions.py 68 69 70 71 72 73 class InvalidResponse ( ImouException ): \"\"\"Malformed or unexpected API response.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_reponse\"","title":"InvalidResponse"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidResponse.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 71 72 73 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_reponse\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.NotAuthorized","text":"Bases: ImouException Not authorized to operate on the device or invalid device id. Source code in imouapi/exceptions.py 52 53 54 55 56 57 class NotAuthorized ( ImouException ): \"\"\"Not authorized to operate on the device or invalid device id.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_authorized\"","title":"NotAuthorized"},{"location":"modules/exceptions/#imouapi.exceptions.NotAuthorized.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 55 56 57 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_authorized\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.NotConnected","text":"Bases: ImouException Action requested but not yet connected to the API. Source code in imouapi/exceptions.py 28 29 30 31 32 33 class NotConnected ( ImouException ): \"\"\"Action requested but not yet connected to the API.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_connected\"","title":"NotConnected"},{"location":"modules/exceptions/#imouapi.exceptions.NotConnected.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 31 32 33 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_connected\"","title":"get_title()"}]}