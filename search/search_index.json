{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"imouapi \u00b6 This python library helps in interacting with Imou Life Open API (https://open.imoulife.com) for remote controlling programmatically your Imou devices (https://www.imoulife.com), especially those settings such as motion detection, human detection, privacy, etc that can be changed by the Imou Life App only. Features \u00b6 Provide classes for both low level API interaction as well as device and sensors abastractions Exceptions and error handling Based on asyncio module Requirements \u00b6 A valid Imou Open API App Id and App Secret are required to use the library. In order to get them: - Register an account on Imou Life if not done already - Register a developer account on https://open.imoulife.com - Open the Imou Console at https://open.imoulife.com/consoleNew/myApp/appInfo - Go to \"My App\", \"App Information\" and click on Edit - Fill in the required information and copy your AppId and AppSecret How to install \u00b6 [TODO] How to use \u00b6 Option 1: high-level API (Recommended) \u00b6 An abstraction over the API has been built to provide representations of devices and sensors: - ImouDevice in imouapi.device to represent an Imou devices and all its sensors - ImouDiscoverService in imouapi.device_discover can be used to discover devices registered with the account A device has a set of properties and associated sensors. Each sensor type (sensor, binary_sensor and switch) is represented by a class and has properties and methods. Upon loading, the API is capable of enumerating available capabilities of the device and instantiate only the switches that the device suports. The API of course allows to eventually control those switches. - Supported switches: \"motionDetect\", \"headerDetect\", \"abAlarmSound\", \"breathingLight\", if supported by the remote device - Supported sensor: \"lastAlarm\" - Supported binary_sensor: \"online\" Examples on how to interact with ImouDevice and ImouDiscoverService are provided in the CLI implementation. Option 2: low-level API \u00b6 By using from imouapi.api import ImouAPIClient and calling the provided methods for connecting and calling API endpoints. The following Imou API are supported: - deviceBaseList - deviceBaseDetailList - deviceOnline - getDeviceCameraStatus - setDeviceCameraStatus - getAlarmMessage Examples on how to interact with ImouAPIClient is provided in the high-level API implementation. Option 1: CLI \u00b6 A command line interface is provided for testing and troubleshooting purposes. Usage: python -m imouapi.cli [OPTIONS] COMMAND <ARGUMENTS> Options (mandatory): --app-id <app_id> Imou Cloud App ID --app-secret <app_secret> Imou Cloud App Secret Commmands: discover Discover registered devices get_device <device_id> Get the details of the device id provided get_sensor <device_id> <sensor_name> Get the state of a sensor get_binary_sensor <device_id> <sensor_name> Get the state of a binary sensor get_switch <device_id> <sensor_name> Get the state of a switch set_switch <device_id> <sensor_name> [on|off|toggle] Set the state of a switch","title":"Home"},{"location":"#imouapi","text":"This python library helps in interacting with Imou Life Open API (https://open.imoulife.com) for remote controlling programmatically your Imou devices (https://www.imoulife.com), especially those settings such as motion detection, human detection, privacy, etc that can be changed by the Imou Life App only.","title":"imouapi"},{"location":"#features","text":"Provide classes for both low level API interaction as well as device and sensors abastractions Exceptions and error handling Based on asyncio module","title":"Features"},{"location":"#requirements","text":"A valid Imou Open API App Id and App Secret are required to use the library. In order to get them: - Register an account on Imou Life if not done already - Register a developer account on https://open.imoulife.com - Open the Imou Console at https://open.imoulife.com/consoleNew/myApp/appInfo - Go to \"My App\", \"App Information\" and click on Edit - Fill in the required information and copy your AppId and AppSecret","title":"Requirements"},{"location":"#how-to-install","text":"[TODO]","title":"How to install"},{"location":"#how-to-use","text":"","title":"How to use"},{"location":"#option-1-high-level-api-recommended","text":"An abstraction over the API has been built to provide representations of devices and sensors: - ImouDevice in imouapi.device to represent an Imou devices and all its sensors - ImouDiscoverService in imouapi.device_discover can be used to discover devices registered with the account A device has a set of properties and associated sensors. Each sensor type (sensor, binary_sensor and switch) is represented by a class and has properties and methods. Upon loading, the API is capable of enumerating available capabilities of the device and instantiate only the switches that the device suports. The API of course allows to eventually control those switches. - Supported switches: \"motionDetect\", \"headerDetect\", \"abAlarmSound\", \"breathingLight\", if supported by the remote device - Supported sensor: \"lastAlarm\" - Supported binary_sensor: \"online\" Examples on how to interact with ImouDevice and ImouDiscoverService are provided in the CLI implementation.","title":"Option 1: high-level API (Recommended)"},{"location":"#option-2-low-level-api","text":"By using from imouapi.api import ImouAPIClient and calling the provided methods for connecting and calling API endpoints. The following Imou API are supported: - deviceBaseList - deviceBaseDetailList - deviceOnline - getDeviceCameraStatus - setDeviceCameraStatus - getAlarmMessage Examples on how to interact with ImouAPIClient is provided in the high-level API implementation.","title":"Option 2: low-level API"},{"location":"#option-1-cli","text":"A command line interface is provided for testing and troubleshooting purposes. Usage: python -m imouapi.cli [OPTIONS] COMMAND <ARGUMENTS> Options (mandatory): --app-id <app_id> Imou Cloud App ID --app-secret <app_secret> Imou Cloud App Secret Commmands: discover Discover registered devices get_device <device_id> Get the details of the device id provided get_sensor <device_id> <sensor_name> Get the state of a sensor get_binary_sensor <device_id> <sensor_name> Get the state of a binary sensor get_switch <device_id> <sensor_name> Get the state of a switch set_switch <device_id> <sensor_name> [on|off|toggle] Set the state of a switch","title":"Option 1: CLI"},{"location":"api/","text":"Interact with IMOU API. Source code in imouapi/api.pyclass ImouAPIClient : \"\"\"Interact with IMOU API.\"\"\" def __init__ ( self , base_url : str , app_id : str , app_secret : str , websession : ClientSession = None , ) -> None : \"\"\" Initialize the instance. Parameters: base_url: base url for API calls (e.g. https://openapi.easy4ip.com/openapi) app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session \"\"\" if websession is None : websession = ClientSession () self . log_http_requests = True self . _websession = websession self . _base_url = base_url self . _app_secret = app_secret self . _app_id = app_id self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url ) async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token: %s \" , self . _access_token ) self . _connected = True _LOGGER . debug ( \"Connected succesfully\" ) return True async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect () async def _async_call_api ( self , api : str , payload : dict , is_connect_request : bool = False ) -> dict : \"\"\"Submit request to the HTTP API endpoint.\"\"\" # if this is not a connect request, check if we are already connected if not is_connect_request : if not self . is_connected (): raise NotConnected () # calculate timestamp, nonce, sign and id as per https://open.imoulife.com/book/http/develop.html timestamp = round ( time . time ()) nonce = secrets . token_urlsafe () sign = hashlib . md5 ( f \"time: { timestamp } ,nonce: { nonce } ,appSecret: { self . _app_secret } \" . encode ( \"utf-8\" )) . hexdigest () request_id = str ( random . randint ( 1 , 10000 )) # add the access token to the payload if already available if self . _access_token is not None : payload [ \"token\" ] = self . _access_token # prepare the API request url = f \" { self . _base_url } / { api } \" body = { \"system\" : { \"ver\" : \"1.0\" , \"sign\" : sign , \"appId\" : self . _app_id , \"time\" : timestamp , \"nonce\" : nonce , }, \"params\" : payload , \"id\" : request_id , } if self . log_http_requests : _LOGGER . debug ( \"[HTTP_REQUEST] %s : %s \" , url , body ) # send the request to the API endpoint try : response = await self . _websession . request ( \"POST\" , url , json = body ) except Exception as exception : raise ConnectionFailed ( f \" { exception } \" ) from exception # parse the response and look for errors response_status = response . status if self . log_http_requests : _LOGGER . debug ( \"[HTTP_RESPONSE] %s : %s \" , response_status , await response . text ()) if response_status != 200 : raise APIError ( f \"status code { response . status } \" ) try : response_body = await response . json ( content_type = \"text/plain\" ) except Exception as exception : raise InvalidResponse ( f \"unable to parse response text { await response . text () } \" ) from exception if ( \"result\" not in response_body or \"code\" not in response_body [ \"result\" ] or \"msg\" not in response_body [ \"result\" ] ): raise InvalidResponse ( f \"cannot find result, code or msg in { response_body } \" ) result_code = response_body [ \"result\" ][ \"code\" ] result_message = response_body [ \"result\" ][ \"msg\" ] if result_code != \"0\" : error_message = result_code + \": \" + result_message if result_code in ( \"OP1008\" , \"SN1001\" ): raise InvalidConfiguration ( f \"Invalid appId or appSecret ( { error_message } )\" ) if result_code == \"OP1009\" : raise NotAuthorized ( f \" { error_message } \" ) raise APIError ( error_message ) # return the payload of the reponse response_data = response_body [ \"result\" ][ \"data\" ] if \"data\" in response_body [ \"result\" ] else {} return response_data async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # preparare the payload payload = { \"bindId\" : - 1 , \"limit\" : 20 , \"type\" : \"bindAndShare\" , \"needApInfo\" : False , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # preparare the payload device_list = [] for device in devices : device_list . append ({ \"deviceId\" : device , \"channelList\" : \"0\" }) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # preparare the payload payload = { \"deviceId\" : device_id } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # preparare the payload end_time = datetime . now () begin_time = end_time - timedelta ( days = 30 ) payload = { \"deviceId\" : device_id , \"count\" : \"1\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload ) __init__ ( base_url , app_id , app_secret , websession = None ) \u00b6 Initialize the instance. Parameters: Name Type Description Default base_url str base url for API calls (e.g. https://openapi.easy4ip.com/openapi) required app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required websession ClientSession aiohttp client session None Source code in imouapi/api.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def __init__ ( self , base_url : str , app_id : str , app_secret : str , websession : ClientSession = None , ) -> None : \"\"\" Initialize the instance. Parameters: base_url: base url for API calls (e.g. https://openapi.easy4ip.com/openapi) app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session \"\"\" if websession is None : websession = ClientSession () self . log_http_requests = True self . _websession = websession self . _base_url = base_url self . _app_secret = app_secret self . _app_id = app_id self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url ) async_api_deviceBaseDetailList ( devices ) async \u00b6 Return the details of the requested devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html). Source code in imouapi/api.py 173 174 175 176 177 178 179 180 181 182 183 184 async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # preparare the payload device_list = [] for device in devices : device_list . append ({ \"deviceId\" : device , \"channelList\" : \"0\" }) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceBaseList () async \u00b6 Return the list of registered devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html). Source code in imouapi/api.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # preparare the payload payload = { \"bindId\" : - 1 , \"limit\" : 20 , \"type\" : \"bindAndShare\" , \"needApInfo\" : False , } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceOnline ( device_id ) async \u00b6 Device online or offline (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html). Source code in imouapi/api.py 186 187 188 189 190 191 192 193 194 async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # preparare the payload payload = { \"deviceId\" : device_id } # call the api return await self . _async_call_api ( api , payload ) async_api_getAlarmMessage ( device_id ) async \u00b6 Get the device message list of the device channel in the specified time period (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html). Source code in imouapi/api.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # preparare the payload end_time = datetime . now () begin_time = end_time - timedelta ( days = 30 ) payload = { \"deviceId\" : device_id , \"count\" : \"1\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload ) async_api_getDeviceCameraStatus ( device_id , enable_type ) async \u00b6 Get the status of the device switch (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html). Source code in imouapi/api.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload ) async_api_setDeviceCameraStatus ( device_id , enable_type , value ) async \u00b6 Set a device switch (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html). Source code in imouapi/api.py 211 212 213 214 215 216 217 218 219 220 221 async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value } # call the api return await self . _async_call_api ( api , payload ) async_connect () async \u00b6 Authenticate against the API and retrieve an access token. Source code in imouapi/api.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token: %s \" , self . _access_token ) self . _connected = True _LOGGER . debug ( \"Connected succesfully\" ) return True async_disconnect () async \u00b6 Disconnect from the API. Source code in imouapi/api.py 72 73 74 75 76 77 78 async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True async_reconnect () async \u00b6 Reconnect to the API. Source code in imouapi/api.py 84 85 86 87 async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect () is_connected () \u00b6 Return true if already connected. Source code in imouapi/api.py 80 81 82 def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected","title":"Modules"},{"location":"api/#imouapi.api.ImouAPIClient.__init__","text":"Initialize the instance. Parameters: Name Type Description Default base_url str base url for API calls (e.g. https://openapi.easy4ip.com/openapi) required app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required websession ClientSession aiohttp client session None Source code in imouapi/api.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def __init__ ( self , base_url : str , app_id : str , app_secret : str , websession : ClientSession = None , ) -> None : \"\"\" Initialize the instance. Parameters: base_url: base url for API calls (e.g. https://openapi.easy4ip.com/openapi) app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session \"\"\" if websession is None : websession = ClientSession () self . log_http_requests = True self . _websession = websession self . _base_url = base_url self . _app_secret = app_secret self . _app_id = app_id self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url )","title":"__init__()"},{"location":"api/#imouapi.api.ImouAPIClient.async_api_deviceBaseDetailList","text":"Return the details of the requested devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html). Source code in imouapi/api.py 173 174 175 176 177 178 179 180 181 182 183 184 async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # preparare the payload device_list = [] for device in devices : device_list . append ({ \"deviceId\" : device , \"channelList\" : \"0\" }) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceBaseDetailList()"},{"location":"api/#imouapi.api.ImouAPIClient.async_api_deviceBaseList","text":"Return the list of registered devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html). Source code in imouapi/api.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # preparare the payload payload = { \"bindId\" : - 1 , \"limit\" : 20 , \"type\" : \"bindAndShare\" , \"needApInfo\" : False , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceBaseList()"},{"location":"api/#imouapi.api.ImouAPIClient.async_api_deviceOnline","text":"Device online or offline (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html). Source code in imouapi/api.py 186 187 188 189 190 191 192 193 194 async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # preparare the payload payload = { \"deviceId\" : device_id } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceOnline()"},{"location":"api/#imouapi.api.ImouAPIClient.async_api_getAlarmMessage","text":"Get the device message list of the device channel in the specified time period (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html). Source code in imouapi/api.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # preparare the payload end_time = datetime . now () begin_time = end_time - timedelta ( days = 30 ) payload = { \"deviceId\" : device_id , \"count\" : \"1\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_getAlarmMessage()"},{"location":"api/#imouapi.api.ImouAPIClient.async_api_getDeviceCameraStatus","text":"Get the status of the device switch (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html). Source code in imouapi/api.py 196 197 198 199 200 201 202 203 204 205 206 207 208 209 async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_getDeviceCameraStatus()"},{"location":"api/#imouapi.api.ImouAPIClient.async_api_setDeviceCameraStatus","text":"Set a device switch (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html). Source code in imouapi/api.py 211 212 213 214 215 216 217 218 219 220 221 async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_setDeviceCameraStatus()"},{"location":"api/#imouapi.api.ImouAPIClient.async_connect","text":"Authenticate against the API and retrieve an access token. Source code in imouapi/api.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token: %s \" , self . _access_token ) self . _connected = True _LOGGER . debug ( \"Connected succesfully\" ) return True","title":"async_connect()"},{"location":"api/#imouapi.api.ImouAPIClient.async_disconnect","text":"Disconnect from the API. Source code in imouapi/api.py 72 73 74 75 76 77 78 async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True","title":"async_disconnect()"},{"location":"api/#imouapi.api.ImouAPIClient.async_reconnect","text":"Reconnect to the API. Source code in imouapi/api.py 84 85 86 87 async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect ()","title":"async_reconnect()"},{"location":"api/#imouapi.api.ImouAPIClient.is_connected","text":"Return true if already connected. Source code in imouapi/api.py 80 81 82 def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected","title":"is_connected()"},{"location":"changelog/","text":"Changelog \u00b6 [0.1.1] (2022-09-27) \u00b6 Added \u00b6 First development release [0.1.0] (2022-09-26) \u00b6 Added \u00b6 First commit","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#011-2022-09-27","text":"","title":"[0.1.1] (2022-09-27)"},{"location":"changelog/#added","text":"First development release","title":"Added"},{"location":"changelog/#010-2022-09-26","text":"","title":"[0.1.0] (2022-09-26)"},{"location":"changelog/#added_1","text":"First commit","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/user2684/imouapi/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 imouapi could always use more documentation, whether as part of the official imouapi docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/user2684/imouapi/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up imouapi for local development. Fork the imouapi repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/imouapi.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/user2684/imouapi/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_imouapi.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/user2684/imouapi/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"imouapi could always use more documentation, whether as part of the official imouapi docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/user2684/imouapi/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up imouapi for local development. Fork the imouapi repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/imouapi.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/user2684/imouapi/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_imouapi.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install imouapi, run this command in your terminal: $ pip install imouapi This is the preferred method to install imouapi, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for imouapi can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/user2684/imouapi Or download the tarball : $ curl -OJL https://github.com/user2684/imouapi/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install imouapi, run this command in your terminal: $ pip install imouapi This is the preferred method to install imouapi, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for imouapi can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/user2684/imouapi Or download the tarball : $ curl -OJL https://github.com/user2684/imouapi/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use imouapi in a project import imouapi","title":"Usage"},{"location":"usage/#usage","text":"To use imouapi in a project import imouapi","title":"Usage"}]}