{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"imouapi \u00b6 This python library helps in interacting with Imou Life Open API for remote controlling programmatically your Imou devices , especially those settings such as motion detection, human detection, privacy, etc that can be changed by the Imou Life App only. Features \u00b6 Provide classes for both low level API interaction as well as device and sensors abastractions Exceptions and error handling Based on asyncio module Quickstart \u00b6 Install the library with pip install imouapi Register a developer account on Imou Life Open API and get your appId and appSecret Discover registered devices ( from imouapi.device import ImouDiscoverService ) Either use the high level API ( from imouapi.device import ImouDevice ) or the low level API ( from imouapi.api import ImouAPIClient ) to interact with the device Full details on the installation process, requirements, usage and classes and methods made available by the library are available at https://user2684.github.io/imouapi","title":"Home"},{"location":"#imouapi","text":"This python library helps in interacting with Imou Life Open API for remote controlling programmatically your Imou devices , especially those settings such as motion detection, human detection, privacy, etc that can be changed by the Imou Life App only.","title":"imouapi"},{"location":"#features","text":"Provide classes for both low level API interaction as well as device and sensors abastractions Exceptions and error handling Based on asyncio module","title":"Features"},{"location":"#quickstart","text":"Install the library with pip install imouapi Register a developer account on Imou Life Open API and get your appId and appSecret Discover registered devices ( from imouapi.device import ImouDiscoverService ) Either use the high level API ( from imouapi.device import ImouDevice ) or the low level API ( from imouapi.api import ImouAPIClient ) to interact with the device Full details on the installation process, requirements, usage and classes and methods made available by the library are available at https://user2684.github.io/imouapi","title":"Quickstart"},{"location":"changelog/","text":"Changelog \u00b6 [0.1.5] (2022-09-28) \u00b6 Added \u00b6 ImouAPIClient.log_http_requests() for enabling http request/response logging (off by default) If http logging is enabled, log messages are redacted from sensitive information ImouAPIClient.redact_log_message() for enabling log redaction (on by default) Changed \u00b6 Moved info logs into debug level By default, with debug level, no more logging HTTP requests and responses [0.1.4] (2022-09-28) \u00b6 Added \u00b6 Github workflow to publish on PyPI Changed \u00b6 Updated documentation [0.1.3] (2022-09-27) \u00b6 Changed \u00b6 API base URL and API timeout are not optional parameters and can be provided by the user Updated CLI, added logging level Updated documentation [0.1.2] (2022-09-27) \u00b6 Changed \u00b6 Re-organized the file structure Updated documentation [0.1.1] (2022-09-27) \u00b6 Added \u00b6 First development release [0.1.0] (2022-09-26) \u00b6 Added \u00b6 First commit","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#015-2022-09-28","text":"","title":"[0.1.5] (2022-09-28)"},{"location":"changelog/#added","text":"ImouAPIClient.log_http_requests() for enabling http request/response logging (off by default) If http logging is enabled, log messages are redacted from sensitive information ImouAPIClient.redact_log_message() for enabling log redaction (on by default)","title":"Added"},{"location":"changelog/#changed","text":"Moved info logs into debug level By default, with debug level, no more logging HTTP requests and responses","title":"Changed"},{"location":"changelog/#014-2022-09-28","text":"","title":"[0.1.4] (2022-09-28)"},{"location":"changelog/#added_1","text":"Github workflow to publish on PyPI","title":"Added"},{"location":"changelog/#changed_1","text":"Updated documentation","title":"Changed"},{"location":"changelog/#013-2022-09-27","text":"","title":"[0.1.3] (2022-09-27)"},{"location":"changelog/#changed_2","text":"API base URL and API timeout are not optional parameters and can be provided by the user Updated CLI, added logging level Updated documentation","title":"Changed"},{"location":"changelog/#012-2022-09-27","text":"","title":"[0.1.2] (2022-09-27)"},{"location":"changelog/#changed_3","text":"Re-organized the file structure Updated documentation","title":"Changed"},{"location":"changelog/#011-2022-09-27","text":"","title":"[0.1.1] (2022-09-27)"},{"location":"changelog/#added_2","text":"First development release","title":"Added"},{"location":"changelog/#010-2022-09-26","text":"","title":"[0.1.0] (2022-09-26)"},{"location":"changelog/#added_3","text":"First commit","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/user2684/imouapi/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 imouapi could always use more documentation, whether as part of the official imouapi docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/user2684/imouapi/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up imouapi for local development. Fork the imouapi repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/imouapi.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/user2684/imouapi/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_imouapi.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/user2684/imouapi/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"imouapi could always use more documentation, whether as part of the official imouapi docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/user2684/imouapi/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up imouapi for local development. Fork the imouapi repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/imouapi.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/user2684/imouapi/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_imouapi.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Stable release \u00b6 To install imouapi, run this command in your terminal: $ pip install imouapi This is the preferred method to install imouapi, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for imouapi can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/user2684/imouapi Or download the tarball : $ curl -OJL https://github.com/user2684/imouapi/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#stable-release","text":"To install imouapi, run this command in your terminal: $ pip install imouapi This is the preferred method to install imouapi, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for imouapi can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/user2684/imouapi Or download the tarball : $ curl -OJL https://github.com/user2684/imouapi/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"requirements/","text":"A valid Imou Open API App Id and App Secret are required to use the library. In order to get them: Register an account on Imou Life if not done already Register a developer account on https://open.imoulife.com Open the Imou Console at https://open.imoulife.com/consoleNew/myApp/appInfo Go to \"My App\", \"App Information\" and click on Edit Fill in the required information and copy your AppId and AppSecret","title":"Requirements"},{"location":"usage/","text":"You can use the library in three different ways: Option 1: high-level API (Recommended) \u00b6 An abstraction over the API has been built to provide representations of devices and sensors: imouapi.device provides ImouDevice to represent an Imou devices and all its sensors and ImouDiscoverService which can be used to discover devices registered with the account imouapi.device_entity provides ImouSensor , ImouBinarySensor and ImouSwitch , representing the sensors attached to the device. Upon loading, the library is capable of enumerating available capabilities of the device and instantiate only the switches that the device suports. The API of course allows to eventually control those switches. Supported switches: \"motionDetect\", \"headerDetect\", \"abAlarmSound\", \"breathingLight\", if supported by the remote device Supported sensor: \"lastAlarm\" Supported binary_sensor: \"online\" Examples on how to interact with ImouDevice and ImouDiscoverService are provided in the CLI implementation. Option 2: low-level API \u00b6 By using from imouapi.api import ImouAPIClient and calling the provided methods for connecting and calling API endpoints. The following Imou API are supported: deviceBaseList deviceBaseDetailList deviceOnline getDeviceCameraStatus setDeviceCameraStatus getAlarmMessage Examples on how to interact with ImouAPIClient is provided in the high-level API implementation. Option 3: CLI \u00b6 A command line interface is provided for testing and troubleshooting purposes. Usage: python -m imouapi.cli [OPTIONS] COMMAND <ARGUMENTS> Options: --app-id <app_id> Imou Cloud App ID (mandatory) --app-secret <app_secret> Imou Cloud App Secret (mandatory) --logging <info|debug> The logging level --base-url <base_url> Set a custom base url for the API --timeout <timeout> Set a custom timeout for API calls Commmands: discover Discover registered devices get_device <device_id> Get the details of the device id provided get_sensor <device_id> <sensor_name> Get the state of a sensor get_binary_sensor <device_id> <sensor_name> Get the state of a binary sensor get_switch <device_id> <sensor_name> Get the state of a switch set_switch <device_id> <sensor_name> [on|off|toggle] Set the state of a switch Exception Handling \u00b6 The library provides a simplified way for handling exceptions: from imouapi.exceptions import ImouException try: discover_service = ImouDiscoverService(app_id, app_secret, session) await discover_service.async_connect() except ImouException as exception: print(exception.to_string()) The ImouException class provides a to_string() method which returns the name of the exception which was raised and the full stacktrace.","title":"Usage"},{"location":"usage/#option-1-high-level-api-recommended","text":"An abstraction over the API has been built to provide representations of devices and sensors: imouapi.device provides ImouDevice to represent an Imou devices and all its sensors and ImouDiscoverService which can be used to discover devices registered with the account imouapi.device_entity provides ImouSensor , ImouBinarySensor and ImouSwitch , representing the sensors attached to the device. Upon loading, the library is capable of enumerating available capabilities of the device and instantiate only the switches that the device suports. The API of course allows to eventually control those switches. Supported switches: \"motionDetect\", \"headerDetect\", \"abAlarmSound\", \"breathingLight\", if supported by the remote device Supported sensor: \"lastAlarm\" Supported binary_sensor: \"online\" Examples on how to interact with ImouDevice and ImouDiscoverService are provided in the CLI implementation.","title":"Option 1: high-level API (Recommended)"},{"location":"usage/#option-2-low-level-api","text":"By using from imouapi.api import ImouAPIClient and calling the provided methods for connecting and calling API endpoints. The following Imou API are supported: deviceBaseList deviceBaseDetailList deviceOnline getDeviceCameraStatus setDeviceCameraStatus getAlarmMessage Examples on how to interact with ImouAPIClient is provided in the high-level API implementation.","title":"Option 2: low-level API"},{"location":"usage/#option-3-cli","text":"A command line interface is provided for testing and troubleshooting purposes. Usage: python -m imouapi.cli [OPTIONS] COMMAND <ARGUMENTS> Options: --app-id <app_id> Imou Cloud App ID (mandatory) --app-secret <app_secret> Imou Cloud App Secret (mandatory) --logging <info|debug> The logging level --base-url <base_url> Set a custom base url for the API --timeout <timeout> Set a custom timeout for API calls Commmands: discover Discover registered devices get_device <device_id> Get the details of the device id provided get_sensor <device_id> <sensor_name> Get the state of a sensor get_binary_sensor <device_id> <sensor_name> Get the state of a binary sensor get_switch <device_id> <sensor_name> Get the state of a switch set_switch <device_id> <sensor_name> [on|off|toggle] Set the state of a switch","title":"Option 3: CLI"},{"location":"usage/#exception-handling","text":"The library provides a simplified way for handling exceptions: from imouapi.exceptions import ImouException try: discover_service = ImouDiscoverService(app_id, app_secret, session) await discover_service.async_connect() except ImouException as exception: print(exception.to_string()) The ImouException class provides a to_string() method which returns the name of the exception which was raised and the full stacktrace.","title":"Exception Handling"},{"location":"modules/api/","text":"Low-level API for interacting with Imou devices. ImouAPIClient \u00b6 Interact with IMOU API. Source code in imouapi/api.pyclass ImouAPIClient : \"\"\"Interact with IMOU API.\"\"\" def __init__ ( self , app_id : str , app_secret : str , websession : ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: base_url: base url for API calls (e.g. https://openapi.easy4ip.com/openapi) app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session \"\"\" self . _base_url = base_url if base_url is not None else API_URL self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _access_token = None self . _access_token_expire_time = None self . _log_http_requests_enabled = False self . _redact_log_message_enabled = True self . _connected = False self . _timeout = timeout if timeout is not None else DEFAULT_TIMEOUT _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url ) def _redact_log_message ( self , data : str ) -> str : \"\"\"Redact log messages to remove sensitive information.\"\"\" if not self . _redact_log_message_enabled : return data for keyword in ( \"appId\" , \"sign\" , \"token\" , \"accessToken\" , \"playToken\" , \"thumbUrl\" , \"picUrl\" ): for tick in ( ' \\\" ' , \"'\" ): data = re . sub ( f \" { tick }{ keyword }{ tick } : \\\\ s* { tick } [^ { tick } ]+ { tick } \" , f \" { tick }{ keyword }{ tick } : { tick } XXXXXXXXX { tick } \" , data , ) return data def log_http_requests ( self , value : bool ) -> None : \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\" self . _log_http_requests_enabled = value def redact_log_message ( self , value : bool ) -> None : \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\" self . _redact_log_message_enabled = value async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token\" ) self . _connected = True _LOGGER . debug ( \"Connected succesfully\" ) return True async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect () async def _async_call_api ( self , api : str , payload : dict , is_connect_request : bool = False ) -> dict : \"\"\"Submit request to the HTTP API endpoint.\"\"\" # if this is not a connect request, check if we are already connected if not is_connect_request : if not self . is_connected (): raise NotConnected () # calculate timestamp, nonce, sign and id as per https://open.imoulife.com/book/http/develop.html timestamp = round ( time . time ()) nonce = secrets . token_urlsafe () sign = hashlib . md5 ( f \"time: { timestamp } ,nonce: { nonce } ,appSecret: { self . _app_secret } \" . encode ( \"utf-8\" )) . hexdigest () request_id = str ( random . randint ( 1 , 10000 )) # add the access token to the payload if already available if self . _access_token is not None : payload [ \"token\" ] = self . _access_token # prepare the API request url = f \" { self . _base_url } / { api } \" body = { \"system\" : { \"ver\" : \"1.0\" , \"sign\" : sign , \"appId\" : self . _app_id , \"time\" : timestamp , \"nonce\" : nonce , }, \"params\" : payload , \"id\" : request_id , } if self . _log_http_requests_enabled : _LOGGER . debug ( \"[HTTP_REQUEST] %s : %s \" , url , self . _redact_log_message ( str ( body ))) # send the request to the API endpoint try : response = await self . _websession . request ( \"POST\" , url , json = body , timeout = self . _timeout ) except Exception as exception : raise ConnectionFailed ( f \" { exception } \" ) from exception # parse the response and look for errors response_status = response . status if self . _log_http_requests_enabled : _LOGGER . debug ( \"[HTTP_RESPONSE] %s : %s \" , response_status , self . _redact_log_message ( str ( await response . text ())) ) if response_status != 200 : raise APIError ( f \"status code { response . status } \" ) try : response_body = await response . json ( content_type = \"text/plain\" ) except Exception as exception : raise InvalidResponse ( f \"unable to parse response text { await response . text () } \" ) from exception if ( \"result\" not in response_body or \"code\" not in response_body [ \"result\" ] or \"msg\" not in response_body [ \"result\" ] ): raise InvalidResponse ( f \"cannot find result, code or msg in { response_body } \" ) result_code = response_body [ \"result\" ][ \"code\" ] result_message = response_body [ \"result\" ][ \"msg\" ] if result_code != \"0\" : error_message = result_code + \": \" + result_message if result_code in ( \"OP1008\" , \"SN1001\" ): raise InvalidConfiguration ( f \"Invalid appId or appSecret ( { error_message } )\" ) if result_code == \"OP1009\" : raise NotAuthorized ( f \" { error_message } \" ) raise APIError ( error_message ) # return the payload of the reponse response_data = response_body [ \"result\" ][ \"data\" ] if \"data\" in response_body [ \"result\" ] else {} return response_data async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # preparare the payload payload = { \"bindId\" : - 1 , \"limit\" : 20 , \"type\" : \"bindAndShare\" , \"needApInfo\" : False , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # preparare the payload device_list = [] for device in devices : device_list . append ({ \"deviceId\" : device , \"channelList\" : \"0\" }) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # preparare the payload payload = { \"deviceId\" : device_id } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # preparare the payload end_time = datetime . now () begin_time = end_time - timedelta ( days = 30 ) payload = { \"deviceId\" : device_id , \"count\" : \"1\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload ) __init__ ( app_id , app_secret , websession , base_url = None , timeout = None ) \u00b6 Initialize the instance. Parameters: Name Type Description Default base_url str base url for API calls (e.g. https://openapi.easy4ip.com/openapi) None app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required websession ClientSession aiohttp client session required Source code in imouapi/api.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def __init__ ( self , app_id : str , app_secret : str , websession : ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: base_url: base url for API calls (e.g. https://openapi.easy4ip.com/openapi) app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session \"\"\" self . _base_url = base_url if base_url is not None else API_URL self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _access_token = None self . _access_token_expire_time = None self . _log_http_requests_enabled = False self . _redact_log_message_enabled = True self . _connected = False self . _timeout = timeout if timeout is not None else DEFAULT_TIMEOUT _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url ) async_api_deviceBaseDetailList ( devices ) async \u00b6 Return the details of the requested devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html). Source code in imouapi/api.py 200 201 202 203 204 205 206 207 208 209 210 211 async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # preparare the payload device_list = [] for device in devices : device_list . append ({ \"deviceId\" : device , \"channelList\" : \"0\" }) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceBaseList () async \u00b6 Return the list of registered devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html). Source code in imouapi/api.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # preparare the payload payload = { \"bindId\" : - 1 , \"limit\" : 20 , \"type\" : \"bindAndShare\" , \"needApInfo\" : False , } # call the api return await self . _async_call_api ( api , payload ) async_api_deviceOnline ( device_id ) async \u00b6 Device online or offline (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html). Source code in imouapi/api.py 213 214 215 216 217 218 219 220 221 async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # preparare the payload payload = { \"deviceId\" : device_id } # call the api return await self . _async_call_api ( api , payload ) async_api_getAlarmMessage ( device_id ) async \u00b6 Get the device message list of the device channel in the specified time period (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html). Source code in imouapi/api.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # preparare the payload end_time = datetime . now () begin_time = end_time - timedelta ( days = 30 ) payload = { \"deviceId\" : device_id , \"count\" : \"1\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload ) async_api_getDeviceCameraStatus ( device_id , enable_type ) async \u00b6 Get the status of the device switch (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html). Source code in imouapi/api.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload ) async_api_setDeviceCameraStatus ( device_id , enable_type , value ) async \u00b6 Set a device switch (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html). Source code in imouapi/api.py 238 239 240 241 242 243 244 245 246 247 248 async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value } # call the api return await self . _async_call_api ( api , payload ) async_connect () async \u00b6 Authenticate against the API and retrieve an access token. Source code in imouapi/api.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token\" ) self . _connected = True _LOGGER . debug ( \"Connected succesfully\" ) return True async_disconnect () async \u00b6 Disconnect from the API. Source code in imouapi/api.py 97 98 99 100 101 102 103 async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True async_reconnect () async \u00b6 Reconnect to the API. Source code in imouapi/api.py 109 110 111 112 async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect () is_connected () \u00b6 Return true if already connected. Source code in imouapi/api.py 105 106 107 def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected log_http_requests ( value ) \u00b6 Set to true if you want in debug logs also HTTP requests and responses. Source code in imouapi/api.py 71 72 73 def log_http_requests ( self , value : bool ) -> None : \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\" self . _log_http_requests_enabled = value redact_log_message ( value ) \u00b6 Set to true if you want debug logs redacted from sensitive data. Source code in imouapi/api.py 75 76 77 def redact_log_message ( self , value : bool ) -> None : \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\" self . _redact_log_message_enabled = value","title":"api"},{"location":"modules/api/#imouapi.api.ImouAPIClient","text":"Interact with IMOU API. Source code in imouapi/api.pyclass ImouAPIClient : \"\"\"Interact with IMOU API.\"\"\" def __init__ ( self , app_id : str , app_secret : str , websession : ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: base_url: base url for API calls (e.g. https://openapi.easy4ip.com/openapi) app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session \"\"\" self . _base_url = base_url if base_url is not None else API_URL self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _access_token = None self . _access_token_expire_time = None self . _log_http_requests_enabled = False self . _redact_log_message_enabled = True self . _connected = False self . _timeout = timeout if timeout is not None else DEFAULT_TIMEOUT _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url ) def _redact_log_message ( self , data : str ) -> str : \"\"\"Redact log messages to remove sensitive information.\"\"\" if not self . _redact_log_message_enabled : return data for keyword in ( \"appId\" , \"sign\" , \"token\" , \"accessToken\" , \"playToken\" , \"thumbUrl\" , \"picUrl\" ): for tick in ( ' \\\" ' , \"'\" ): data = re . sub ( f \" { tick }{ keyword }{ tick } : \\\\ s* { tick } [^ { tick } ]+ { tick } \" , f \" { tick }{ keyword }{ tick } : { tick } XXXXXXXXX { tick } \" , data , ) return data def log_http_requests ( self , value : bool ) -> None : \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\" self . _log_http_requests_enabled = value def redact_log_message ( self , value : bool ) -> None : \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\" self . _redact_log_message_enabled = value async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token\" ) self . _connected = True _LOGGER . debug ( \"Connected succesfully\" ) return True async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect () async def _async_call_api ( self , api : str , payload : dict , is_connect_request : bool = False ) -> dict : \"\"\"Submit request to the HTTP API endpoint.\"\"\" # if this is not a connect request, check if we are already connected if not is_connect_request : if not self . is_connected (): raise NotConnected () # calculate timestamp, nonce, sign and id as per https://open.imoulife.com/book/http/develop.html timestamp = round ( time . time ()) nonce = secrets . token_urlsafe () sign = hashlib . md5 ( f \"time: { timestamp } ,nonce: { nonce } ,appSecret: { self . _app_secret } \" . encode ( \"utf-8\" )) . hexdigest () request_id = str ( random . randint ( 1 , 10000 )) # add the access token to the payload if already available if self . _access_token is not None : payload [ \"token\" ] = self . _access_token # prepare the API request url = f \" { self . _base_url } / { api } \" body = { \"system\" : { \"ver\" : \"1.0\" , \"sign\" : sign , \"appId\" : self . _app_id , \"time\" : timestamp , \"nonce\" : nonce , }, \"params\" : payload , \"id\" : request_id , } if self . _log_http_requests_enabled : _LOGGER . debug ( \"[HTTP_REQUEST] %s : %s \" , url , self . _redact_log_message ( str ( body ))) # send the request to the API endpoint try : response = await self . _websession . request ( \"POST\" , url , json = body , timeout = self . _timeout ) except Exception as exception : raise ConnectionFailed ( f \" { exception } \" ) from exception # parse the response and look for errors response_status = response . status if self . _log_http_requests_enabled : _LOGGER . debug ( \"[HTTP_RESPONSE] %s : %s \" , response_status , self . _redact_log_message ( str ( await response . text ())) ) if response_status != 200 : raise APIError ( f \"status code { response . status } \" ) try : response_body = await response . json ( content_type = \"text/plain\" ) except Exception as exception : raise InvalidResponse ( f \"unable to parse response text { await response . text () } \" ) from exception if ( \"result\" not in response_body or \"code\" not in response_body [ \"result\" ] or \"msg\" not in response_body [ \"result\" ] ): raise InvalidResponse ( f \"cannot find result, code or msg in { response_body } \" ) result_code = response_body [ \"result\" ][ \"code\" ] result_message = response_body [ \"result\" ][ \"msg\" ] if result_code != \"0\" : error_message = result_code + \": \" + result_message if result_code in ( \"OP1008\" , \"SN1001\" ): raise InvalidConfiguration ( f \"Invalid appId or appSecret ( { error_message } )\" ) if result_code == \"OP1009\" : raise NotAuthorized ( f \" { error_message } \" ) raise APIError ( error_message ) # return the payload of the reponse response_data = response_body [ \"result\" ][ \"data\" ] if \"data\" in response_body [ \"result\" ] else {} return response_data async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # preparare the payload payload = { \"bindId\" : - 1 , \"limit\" : 20 , \"type\" : \"bindAndShare\" , \"needApInfo\" : False , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # preparare the payload device_list = [] for device in devices : device_list . append ({ \"deviceId\" : device , \"channelList\" : \"0\" }) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload ) async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # preparare the payload payload = { \"deviceId\" : device_id } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload ) async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value } # call the api return await self . _async_call_api ( api , payload ) async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # preparare the payload end_time = datetime . now () begin_time = end_time - timedelta ( days = 30 ) payload = { \"deviceId\" : device_id , \"count\" : \"1\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload )","title":"ImouAPIClient"},{"location":"modules/api/#imouapi.api.ImouAPIClient.__init__","text":"Initialize the instance. Parameters: Name Type Description Default base_url str base url for API calls (e.g. https://openapi.easy4ip.com/openapi) None app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required websession ClientSession aiohttp client session required Source code in imouapi/api.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def __init__ ( self , app_id : str , app_secret : str , websession : ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: base_url: base url for API calls (e.g. https://openapi.easy4ip.com/openapi) app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session \"\"\" self . _base_url = base_url if base_url is not None else API_URL self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _access_token = None self . _access_token_expire_time = None self . _log_http_requests_enabled = False self . _redact_log_message_enabled = True self . _connected = False self . _timeout = timeout if timeout is not None else DEFAULT_TIMEOUT _LOGGER . debug ( \"Initialized. Endpoint URL: %s \" , self . _base_url )","title":"__init__()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceBaseDetailList","text":"Return the details of the requested devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html). Source code in imouapi/api.py 200 201 202 203 204 205 206 207 208 209 210 211 async def async_api_deviceBaseDetailList ( self , devices : list [ str ]) -> dict : # pylint: disable=invalid-name \"\"\"Return the details of the requested devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\" # define the api endpoint api = \"deviceBaseDetailList\" # preparare the payload device_list = [] for device in devices : device_list . append ({ \"deviceId\" : device , \"channelList\" : \"0\" }) payload = { \"deviceList\" : device_list } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceBaseDetailList()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceBaseList","text":"Return the list of registered devices (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html). Source code in imouapi/api.py 185 186 187 188 189 190 191 192 193 194 195 196 197 198 async def async_api_deviceBaseList ( self ) -> dict : # pylint: disable=invalid-name \"\"\"Return the list of registered devices \\ (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\" # define the api endpoint api = \"deviceBaseList\" # preparare the payload payload = { \"bindId\" : - 1 , \"limit\" : 20 , \"type\" : \"bindAndShare\" , \"needApInfo\" : False , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceBaseList()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceOnline","text":"Device online or offline (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html). Source code in imouapi/api.py 213 214 215 216 217 218 219 220 221 async def async_api_deviceOnline ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Device online or offline \\ (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\" # define the api endpoint api = \"deviceOnline\" # preparare the payload payload = { \"deviceId\" : device_id } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_deviceOnline()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getAlarmMessage","text":"Get the device message list of the device channel in the specified time period (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html). Source code in imouapi/api.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 async def async_api_getAlarmMessage ( self , device_id : str ) -> dict : # pylint: disable=invalid-name \"\"\"Get the device message list of the device channel in the specified time period \\ (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\" # define the api endpoint api = \"getAlarmMessage\" # preparare the payload end_time = datetime . now () begin_time = end_time - timedelta ( days = 30 ) payload = { \"deviceId\" : device_id , \"count\" : \"1\" , \"channelId\" : \"0\" , \"beginTime\" : begin_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), \"endTime\" : end_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ), } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_getAlarmMessage()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getDeviceCameraStatus","text":"Get the status of the device switch (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html). Source code in imouapi/api.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 async def async_api_getDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str ) -> dict : \"\"\"Get the status of the device switch \\ (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"getDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_getDeviceCameraStatus()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setDeviceCameraStatus","text":"Set a device switch (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html). Source code in imouapi/api.py 238 239 240 241 242 243 244 245 246 247 248 async def async_api_setDeviceCameraStatus ( # pylint: disable=invalid-name self , device_id : str , enable_type : str , value : bool ) -> dict : \"\"\"Set a device switch \\ (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\" # define the api endpoint api = \"setDeviceCameraStatus\" # preparare the payload payload = { \"deviceId\" : device_id , \"enableType\" : enable_type , \"enable\" : value } # call the api return await self . _async_call_api ( api , payload )","title":"async_api_setDeviceCameraStatus()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_connect","text":"Authenticate against the API and retrieve an access token. Source code in imouapi/api.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 async def async_connect ( self ) -> bool : \"\"\"Authenticate against the API and retrieve an access token.\"\"\" # check if we already have an access token and if so assume already authenticated if self . is_connected (): return True # call the access token endpoint _LOGGER . debug ( \"Connecting\" ) data = await self . _async_call_api ( \"accessToken\" , {}, True ) if \"accessToken\" not in data or \"expireTime\" not in data : raise InvalidResponse ( f \"accessToken not found in { data } \" ) # store the access token self . _access_token = data [ \"accessToken\" ] self . _access_token_expire_time = data [ \"expireTime\" ] _LOGGER . debug ( \"Retrieved access token\" ) self . _connected = True _LOGGER . debug ( \"Connected succesfully\" ) return True","title":"async_connect()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_disconnect","text":"Disconnect from the API. Source code in imouapi/api.py 97 98 99 100 101 102 103 async def async_disconnect ( self ) -> bool : \"\"\"Disconnect from the API.\"\"\" self . _access_token = None self . _access_token_expire_time = None self . _connected = False _LOGGER . debug ( \"Disconnected\" ) return True","title":"async_disconnect()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_reconnect","text":"Reconnect to the API. Source code in imouapi/api.py 109 110 111 112 async def async_reconnect ( self ) -> bool : \"\"\"Reconnect to the API.\"\"\" await self . async_disconnect () return await self . async_connect ()","title":"async_reconnect()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.is_connected","text":"Return true if already connected. Source code in imouapi/api.py 105 106 107 def is_connected ( self ) -> bool : \"\"\"Return true if already connected.\"\"\" return self . _connected","title":"is_connected()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.log_http_requests","text":"Set to true if you want in debug logs also HTTP requests and responses. Source code in imouapi/api.py 71 72 73 def log_http_requests ( self , value : bool ) -> None : \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\" self . _log_http_requests_enabled = value","title":"log_http_requests()"},{"location":"modules/api/#imouapi.api.ImouAPIClient.redact_log_message","text":"Set to true if you want debug logs redacted from sensitive data. Source code in imouapi/api.py 75 76 77 def redact_log_message ( self , value : bool ) -> None : \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\" self . _redact_log_message_enabled = value","title":"redact_log_message()"},{"location":"modules/device/","text":"High level API to discover and interacting with Imou devices and their sensors. ImouDevice \u00b6 A representation of an IMOU Device. Source code in imouapi/device.pyclass ImouDevice : \"\"\"A representation of an IMOU Device.\"\"\" def __init__ ( self , app_id : str , app_secret : str , device_id : str , websession : aiohttp . ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo device_id: device id websession: aiohttp client session base_url: API base url (optional) timeout: request timeout in seconds (optional) \"\"\" # initialize the properties self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _timeout = timeout self . _base_url = base_url self . _device_id = device_id self . _catalog = \"N.A.\" self . _firmware = \"N.A.\" self . _name = \"N.A.\" self . _given_name = \"\" self . _device_model = \"N.A.\" self . _manufacturer = \"Imou\" self . _online = False self . _capabilities : list [ str ] = [] self . _switches : list [ str ] = [] self . _sensor_instances : dict [ str , list ] = { \"switch\" : [], \"sensor\" : [], \"binary_sensor\" : []} self . _last_alarm = \"N.A.\" # setup the API client self . api_client = ImouAPIClient ( app_id , app_secret , websession , base_url , timeout ) # other status variables self . _initialized = False self . _connected = False self . _enabled = True def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get device name.\"\"\" if self . _given_name != \"\" : return self . _given_name return self . _name def set_name ( self , given_name : str ) -> None : \"\"\"Set device name.\"\"\" self . _given_name = given_name def get_model ( self ) -> str : \"\"\"Get model.\"\"\" return self . _device_model def get_manufacturer ( self ) -> str : \"\"\"Get manufacturer.\"\"\" return self . _manufacturer def get_firmware ( self ) -> str : \"\"\"Get firmware.\"\"\" return self . _firmware def is_online ( self ) -> bool : \"\"\"Get online.\"\"\" return self . _online def get_sensors ( self , platform : str ) -> list [ ImouEntity ]: \"\"\"Get sensor instances.\"\"\" return self . _sensor_instances [ platform ] def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value def get_last_alarm ( self ) -> str : \"\"\"Get last alarm.\"\"\" return self . _last_alarm async def async_connect ( self ) -> bool : \"\"\"Connect to the API.\"\"\" status = await self . api_client . async_connect () if status : self . _connected = True return status async def async_initialize ( self ) -> None : \"\"\"Initialize the instance by retrieving the device details.\"\"\" # get the details for this device from the API device_array = await self . api_client . async_api_deviceBaseDetailList ([ self . _device_id ]) if \"deviceList\" not in device_array or len ( device_array [ \"deviceList\" ]) != 1 : raise InvalidResponse ( f \"deviceList not found in { str ( device_array ) } \" ) # reponse is an array, our data is in the first element device_data = device_array [ \"deviceList\" ][ 0 ] try : # get device details self . _catalog = device_data [ \"catalog\" ] self . _firmware = device_data [ \"version\" ] self . _name = device_data [ \"name\" ] self . _device_model = device_data [ \"deviceModel\" ] self . _online = device_data [ \"status\" ] == \"online\" # get device capabilities self . _capabilities = device_data [ \"ability\" ] . split ( \",\" ) # For some reason motionDetect is not listed as a capability like it should if \"motionDetect\" not in self . _capabilities : self . _capabilities . append ( \"motionDetect\" ) switches_keys = IMOU_SWITCHES . keys () # add switches. For each possible switch, check if there is a capability with the same name \\ # (ref. https://open.imoulife.com/book/en/faq/feature.html) for switch_type in switches_keys : for capability in self . _capabilities : if switch_type . lower () == capability . lower (): self . _switches . append ( switch_type ) # if the switch is supported, create an instance and save it if switch_type in SUPPORTED_SWITCHES : switch_instance = ImouSwitch ( self . api_client , self . _device_id , self . get_name (), switch_type , ) self . _sensor_instances [ \"switch\" ] . append ( switch_instance ) break # add lastAlarm sensor self . _sensor_instances [ \"sensor\" ] . append ( ImouSensor ( self . api_client , self . _device_id , self . get_name (), \"lastAlarm\" , ) ) # add online binary sensor self . _sensor_instances [ \"binary_sensor\" ] . append ( ImouBinarySensor ( self . api_client , self . _device_id , self . get_name (), \"online\" , ) ) except Exception as exception : raise InvalidResponse ( f \" missing parameter or error parsing in { device_data } \" ) from exception _LOGGER . debug ( \"Retrieved device %s \" , self . to_string ()) _LOGGER . debug ( \"Device details: \\n %s \" , self . dump ()) # keep track that we have already asked for the device details self . _initialized = True async def async_get_data ( self ) -> bool : \"\"\"Update device properties and its sensors.\"\"\" if not self . _enabled : return False if not self . _connected : await self . async_connect () if not self . _initialized : # get the details of the devices await self . async_initialize () # check if the device is online _LOGGER . debug ( \"[ %s ] update requested\" , self . get_name ()) data = await self . api_client . async_api_deviceOnline ( self . _device_id ) self . _online = data [ \"onLine\" ] == \"1\" # update the status of all the sensors (if the device is online) if self . _online : for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : await sensor_instance . async_update () return True def enable_sensors ( self , value : bool ): \"\"\"Enable/Disable all the registered sensors.\"\"\" for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : sensor_instance . set_enabled ( value ) def to_string ( self ) -> str : \"\"\"Return the object as a string.\"\"\" return f \" { self . _name } ( { self . _device_model } , serial { self . _device_id } )\" def dump ( self ) -> str : \"\"\"Return the full description of the object and its attributes.\"\"\" online = \"yes\" if self . _online else \"no\" dump = ( f \"- Device ID: { self . _device_id } \\n \" + f \" Name: { self . _name } \\n \" + f \" Catalog: { self . _catalog } \\n \" + f \" Model: { self . _device_model } \\n \" + f \" Firmware: { self . _firmware } \\n \" + f \" Online: { online } \\n \" ) dump = dump + \" Capabilities: \\n \" for capability in self . _capabilities : description = ( f \" { IMOU_CAPABILITIES [ capability ] } ( { capability } )\" if capability in IMOU_CAPABILITIES else capability ) dump = dump + f \" - { description } \\n \" dump = dump + \" Available Switches: \\n \" for sensor_name in self . _switches : description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) dump = dump + f \" - { description } \\n \" dump = dump + \" Configured Switches: \\n \" for sensor_instance in self . _sensor_instances [ \"switch\" ]: sensor_name = sensor_instance . get_name () description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) is_on = sensor_instance . is_on () status = \"ON\" if is_on else \"OFF\" dump = dump + f \" - { description } : { status } \\n \" dump = dump + \" Sensors: \\n \" for sensor_instance in self . _sensor_instances [ \"sensor\" ]: sensor_name = sensor_instance . get_name () description = f \" { SENSORS [ sensor_name ] } ( { sensor_name } )\" dump = dump + f \" - { description } : { sensor_instance . get_state () } \\n \" dump = dump + \" Binary Sensors: \\n \" for sensor_instance in self . _sensor_instances [ \"binary_sensor\" ]: sensor_name = sensor_instance . get_name () description = f \" { BINARY_SENSORS [ sensor_name ] } ( { sensor_name } )\" is_on = sensor_instance . is_on () status = \"ON\" if is_on else \"OFF\" dump = dump + f \" - { description } : { status } \\n \" return dump __init__ ( app_id , app_secret , device_id , websession , base_url = None , timeout = None ) \u00b6 Initialize the instance. Parameters: Name Type Description Default app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required device_id str device id required websession aiohttp . ClientSession aiohttp client session required base_url str API base url (optional) None timeout int request timeout in seconds (optional) None Source code in imouapi/device.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def __init__ ( self , app_id : str , app_secret : str , device_id : str , websession : aiohttp . ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo device_id: device id websession: aiohttp client session base_url: API base url (optional) timeout: request timeout in seconds (optional) \"\"\" # initialize the properties self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _timeout = timeout self . _base_url = base_url self . _device_id = device_id self . _catalog = \"N.A.\" self . _firmware = \"N.A.\" self . _name = \"N.A.\" self . _given_name = \"\" self . _device_model = \"N.A.\" self . _manufacturer = \"Imou\" self . _online = False self . _capabilities : list [ str ] = [] self . _switches : list [ str ] = [] self . _sensor_instances : dict [ str , list ] = { \"switch\" : [], \"sensor\" : [], \"binary_sensor\" : []} self . _last_alarm = \"N.A.\" # setup the API client self . api_client = ImouAPIClient ( app_id , app_secret , websession , base_url , timeout ) # other status variables self . _initialized = False self . _connected = False self . _enabled = True async_connect () async \u00b6 Connect to the API. Source code in imouapi/device.py 104 105 106 107 108 109 async def async_connect ( self ) -> bool : \"\"\"Connect to the API.\"\"\" status = await self . api_client . async_connect () if status : self . _connected = True return status async_get_data () async \u00b6 Update device properties and its sensors. Source code in imouapi/device.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 async def async_get_data ( self ) -> bool : \"\"\"Update device properties and its sensors.\"\"\" if not self . _enabled : return False if not self . _connected : await self . async_connect () if not self . _initialized : # get the details of the devices await self . async_initialize () # check if the device is online _LOGGER . debug ( \"[ %s ] update requested\" , self . get_name ()) data = await self . api_client . async_api_deviceOnline ( self . _device_id ) self . _online = data [ \"onLine\" ] == \"1\" # update the status of all the sensors (if the device is online) if self . _online : for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : await sensor_instance . async_update () return True async_initialize () async \u00b6 Initialize the instance by retrieving the device details. Source code in imouapi/device.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 async def async_initialize ( self ) -> None : \"\"\"Initialize the instance by retrieving the device details.\"\"\" # get the details for this device from the API device_array = await self . api_client . async_api_deviceBaseDetailList ([ self . _device_id ]) if \"deviceList\" not in device_array or len ( device_array [ \"deviceList\" ]) != 1 : raise InvalidResponse ( f \"deviceList not found in { str ( device_array ) } \" ) # reponse is an array, our data is in the first element device_data = device_array [ \"deviceList\" ][ 0 ] try : # get device details self . _catalog = device_data [ \"catalog\" ] self . _firmware = device_data [ \"version\" ] self . _name = device_data [ \"name\" ] self . _device_model = device_data [ \"deviceModel\" ] self . _online = device_data [ \"status\" ] == \"online\" # get device capabilities self . _capabilities = device_data [ \"ability\" ] . split ( \",\" ) # For some reason motionDetect is not listed as a capability like it should if \"motionDetect\" not in self . _capabilities : self . _capabilities . append ( \"motionDetect\" ) switches_keys = IMOU_SWITCHES . keys () # add switches. For each possible switch, check if there is a capability with the same name \\ # (ref. https://open.imoulife.com/book/en/faq/feature.html) for switch_type in switches_keys : for capability in self . _capabilities : if switch_type . lower () == capability . lower (): self . _switches . append ( switch_type ) # if the switch is supported, create an instance and save it if switch_type in SUPPORTED_SWITCHES : switch_instance = ImouSwitch ( self . api_client , self . _device_id , self . get_name (), switch_type , ) self . _sensor_instances [ \"switch\" ] . append ( switch_instance ) break # add lastAlarm sensor self . _sensor_instances [ \"sensor\" ] . append ( ImouSensor ( self . api_client , self . _device_id , self . get_name (), \"lastAlarm\" , ) ) # add online binary sensor self . _sensor_instances [ \"binary_sensor\" ] . append ( ImouBinarySensor ( self . api_client , self . _device_id , self . get_name (), \"online\" , ) ) except Exception as exception : raise InvalidResponse ( f \" missing parameter or error parsing in { device_data } \" ) from exception _LOGGER . debug ( \"Retrieved device %s \" , self . to_string ()) _LOGGER . debug ( \"Device details: \\n %s \" , self . dump ()) # keep track that we have already asked for the device details self . _initialized = True dump () \u00b6 Return the full description of the object and its attributes. Source code in imouapi/device.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 def dump ( self ) -> str : \"\"\"Return the full description of the object and its attributes.\"\"\" online = \"yes\" if self . _online else \"no\" dump = ( f \"- Device ID: { self . _device_id } \\n \" + f \" Name: { self . _name } \\n \" + f \" Catalog: { self . _catalog } \\n \" + f \" Model: { self . _device_model } \\n \" + f \" Firmware: { self . _firmware } \\n \" + f \" Online: { online } \\n \" ) dump = dump + \" Capabilities: \\n \" for capability in self . _capabilities : description = ( f \" { IMOU_CAPABILITIES [ capability ] } ( { capability } )\" if capability in IMOU_CAPABILITIES else capability ) dump = dump + f \" - { description } \\n \" dump = dump + \" Available Switches: \\n \" for sensor_name in self . _switches : description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) dump = dump + f \" - { description } \\n \" dump = dump + \" Configured Switches: \\n \" for sensor_instance in self . _sensor_instances [ \"switch\" ]: sensor_name = sensor_instance . get_name () description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) is_on = sensor_instance . is_on () status = \"ON\" if is_on else \"OFF\" dump = dump + f \" - { description } : { status } \\n \" dump = dump + \" Sensors: \\n \" for sensor_instance in self . _sensor_instances [ \"sensor\" ]: sensor_name = sensor_instance . get_name () description = f \" { SENSORS [ sensor_name ] } ( { sensor_name } )\" dump = dump + f \" - { description } : { sensor_instance . get_state () } \\n \" dump = dump + \" Binary Sensors: \\n \" for sensor_instance in self . _sensor_instances [ \"binary_sensor\" ]: sensor_name = sensor_instance . get_name () description = f \" { BINARY_SENSORS [ sensor_name ] } ( { sensor_name } )\" is_on = sensor_instance . is_on () status = \"ON\" if is_on else \"OFF\" dump = dump + f \" - { description } : { status } \\n \" return dump enable_sensors ( value ) \u00b6 Enable/Disable all the registered sensors. Source code in imouapi/device.py 198 199 200 201 202 203 204 205 def enable_sensors ( self , value : bool ): \"\"\"Enable/Disable all the registered sensors.\"\"\" for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : sensor_instance . set_enabled ( value ) get_device_id () \u00b6 Get device id. Source code in imouapi/device.py 62 63 64 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id get_firmware () \u00b6 Get firmware. Source code in imouapi/device.py 84 85 86 def get_firmware ( self ) -> str : \"\"\"Get firmware.\"\"\" return self . _firmware get_last_alarm () \u00b6 Get last alarm. Source code in imouapi/device.py 100 101 102 def get_last_alarm ( self ) -> str : \"\"\"Get last alarm.\"\"\" return self . _last_alarm get_manufacturer () \u00b6 Get manufacturer. Source code in imouapi/device.py 80 81 82 def get_manufacturer ( self ) -> str : \"\"\"Get manufacturer.\"\"\" return self . _manufacturer get_model () \u00b6 Get model. Source code in imouapi/device.py 76 77 78 def get_model ( self ) -> str : \"\"\"Get model.\"\"\" return self . _device_model get_name () \u00b6 Get device name. Source code in imouapi/device.py 66 67 68 69 70 def get_name ( self ) -> str : \"\"\"Get device name.\"\"\" if self . _given_name != \"\" : return self . _given_name return self . _name get_sensors ( platform ) \u00b6 Get sensor instances. Source code in imouapi/device.py 92 93 94 def get_sensors ( self , platform : str ) -> list [ ImouEntity ]: \"\"\"Get sensor instances.\"\"\" return self . _sensor_instances [ platform ] is_online () \u00b6 Get online. Source code in imouapi/device.py 88 89 90 def is_online ( self ) -> bool : \"\"\"Get online.\"\"\" return self . _online set_enabled ( value ) \u00b6 Set enable. Source code in imouapi/device.py 96 97 98 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value set_name ( given_name ) \u00b6 Set device name. Source code in imouapi/device.py 72 73 74 def set_name ( self , given_name : str ) -> None : \"\"\"Set device name.\"\"\" self . _given_name = given_name to_string () \u00b6 Return the object as a string. Source code in imouapi/device.py 207 208 209 def to_string ( self ) -> str : \"\"\"Return the object as a string.\"\"\" return f \" { self . _name } ( { self . _device_model } , serial { self . _device_id } )\" ImouDiscoverService \u00b6 Class for discovering IMOU devices. Source code in imouapi/device.py 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 class ImouDiscoverService : \"\"\"Class for discovering IMOU devices.\"\"\" def __init__ ( self , app_id : str , app_secret : str , websession : aiohttp . ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session base_url: API base url (optional) timeout: request timeout in seconds (optional) \"\"\" # initialize the properties self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _base_url = base_url self . _timeout = timeout self . _connected = False # setup the API client self . api_client = ImouAPIClient ( app_id , app_secret , websession , base_url , timeout ) async def async_connect ( self ) -> bool : \"\"\"Connect to the API.\"\"\" status = await self . api_client . async_connect () if status : self . _connected = True return status async def async_discover_devices ( self ) -> dict : \"\"\"Discover registered devices and return a dict device name -> device object.\"\"\" if not self . _connected : await self . async_connect () _LOGGER . debug ( \"Starting discovery\" ) # get the list of devices devices_data = await self . api_client . async_api_deviceBaseList () if \"deviceList\" not in devices_data or \"count\" not in devices_data : raise InvalidResponse ( f \"deviceList or count not found in { devices_data } \" ) _LOGGER . debug ( \"Discovered %d registered devices\" , devices_data [ \"count\" ]) # extract the device id for each device devices = {} for device_data in devices_data [ \"deviceList\" ]: # create a a device instance from the device id and initialize it device = ImouDevice ( self . _app_id , self . _app_secret , device_data [ \"deviceId\" ], self . _websession , ) await device . async_connect () await device . async_initialize () _LOGGER . debug ( \" - %s \" , device . to_string ()) devices [ f \" { device . get_name () } \" ] = device # return a dict with device name -> device instance return devices __init__ ( app_id , app_secret , websession , base_url = None , timeout = None ) \u00b6 Initialize the instance. Parameters: Name Type Description Default app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required websession aiohttp . ClientSession aiohttp client session required base_url str API base url (optional) None timeout int request timeout in seconds (optional) None Source code in imouapi/device.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 def __init__ ( self , app_id : str , app_secret : str , websession : aiohttp . ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session base_url: API base url (optional) timeout: request timeout in seconds (optional) \"\"\" # initialize the properties self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _base_url = base_url self . _timeout = timeout self . _connected = False # setup the API client self . api_client = ImouAPIClient ( app_id , app_secret , websession , base_url , timeout ) async_connect () async \u00b6 Connect to the API. Source code in imouapi/device.py 289 290 291 292 293 294 async def async_connect ( self ) -> bool : \"\"\"Connect to the API.\"\"\" status = await self . api_client . async_connect () if status : self . _connected = True return status async_discover_devices () async \u00b6 Discover registered devices and return a dict device name -> device object. Source code in imouapi/device.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 async def async_discover_devices ( self ) -> dict : \"\"\"Discover registered devices and return a dict device name -> device object.\"\"\" if not self . _connected : await self . async_connect () _LOGGER . debug ( \"Starting discovery\" ) # get the list of devices devices_data = await self . api_client . async_api_deviceBaseList () if \"deviceList\" not in devices_data or \"count\" not in devices_data : raise InvalidResponse ( f \"deviceList or count not found in { devices_data } \" ) _LOGGER . debug ( \"Discovered %d registered devices\" , devices_data [ \"count\" ]) # extract the device id for each device devices = {} for device_data in devices_data [ \"deviceList\" ]: # create a a device instance from the device id and initialize it device = ImouDevice ( self . _app_id , self . _app_secret , device_data [ \"deviceId\" ], self . _websession , ) await device . async_connect () await device . async_initialize () _LOGGER . debug ( \" - %s \" , device . to_string ()) devices [ f \" { device . get_name () } \" ] = device # return a dict with device name -> device instance return devices","title":"device"},{"location":"modules/device/#imouapi.device.ImouDevice","text":"A representation of an IMOU Device. Source code in imouapi/device.pyclass ImouDevice : \"\"\"A representation of an IMOU Device.\"\"\" def __init__ ( self , app_id : str , app_secret : str , device_id : str , websession : aiohttp . ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo device_id: device id websession: aiohttp client session base_url: API base url (optional) timeout: request timeout in seconds (optional) \"\"\" # initialize the properties self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _timeout = timeout self . _base_url = base_url self . _device_id = device_id self . _catalog = \"N.A.\" self . _firmware = \"N.A.\" self . _name = \"N.A.\" self . _given_name = \"\" self . _device_model = \"N.A.\" self . _manufacturer = \"Imou\" self . _online = False self . _capabilities : list [ str ] = [] self . _switches : list [ str ] = [] self . _sensor_instances : dict [ str , list ] = { \"switch\" : [], \"sensor\" : [], \"binary_sensor\" : []} self . _last_alarm = \"N.A.\" # setup the API client self . api_client = ImouAPIClient ( app_id , app_secret , websession , base_url , timeout ) # other status variables self . _initialized = False self . _connected = False self . _enabled = True def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get device name.\"\"\" if self . _given_name != \"\" : return self . _given_name return self . _name def set_name ( self , given_name : str ) -> None : \"\"\"Set device name.\"\"\" self . _given_name = given_name def get_model ( self ) -> str : \"\"\"Get model.\"\"\" return self . _device_model def get_manufacturer ( self ) -> str : \"\"\"Get manufacturer.\"\"\" return self . _manufacturer def get_firmware ( self ) -> str : \"\"\"Get firmware.\"\"\" return self . _firmware def is_online ( self ) -> bool : \"\"\"Get online.\"\"\" return self . _online def get_sensors ( self , platform : str ) -> list [ ImouEntity ]: \"\"\"Get sensor instances.\"\"\" return self . _sensor_instances [ platform ] def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value def get_last_alarm ( self ) -> str : \"\"\"Get last alarm.\"\"\" return self . _last_alarm async def async_connect ( self ) -> bool : \"\"\"Connect to the API.\"\"\" status = await self . api_client . async_connect () if status : self . _connected = True return status async def async_initialize ( self ) -> None : \"\"\"Initialize the instance by retrieving the device details.\"\"\" # get the details for this device from the API device_array = await self . api_client . async_api_deviceBaseDetailList ([ self . _device_id ]) if \"deviceList\" not in device_array or len ( device_array [ \"deviceList\" ]) != 1 : raise InvalidResponse ( f \"deviceList not found in { str ( device_array ) } \" ) # reponse is an array, our data is in the first element device_data = device_array [ \"deviceList\" ][ 0 ] try : # get device details self . _catalog = device_data [ \"catalog\" ] self . _firmware = device_data [ \"version\" ] self . _name = device_data [ \"name\" ] self . _device_model = device_data [ \"deviceModel\" ] self . _online = device_data [ \"status\" ] == \"online\" # get device capabilities self . _capabilities = device_data [ \"ability\" ] . split ( \",\" ) # For some reason motionDetect is not listed as a capability like it should if \"motionDetect\" not in self . _capabilities : self . _capabilities . append ( \"motionDetect\" ) switches_keys = IMOU_SWITCHES . keys () # add switches. For each possible switch, check if there is a capability with the same name \\ # (ref. https://open.imoulife.com/book/en/faq/feature.html) for switch_type in switches_keys : for capability in self . _capabilities : if switch_type . lower () == capability . lower (): self . _switches . append ( switch_type ) # if the switch is supported, create an instance and save it if switch_type in SUPPORTED_SWITCHES : switch_instance = ImouSwitch ( self . api_client , self . _device_id , self . get_name (), switch_type , ) self . _sensor_instances [ \"switch\" ] . append ( switch_instance ) break # add lastAlarm sensor self . _sensor_instances [ \"sensor\" ] . append ( ImouSensor ( self . api_client , self . _device_id , self . get_name (), \"lastAlarm\" , ) ) # add online binary sensor self . _sensor_instances [ \"binary_sensor\" ] . append ( ImouBinarySensor ( self . api_client , self . _device_id , self . get_name (), \"online\" , ) ) except Exception as exception : raise InvalidResponse ( f \" missing parameter or error parsing in { device_data } \" ) from exception _LOGGER . debug ( \"Retrieved device %s \" , self . to_string ()) _LOGGER . debug ( \"Device details: \\n %s \" , self . dump ()) # keep track that we have already asked for the device details self . _initialized = True async def async_get_data ( self ) -> bool : \"\"\"Update device properties and its sensors.\"\"\" if not self . _enabled : return False if not self . _connected : await self . async_connect () if not self . _initialized : # get the details of the devices await self . async_initialize () # check if the device is online _LOGGER . debug ( \"[ %s ] update requested\" , self . get_name ()) data = await self . api_client . async_api_deviceOnline ( self . _device_id ) self . _online = data [ \"onLine\" ] == \"1\" # update the status of all the sensors (if the device is online) if self . _online : for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : await sensor_instance . async_update () return True def enable_sensors ( self , value : bool ): \"\"\"Enable/Disable all the registered sensors.\"\"\" for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : sensor_instance . set_enabled ( value ) def to_string ( self ) -> str : \"\"\"Return the object as a string.\"\"\" return f \" { self . _name } ( { self . _device_model } , serial { self . _device_id } )\" def dump ( self ) -> str : \"\"\"Return the full description of the object and its attributes.\"\"\" online = \"yes\" if self . _online else \"no\" dump = ( f \"- Device ID: { self . _device_id } \\n \" + f \" Name: { self . _name } \\n \" + f \" Catalog: { self . _catalog } \\n \" + f \" Model: { self . _device_model } \\n \" + f \" Firmware: { self . _firmware } \\n \" + f \" Online: { online } \\n \" ) dump = dump + \" Capabilities: \\n \" for capability in self . _capabilities : description = ( f \" { IMOU_CAPABILITIES [ capability ] } ( { capability } )\" if capability in IMOU_CAPABILITIES else capability ) dump = dump + f \" - { description } \\n \" dump = dump + \" Available Switches: \\n \" for sensor_name in self . _switches : description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) dump = dump + f \" - { description } \\n \" dump = dump + \" Configured Switches: \\n \" for sensor_instance in self . _sensor_instances [ \"switch\" ]: sensor_name = sensor_instance . get_name () description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) is_on = sensor_instance . is_on () status = \"ON\" if is_on else \"OFF\" dump = dump + f \" - { description } : { status } \\n \" dump = dump + \" Sensors: \\n \" for sensor_instance in self . _sensor_instances [ \"sensor\" ]: sensor_name = sensor_instance . get_name () description = f \" { SENSORS [ sensor_name ] } ( { sensor_name } )\" dump = dump + f \" - { description } : { sensor_instance . get_state () } \\n \" dump = dump + \" Binary Sensors: \\n \" for sensor_instance in self . _sensor_instances [ \"binary_sensor\" ]: sensor_name = sensor_instance . get_name () description = f \" { BINARY_SENSORS [ sensor_name ] } ( { sensor_name } )\" is_on = sensor_instance . is_on () status = \"ON\" if is_on else \"OFF\" dump = dump + f \" - { description } : { status } \\n \" return dump","title":"ImouDevice"},{"location":"modules/device/#imouapi.device.ImouDevice.__init__","text":"Initialize the instance. Parameters: Name Type Description Default app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required device_id str device id required websession aiohttp . ClientSession aiohttp client session required base_url str API base url (optional) None timeout int request timeout in seconds (optional) None Source code in imouapi/device.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def __init__ ( self , app_id : str , app_secret : str , device_id : str , websession : aiohttp . ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo device_id: device id websession: aiohttp client session base_url: API base url (optional) timeout: request timeout in seconds (optional) \"\"\" # initialize the properties self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _timeout = timeout self . _base_url = base_url self . _device_id = device_id self . _catalog = \"N.A.\" self . _firmware = \"N.A.\" self . _name = \"N.A.\" self . _given_name = \"\" self . _device_model = \"N.A.\" self . _manufacturer = \"Imou\" self . _online = False self . _capabilities : list [ str ] = [] self . _switches : list [ str ] = [] self . _sensor_instances : dict [ str , list ] = { \"switch\" : [], \"sensor\" : [], \"binary_sensor\" : []} self . _last_alarm = \"N.A.\" # setup the API client self . api_client = ImouAPIClient ( app_id , app_secret , websession , base_url , timeout ) # other status variables self . _initialized = False self . _connected = False self . _enabled = True","title":"__init__()"},{"location":"modules/device/#imouapi.device.ImouDevice.async_connect","text":"Connect to the API. Source code in imouapi/device.py 104 105 106 107 108 109 async def async_connect ( self ) -> bool : \"\"\"Connect to the API.\"\"\" status = await self . api_client . async_connect () if status : self . _connected = True return status","title":"async_connect()"},{"location":"modules/device/#imouapi.device.ImouDevice.async_get_data","text":"Update device properties and its sensors. Source code in imouapi/device.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 async def async_get_data ( self ) -> bool : \"\"\"Update device properties and its sensors.\"\"\" if not self . _enabled : return False if not self . _connected : await self . async_connect () if not self . _initialized : # get the details of the devices await self . async_initialize () # check if the device is online _LOGGER . debug ( \"[ %s ] update requested\" , self . get_name ()) data = await self . api_client . async_api_deviceOnline ( self . _device_id ) self . _online = data [ \"onLine\" ] == \"1\" # update the status of all the sensors (if the device is online) if self . _online : for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : await sensor_instance . async_update () return True","title":"async_get_data()"},{"location":"modules/device/#imouapi.device.ImouDevice.async_initialize","text":"Initialize the instance by retrieving the device details. Source code in imouapi/device.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 async def async_initialize ( self ) -> None : \"\"\"Initialize the instance by retrieving the device details.\"\"\" # get the details for this device from the API device_array = await self . api_client . async_api_deviceBaseDetailList ([ self . _device_id ]) if \"deviceList\" not in device_array or len ( device_array [ \"deviceList\" ]) != 1 : raise InvalidResponse ( f \"deviceList not found in { str ( device_array ) } \" ) # reponse is an array, our data is in the first element device_data = device_array [ \"deviceList\" ][ 0 ] try : # get device details self . _catalog = device_data [ \"catalog\" ] self . _firmware = device_data [ \"version\" ] self . _name = device_data [ \"name\" ] self . _device_model = device_data [ \"deviceModel\" ] self . _online = device_data [ \"status\" ] == \"online\" # get device capabilities self . _capabilities = device_data [ \"ability\" ] . split ( \",\" ) # For some reason motionDetect is not listed as a capability like it should if \"motionDetect\" not in self . _capabilities : self . _capabilities . append ( \"motionDetect\" ) switches_keys = IMOU_SWITCHES . keys () # add switches. For each possible switch, check if there is a capability with the same name \\ # (ref. https://open.imoulife.com/book/en/faq/feature.html) for switch_type in switches_keys : for capability in self . _capabilities : if switch_type . lower () == capability . lower (): self . _switches . append ( switch_type ) # if the switch is supported, create an instance and save it if switch_type in SUPPORTED_SWITCHES : switch_instance = ImouSwitch ( self . api_client , self . _device_id , self . get_name (), switch_type , ) self . _sensor_instances [ \"switch\" ] . append ( switch_instance ) break # add lastAlarm sensor self . _sensor_instances [ \"sensor\" ] . append ( ImouSensor ( self . api_client , self . _device_id , self . get_name (), \"lastAlarm\" , ) ) # add online binary sensor self . _sensor_instances [ \"binary_sensor\" ] . append ( ImouBinarySensor ( self . api_client , self . _device_id , self . get_name (), \"online\" , ) ) except Exception as exception : raise InvalidResponse ( f \" missing parameter or error parsing in { device_data } \" ) from exception _LOGGER . debug ( \"Retrieved device %s \" , self . to_string ()) _LOGGER . debug ( \"Device details: \\n %s \" , self . dump ()) # keep track that we have already asked for the device details self . _initialized = True","title":"async_initialize()"},{"location":"modules/device/#imouapi.device.ImouDevice.dump","text":"Return the full description of the object and its attributes. Source code in imouapi/device.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 def dump ( self ) -> str : \"\"\"Return the full description of the object and its attributes.\"\"\" online = \"yes\" if self . _online else \"no\" dump = ( f \"- Device ID: { self . _device_id } \\n \" + f \" Name: { self . _name } \\n \" + f \" Catalog: { self . _catalog } \\n \" + f \" Model: { self . _device_model } \\n \" + f \" Firmware: { self . _firmware } \\n \" + f \" Online: { online } \\n \" ) dump = dump + \" Capabilities: \\n \" for capability in self . _capabilities : description = ( f \" { IMOU_CAPABILITIES [ capability ] } ( { capability } )\" if capability in IMOU_CAPABILITIES else capability ) dump = dump + f \" - { description } \\n \" dump = dump + \" Available Switches: \\n \" for sensor_name in self . _switches : description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) dump = dump + f \" - { description } \\n \" dump = dump + \" Configured Switches: \\n \" for sensor_instance in self . _sensor_instances [ \"switch\" ]: sensor_name = sensor_instance . get_name () description = ( f \" { IMOU_SWITCHES [ sensor_name ] } ( { sensor_name } )\" if sensor_name in IMOU_SWITCHES else sensor_name ) is_on = sensor_instance . is_on () status = \"ON\" if is_on else \"OFF\" dump = dump + f \" - { description } : { status } \\n \" dump = dump + \" Sensors: \\n \" for sensor_instance in self . _sensor_instances [ \"sensor\" ]: sensor_name = sensor_instance . get_name () description = f \" { SENSORS [ sensor_name ] } ( { sensor_name } )\" dump = dump + f \" - { description } : { sensor_instance . get_state () } \\n \" dump = dump + \" Binary Sensors: \\n \" for sensor_instance in self . _sensor_instances [ \"binary_sensor\" ]: sensor_name = sensor_instance . get_name () description = f \" { BINARY_SENSORS [ sensor_name ] } ( { sensor_name } )\" is_on = sensor_instance . is_on () status = \"ON\" if is_on else \"OFF\" dump = dump + f \" - { description } : { status } \\n \" return dump","title":"dump()"},{"location":"modules/device/#imouapi.device.ImouDevice.enable_sensors","text":"Enable/Disable all the registered sensors. Source code in imouapi/device.py 198 199 200 201 202 203 204 205 def enable_sensors ( self , value : bool ): \"\"\"Enable/Disable all the registered sensors.\"\"\" for ( platform , # pylint: disable=unused-variable sensor_instances_array , ) in self . _sensor_instances . items (): for sensor_instance in sensor_instances_array : sensor_instance . set_enabled ( value )","title":"enable_sensors()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_device_id","text":"Get device id. Source code in imouapi/device.py 62 63 64 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id","title":"get_device_id()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_firmware","text":"Get firmware. Source code in imouapi/device.py 84 85 86 def get_firmware ( self ) -> str : \"\"\"Get firmware.\"\"\" return self . _firmware","title":"get_firmware()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_last_alarm","text":"Get last alarm. Source code in imouapi/device.py 100 101 102 def get_last_alarm ( self ) -> str : \"\"\"Get last alarm.\"\"\" return self . _last_alarm","title":"get_last_alarm()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_manufacturer","text":"Get manufacturer. Source code in imouapi/device.py 80 81 82 def get_manufacturer ( self ) -> str : \"\"\"Get manufacturer.\"\"\" return self . _manufacturer","title":"get_manufacturer()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_model","text":"Get model. Source code in imouapi/device.py 76 77 78 def get_model ( self ) -> str : \"\"\"Get model.\"\"\" return self . _device_model","title":"get_model()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_name","text":"Get device name. Source code in imouapi/device.py 66 67 68 69 70 def get_name ( self ) -> str : \"\"\"Get device name.\"\"\" if self . _given_name != \"\" : return self . _given_name return self . _name","title":"get_name()"},{"location":"modules/device/#imouapi.device.ImouDevice.get_sensors","text":"Get sensor instances. Source code in imouapi/device.py 92 93 94 def get_sensors ( self , platform : str ) -> list [ ImouEntity ]: \"\"\"Get sensor instances.\"\"\" return self . _sensor_instances [ platform ]","title":"get_sensors()"},{"location":"modules/device/#imouapi.device.ImouDevice.is_online","text":"Get online. Source code in imouapi/device.py 88 89 90 def is_online ( self ) -> bool : \"\"\"Get online.\"\"\" return self . _online","title":"is_online()"},{"location":"modules/device/#imouapi.device.ImouDevice.set_enabled","text":"Set enable. Source code in imouapi/device.py 96 97 98 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value","title":"set_enabled()"},{"location":"modules/device/#imouapi.device.ImouDevice.set_name","text":"Set device name. Source code in imouapi/device.py 72 73 74 def set_name ( self , given_name : str ) -> None : \"\"\"Set device name.\"\"\" self . _given_name = given_name","title":"set_name()"},{"location":"modules/device/#imouapi.device.ImouDevice.to_string","text":"Return the object as a string. Source code in imouapi/device.py 207 208 209 def to_string ( self ) -> str : \"\"\"Return the object as a string.\"\"\" return f \" { self . _name } ( { self . _device_model } , serial { self . _device_id } )\"","title":"to_string()"},{"location":"modules/device/#imouapi.device.ImouDiscoverService","text":"Class for discovering IMOU devices. Source code in imouapi/device.py 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 class ImouDiscoverService : \"\"\"Class for discovering IMOU devices.\"\"\" def __init__ ( self , app_id : str , app_secret : str , websession : aiohttp . ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session base_url: API base url (optional) timeout: request timeout in seconds (optional) \"\"\" # initialize the properties self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _base_url = base_url self . _timeout = timeout self . _connected = False # setup the API client self . api_client = ImouAPIClient ( app_id , app_secret , websession , base_url , timeout ) async def async_connect ( self ) -> bool : \"\"\"Connect to the API.\"\"\" status = await self . api_client . async_connect () if status : self . _connected = True return status async def async_discover_devices ( self ) -> dict : \"\"\"Discover registered devices and return a dict device name -> device object.\"\"\" if not self . _connected : await self . async_connect () _LOGGER . debug ( \"Starting discovery\" ) # get the list of devices devices_data = await self . api_client . async_api_deviceBaseList () if \"deviceList\" not in devices_data or \"count\" not in devices_data : raise InvalidResponse ( f \"deviceList or count not found in { devices_data } \" ) _LOGGER . debug ( \"Discovered %d registered devices\" , devices_data [ \"count\" ]) # extract the device id for each device devices = {} for device_data in devices_data [ \"deviceList\" ]: # create a a device instance from the device id and initialize it device = ImouDevice ( self . _app_id , self . _app_secret , device_data [ \"deviceId\" ], self . _websession , ) await device . async_connect () await device . async_initialize () _LOGGER . debug ( \" - %s \" , device . to_string ()) devices [ f \" { device . get_name () } \" ] = device # return a dict with device name -> device instance return devices","title":"ImouDiscoverService"},{"location":"modules/device/#imouapi.device.ImouDiscoverService.__init__","text":"Initialize the instance. Parameters: Name Type Description Default app_id str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required app_secret str appID from https://open.imoulife.com/consoleNew/myApp/appInfo required websession aiohttp . ClientSession aiohttp client session required base_url str API base url (optional) None timeout int request timeout in seconds (optional) None Source code in imouapi/device.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 def __init__ ( self , app_id : str , app_secret : str , websession : aiohttp . ClientSession , base_url : str = None , timeout : int = None , ) -> None : \"\"\" Initialize the instance. Parameters: app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo websession: aiohttp client session base_url: API base url (optional) timeout: request timeout in seconds (optional) \"\"\" # initialize the properties self . _app_id = app_id self . _app_secret = app_secret self . _websession = websession self . _base_url = base_url self . _timeout = timeout self . _connected = False # setup the API client self . api_client = ImouAPIClient ( app_id , app_secret , websession , base_url , timeout )","title":"__init__()"},{"location":"modules/device/#imouapi.device.ImouDiscoverService.async_connect","text":"Connect to the API. Source code in imouapi/device.py 289 290 291 292 293 294 async def async_connect ( self ) -> bool : \"\"\"Connect to the API.\"\"\" status = await self . api_client . async_connect () if status : self . _connected = True return status","title":"async_connect()"},{"location":"modules/device/#imouapi.device.ImouDiscoverService.async_discover_devices","text":"Discover registered devices and return a dict device name -> device object. Source code in imouapi/device.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 async def async_discover_devices ( self ) -> dict : \"\"\"Discover registered devices and return a dict device name -> device object.\"\"\" if not self . _connected : await self . async_connect () _LOGGER . debug ( \"Starting discovery\" ) # get the list of devices devices_data = await self . api_client . async_api_deviceBaseList () if \"deviceList\" not in devices_data or \"count\" not in devices_data : raise InvalidResponse ( f \"deviceList or count not found in { devices_data } \" ) _LOGGER . debug ( \"Discovered %d registered devices\" , devices_data [ \"count\" ]) # extract the device id for each device devices = {} for device_data in devices_data [ \"deviceList\" ]: # create a a device instance from the device id and initialize it device = ImouDevice ( self . _app_id , self . _app_secret , device_data [ \"deviceId\" ], self . _websession , ) await device . async_connect () await device . async_initialize () _LOGGER . debug ( \" - %s \" , device . to_string ()) devices [ f \" { device . get_name () } \" ] = device # return a dict with device name -> device instance return devices","title":"async_discover_devices()"},{"location":"modules/device_entity/","text":"Classes for representing entities beloging to an Imou device. ImouBinarySensor \u00b6 Bases: ImouEntity A representation of a sensor within an IMOU Device. Source code in imouapi/device_entity.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 class ImouBinarySensor ( ImouEntity ): \"\"\"A representation of a sensor within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id sensor_type: the sensor type from const BINARY_SENSORS \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = BINARY_SENSOR_ICONS [ sensor_type ] self . _description = BINARY_SENSORS [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = False def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return if self . _name == \"online\" : # get the online status data = await self . api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data : raise InvalidResponse ( f \"onLine not found in { data } \" ) self . _state = data [ \"onLine\" ] == \"1\" _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , self . _state , ) # entity-specific methods def is_on ( self ) -> bool : \"\"\"Return the status of the switch.\"\"\" return self . _state __init__ ( api_client , device_id , device_name , sensor_type ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required sensor_type str the sensor type from const BINARY_SENSORS required Source code in imouapi/device_entity.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id sensor_type: the sensor type from const BINARY_SENSORS \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = BINARY_SENSOR_ICONS [ sensor_type ] self . _description = BINARY_SENSORS [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = False async_update ( ** kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return if self . _name == \"online\" : # get the online status data = await self . api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data : raise InvalidResponse ( f \"onLine not found in { data } \" ) self . _state = data [ \"onLine\" ] == \"1\" _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , self . _state , ) get_description () \u00b6 Get description. Source code in imouapi/device_entity.py 165 166 167 def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description get_device_id () \u00b6 Get device id. Source code in imouapi/device_entity.py 153 154 155 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id get_icon () \u00b6 Get icon. Source code in imouapi/device_entity.py 161 162 163 def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon get_name () \u00b6 Get name. Source code in imouapi/device_entity.py 157 158 159 def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name is_on () \u00b6 Return the status of the switch. Source code in imouapi/device_entity.py 192 193 194 def is_on ( self ) -> bool : \"\"\"Return the status of the switch.\"\"\" return self . _state set_enabled ( value ) \u00b6 Set enable. Source code in imouapi/device_entity.py 169 170 171 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value ImouEntity \u00b6 Bases: ABC A representation of a sensor within an Imou Device. Source code in imouapi/device_entity.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class ImouEntity ( ABC ): \"\"\"A representation of a sensor within an Imou Device.\"\"\" @abstractmethod async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" @abstractmethod def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" @abstractmethod def get_name ( self ) -> str : \"\"\"Get name.\"\"\" @abstractmethod def get_description ( self ) -> str : \"\"\"Get description.\"\"\" @abstractmethod def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" @abstractmethod def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" async_update ( ** kwargs ) async abstractmethod \u00b6 Update the entity. Source code in imouapi/device_entity.py 16 17 18 @abstractmethod async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" get_description () abstractmethod \u00b6 Get description. Source code in imouapi/device_entity.py 28 29 30 @abstractmethod def get_description ( self ) -> str : \"\"\"Get description.\"\"\" get_device_id () abstractmethod \u00b6 Get device id. Source code in imouapi/device_entity.py 20 21 22 @abstractmethod def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" get_icon () abstractmethod \u00b6 Get icon. Source code in imouapi/device_entity.py 32 33 34 @abstractmethod def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" get_name () abstractmethod \u00b6 Get name. Source code in imouapi/device_entity.py 24 25 26 @abstractmethod def get_name ( self ) -> str : \"\"\"Get name.\"\"\" set_enabled ( value ) abstractmethod \u00b6 Set enable. Source code in imouapi/device_entity.py 36 37 38 @abstractmethod def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" ImouSensor \u00b6 Bases: ImouEntity A representation of a sensor within an IMOU Device. Source code in imouapi/device_entity.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class ImouSensor ( ImouEntity ): \"\"\"A representation of a sensor within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id sensor_type: the sensor type from const SENSORS \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = SENSOR_ICONS [ sensor_type ] self . _description = SENSORS [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = \"\" def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return if self . _name == \"lastAlarm\" : # get the time of the last alarm data = await self . api_client . async_api_getAlarmMessage ( self . _device_id ) if \"alarms\" not in data : raise InvalidResponse ( f \"alarms not found in { data } \" ) if len ( data [ \"alarms\" ]) > 0 : alarm = data [ \"alarms\" ][ 0 ] if \"time\" not in alarm : raise InvalidResponse ( f \"time not found in { alarm } \" ) # convert it into ISO 8601 and store it iso_time = datetime . fromtimestamp ( alarm [ \"time\" ]) . isoformat () self . _state = iso_time _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , self . _state , ) # entity-specific methods def get_state ( self ) -> str : \"\"\"Return the state.\"\"\" return self . _state def get_device_class ( self ) -> str : \"\"\"Return de device class of the sensor.\"\"\" if self . _name == \"lastAlarm\" : return \"timestamp\" return \"\" __init__ ( api_client , device_id , device_name , sensor_type ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required sensor_type str the sensor type from const SENSORS required Source code in imouapi/device_entity.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id sensor_type: the sensor type from const SENSORS \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = SENSOR_ICONS [ sensor_type ] self . _description = SENSORS [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = \"\" async_update ( ** kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return if self . _name == \"lastAlarm\" : # get the time of the last alarm data = await self . api_client . async_api_getAlarmMessage ( self . _device_id ) if \"alarms\" not in data : raise InvalidResponse ( f \"alarms not found in { data } \" ) if len ( data [ \"alarms\" ]) > 0 : alarm = data [ \"alarms\" ][ 0 ] if \"time\" not in alarm : raise InvalidResponse ( f \"time not found in { alarm } \" ) # convert it into ISO 8601 and store it iso_time = datetime . fromtimestamp ( alarm [ \"time\" ]) . isoformat () self . _state = iso_time _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , self . _state , ) get_description () \u00b6 Get description. Source code in imouapi/device_entity.py 81 82 83 def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description get_device_class () \u00b6 Return de device class of the sensor. Source code in imouapi/device_entity.py 118 119 120 121 122 def get_device_class ( self ) -> str : \"\"\"Return de device class of the sensor.\"\"\" if self . _name == \"lastAlarm\" : return \"timestamp\" return \"\" get_device_id () \u00b6 Get device id. Source code in imouapi/device_entity.py 69 70 71 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id get_icon () \u00b6 Get icon. Source code in imouapi/device_entity.py 77 78 79 def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon get_name () \u00b6 Get name. Source code in imouapi/device_entity.py 73 74 75 def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name get_state () \u00b6 Return the state. Source code in imouapi/device_entity.py 114 115 116 def get_state ( self ) -> str : \"\"\"Return the state.\"\"\" return self . _state set_enabled ( value ) \u00b6 Set enable. Source code in imouapi/device_entity.py 85 86 87 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value ImouSwitch \u00b6 Bases: ImouEntity A representation of a switch within an IMOU Device. Source code in imouapi/device_entity.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 class ImouSwitch ( ImouEntity ): \"\"\"A representation of a switch within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the name of the device sensor_type: the sensor type (from the SWITCHES constant) \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = SWITCH_ICONS [ sensor_type ] self . _description = IMOU_SWITCHES [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = False def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return data = await self . api_client . async_api_getDeviceCameraStatus ( self . _device_id , self . _name ) _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , data [ \"status\" ] . upper (), ) self . _state = data [ \"status\" ] == \"on\" # entity-specific methods def is_on ( self ) -> bool : \"\"\"Return the status of the switch.\"\"\" return self . _state async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not self . _enabled : return _LOGGER . debug ( \"[ %s ] %s requsted to turn ON\" , self . _device_name , self . _description ) await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not self . _enabled : return _LOGGER . debug ( \"[ %s ] %s requsted to turn OFF\" , self . _device_name , self . _description ) await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not self . _enabled : return if self . _state : await self . async_turn_off () else : await self . async_turn_on () __init__ ( api_client , device_id , device_name , sensor_type ) \u00b6 Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the name of the device required sensor_type str the sensor type (from the SWITCHES constant) required Source code in imouapi/device_entity.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the name of the device sensor_type: the sensor type (from the SWITCHES constant) \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = SWITCH_ICONS [ sensor_type ] self . _description = IMOU_SWITCHES [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = False async_toggle ( ** kwargs ) async \u00b6 Toggle the entity. Source code in imouapi/device_entity.py 281 282 283 284 285 286 287 288 async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not self . _enabled : return if self . _state : await self . async_turn_off () else : await self . async_turn_on () async_turn_off ( ** kwargs ) async \u00b6 Turn the entity off. Source code in imouapi/device_entity.py 273 274 275 276 277 278 279 async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not self . _enabled : return _LOGGER . debug ( \"[ %s ] %s requsted to turn OFF\" , self . _device_name , self . _description ) await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False async_turn_on ( ** kwargs ) async \u00b6 Turn the entity on. Source code in imouapi/device_entity.py 265 266 267 268 269 270 271 async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not self . _enabled : return _LOGGER . debug ( \"[ %s ] %s requsted to turn ON\" , self . _device_name , self . _description ) await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True async_update ( ** kwargs ) async \u00b6 Update the entity. Source code in imouapi/device_entity.py 246 247 248 249 250 251 252 253 254 255 256 257 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return data = await self . api_client . async_api_getDeviceCameraStatus ( self . _device_id , self . _name ) _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , data [ \"status\" ] . upper (), ) self . _state = data [ \"status\" ] == \"on\" get_description () \u00b6 Get description. Source code in imouapi/device_entity.py 234 235 236 def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description get_device_id () \u00b6 Get device id. Source code in imouapi/device_entity.py 226 227 228 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id get_icon () \u00b6 Get icon. Source code in imouapi/device_entity.py 238 239 240 def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon get_name () \u00b6 Get name. Source code in imouapi/device_entity.py 230 231 232 def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name is_on () \u00b6 Return the status of the switch. Source code in imouapi/device_entity.py 261 262 263 def is_on ( self ) -> bool : \"\"\"Return the status of the switch.\"\"\" return self . _state set_enabled ( value ) \u00b6 Set enable. Source code in imouapi/device_entity.py 242 243 244 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value","title":"device_entity"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor","text":"Bases: ImouEntity A representation of a sensor within an IMOU Device. Source code in imouapi/device_entity.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 class ImouBinarySensor ( ImouEntity ): \"\"\"A representation of a sensor within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id sensor_type: the sensor type from const BINARY_SENSORS \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = BINARY_SENSOR_ICONS [ sensor_type ] self . _description = BINARY_SENSORS [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = False def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return if self . _name == \"online\" : # get the online status data = await self . api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data : raise InvalidResponse ( f \"onLine not found in { data } \" ) self . _state = data [ \"onLine\" ] == \"1\" _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , self . _state , ) # entity-specific methods def is_on ( self ) -> bool : \"\"\"Return the status of the switch.\"\"\" return self . _state","title":"ImouBinarySensor"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required sensor_type str the sensor type from const BINARY_SENSORS required Source code in imouapi/device_entity.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id sensor_type: the sensor type from const BINARY_SENSORS \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = BINARY_SENSOR_ICONS [ sensor_type ] self . _description = BINARY_SENSORS [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = False","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return if self . _name == \"online\" : # get the online status data = await self . api_client . async_api_deviceOnline ( self . _device_id ) if \"onLine\" not in data : raise InvalidResponse ( f \"onLine not found in { data } \" ) self . _state = data [ \"onLine\" ] == \"1\" _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , self . _state , )","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.get_description","text":"Get description. Source code in imouapi/device_entity.py 165 166 167 def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description","title":"get_description()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.get_device_id","text":"Get device id. Source code in imouapi/device_entity.py 153 154 155 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id","title":"get_device_id()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.get_icon","text":"Get icon. Source code in imouapi/device_entity.py 161 162 163 def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon","title":"get_icon()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.get_name","text":"Get name. Source code in imouapi/device_entity.py 157 158 159 def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name","title":"get_name()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.is_on","text":"Return the status of the switch. Source code in imouapi/device_entity.py 192 193 194 def is_on ( self ) -> bool : \"\"\"Return the status of the switch.\"\"\" return self . _state","title":"is_on()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.set_enabled","text":"Set enable. Source code in imouapi/device_entity.py 169 170 171 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value","title":"set_enabled()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity","text":"Bases: ABC A representation of a sensor within an Imou Device. Source code in imouapi/device_entity.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class ImouEntity ( ABC ): \"\"\"A representation of a sensor within an Imou Device.\"\"\" @abstractmethod async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" @abstractmethod def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" @abstractmethod def get_name ( self ) -> str : \"\"\"Get name.\"\"\" @abstractmethod def get_description ( self ) -> str : \"\"\"Get description.\"\"\" @abstractmethod def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" @abstractmethod def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\"","title":"ImouEntity"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 16 17 18 @abstractmethod async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\"","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_description","text":"Get description. Source code in imouapi/device_entity.py 28 29 30 @abstractmethod def get_description ( self ) -> str : \"\"\"Get description.\"\"\"","title":"get_description()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_device_id","text":"Get device id. Source code in imouapi/device_entity.py 20 21 22 @abstractmethod def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\"","title":"get_device_id()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_icon","text":"Get icon. Source code in imouapi/device_entity.py 32 33 34 @abstractmethod def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\"","title":"get_icon()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_name","text":"Get name. Source code in imouapi/device_entity.py 24 25 26 @abstractmethod def get_name ( self ) -> str : \"\"\"Get name.\"\"\"","title":"get_name()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.set_enabled","text":"Set enable. Source code in imouapi/device_entity.py 36 37 38 @abstractmethod def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\"","title":"set_enabled()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor","text":"Bases: ImouEntity A representation of a sensor within an IMOU Device. Source code in imouapi/device_entity.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class ImouSensor ( ImouEntity ): \"\"\"A representation of a sensor within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id sensor_type: the sensor type from const SENSORS \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = SENSOR_ICONS [ sensor_type ] self . _description = SENSORS [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = \"\" def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return if self . _name == \"lastAlarm\" : # get the time of the last alarm data = await self . api_client . async_api_getAlarmMessage ( self . _device_id ) if \"alarms\" not in data : raise InvalidResponse ( f \"alarms not found in { data } \" ) if len ( data [ \"alarms\" ]) > 0 : alarm = data [ \"alarms\" ][ 0 ] if \"time\" not in alarm : raise InvalidResponse ( f \"time not found in { alarm } \" ) # convert it into ISO 8601 and store it iso_time = datetime . fromtimestamp ( alarm [ \"time\" ]) . isoformat () self . _state = iso_time _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , self . _state , ) # entity-specific methods def get_state ( self ) -> str : \"\"\"Return the state.\"\"\" return self . _state def get_device_class ( self ) -> str : \"\"\"Return de device class of the sensor.\"\"\" if self . _name == \"lastAlarm\" : return \"timestamp\" return \"\"","title":"ImouSensor"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required sensor_type str the sensor type from const SENSORS required Source code in imouapi/device_entity.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id sensor_type: the sensor type from const SENSORS \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = SENSOR_ICONS [ sensor_type ] self . _description = SENSORS [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = \"\"","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return if self . _name == \"lastAlarm\" : # get the time of the last alarm data = await self . api_client . async_api_getAlarmMessage ( self . _device_id ) if \"alarms\" not in data : raise InvalidResponse ( f \"alarms not found in { data } \" ) if len ( data [ \"alarms\" ]) > 0 : alarm = data [ \"alarms\" ][ 0 ] if \"time\" not in alarm : raise InvalidResponse ( f \"time not found in { alarm } \" ) # convert it into ISO 8601 and store it iso_time = datetime . fromtimestamp ( alarm [ \"time\" ]) . isoformat () self . _state = iso_time _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , self . _state , )","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.get_description","text":"Get description. Source code in imouapi/device_entity.py 81 82 83 def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description","title":"get_description()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.get_device_class","text":"Return de device class of the sensor. Source code in imouapi/device_entity.py 118 119 120 121 122 def get_device_class ( self ) -> str : \"\"\"Return de device class of the sensor.\"\"\" if self . _name == \"lastAlarm\" : return \"timestamp\" return \"\"","title":"get_device_class()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.get_device_id","text":"Get device id. Source code in imouapi/device_entity.py 69 70 71 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id","title":"get_device_id()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.get_icon","text":"Get icon. Source code in imouapi/device_entity.py 77 78 79 def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon","title":"get_icon()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.get_name","text":"Get name. Source code in imouapi/device_entity.py 73 74 75 def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name","title":"get_name()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.get_state","text":"Return the state. Source code in imouapi/device_entity.py 114 115 116 def get_state ( self ) -> str : \"\"\"Return the state.\"\"\" return self . _state","title":"get_state()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.set_enabled","text":"Set enable. Source code in imouapi/device_entity.py 85 86 87 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value","title":"set_enabled()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch","text":"Bases: ImouEntity A representation of a switch within an IMOU Device. Source code in imouapi/device_entity.py 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 class ImouSwitch ( ImouEntity ): \"\"\"A representation of a switch within an IMOU Device.\"\"\" def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the name of the device sensor_type: the sensor type (from the SWITCHES constant) \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = SWITCH_ICONS [ sensor_type ] self . _description = IMOU_SWITCHES [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = False def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return data = await self . api_client . async_api_getDeviceCameraStatus ( self . _device_id , self . _name ) _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , data [ \"status\" ] . upper (), ) self . _state = data [ \"status\" ] == \"on\" # entity-specific methods def is_on ( self ) -> bool : \"\"\"Return the status of the switch.\"\"\" return self . _state async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not self . _enabled : return _LOGGER . debug ( \"[ %s ] %s requsted to turn ON\" , self . _device_name , self . _description ) await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not self . _enabled : return _LOGGER . debug ( \"[ %s ] %s requsted to turn OFF\" , self . _device_name , self . _description ) await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not self . _enabled : return if self . _state : await self . async_turn_off () else : await self . async_turn_on ()","title":"ImouSwitch"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.__init__","text":"Initialize the instance. Parameters: Name Type Description Default api_client ImouAPIClient an instance ofthe API client required device_id str the device id required device_name str the name of the device required sensor_type str the sensor type (from the SWITCHES constant) required Source code in imouapi/device_entity.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 def __init__ ( self , api_client : ImouAPIClient , device_id : str , device_name : str , sensor_type : str , ) -> None : \"\"\" Initialize the instance. Parameters: api_client: an instance ofthe API client device_id: the device id device_name: the name of the device sensor_type: the sensor type (from the SWITCHES constant) \"\"\" self . api_client = api_client self . _device_id = device_id self . _device_name = device_name self . _name = sensor_type self . _icon = SWITCH_ICONS [ sensor_type ] self . _description = IMOU_SWITCHES [ sensor_type ] self . _enabled = True # keep track of the status of the sensor self . _state = False","title":"__init__()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_toggle","text":"Toggle the entity. Source code in imouapi/device_entity.py 281 282 283 284 285 286 287 288 async def async_toggle ( self , ** kwargs ): \"\"\"Toggle the entity.\"\"\" if not self . _enabled : return if self . _state : await self . async_turn_off () else : await self . async_turn_on ()","title":"async_toggle()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_turn_off","text":"Turn the entity off. Source code in imouapi/device_entity.py 273 274 275 276 277 278 279 async def async_turn_off ( self , ** kwargs ): \"\"\"Turn the entity off.\"\"\" if not self . _enabled : return _LOGGER . debug ( \"[ %s ] %s requsted to turn OFF\" , self . _device_name , self . _description ) await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , False ) self . _state = False","title":"async_turn_off()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_turn_on","text":"Turn the entity on. Source code in imouapi/device_entity.py 265 266 267 268 269 270 271 async def async_turn_on ( self , ** kwargs ): \"\"\"Turn the entity on.\"\"\" if not self . _enabled : return _LOGGER . debug ( \"[ %s ] %s requsted to turn ON\" , self . _device_name , self . _description ) await self . api_client . async_api_setDeviceCameraStatus ( self . _device_id , self . _name , True ) self . _state = True","title":"async_turn_on()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_update","text":"Update the entity. Source code in imouapi/device_entity.py 246 247 248 249 250 251 252 253 254 255 256 257 async def async_update ( self , ** kwargs ): \"\"\"Update the entity.\"\"\" if not self . _enabled : return data = await self . api_client . async_api_getDeviceCameraStatus ( self . _device_id , self . _name ) _LOGGER . debug ( \"[ %s ] updating %s , value is %s \" , self . _device_name , self . _description , data [ \"status\" ] . upper (), ) self . _state = data [ \"status\" ] == \"on\"","title":"async_update()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.get_description","text":"Get description. Source code in imouapi/device_entity.py 234 235 236 def get_description ( self ) -> str : \"\"\"Get description.\"\"\" return self . _description","title":"get_description()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.get_device_id","text":"Get device id. Source code in imouapi/device_entity.py 226 227 228 def get_device_id ( self ) -> str : \"\"\"Get device id.\"\"\" return self . _device_id","title":"get_device_id()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.get_icon","text":"Get icon. Source code in imouapi/device_entity.py 238 239 240 def get_icon ( self ) -> str : \"\"\"Get icon.\"\"\" return self . _icon","title":"get_icon()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.get_name","text":"Get name. Source code in imouapi/device_entity.py 230 231 232 def get_name ( self ) -> str : \"\"\"Get name.\"\"\" return self . _name","title":"get_name()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.is_on","text":"Return the status of the switch. Source code in imouapi/device_entity.py 261 262 263 def is_on ( self ) -> bool : \"\"\"Return the status of the switch.\"\"\" return self . _state","title":"is_on()"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.set_enabled","text":"Set enable. Source code in imouapi/device_entity.py 242 243 244 def set_enabled ( self , value : bool ) -> None : \"\"\"Set enable.\"\"\" self . _enabled = value","title":"set_enabled()"},{"location":"modules/exceptions/","text":"Library exceptions. APIError \u00b6 Bases: ImouException Remote API error. Source code in imouapi/exceptions.py 60 61 62 63 64 65 class APIError ( ImouException ): \"\"\"Remote API error.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"api_error\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 63 64 65 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"api_error\" ConnectionFailed \u00b6 Bases: ImouException Failed to connect to the API. Source code in imouapi/exceptions.py 36 37 38 39 40 41 class ConnectionFailed ( ImouException ): \"\"\"Failed to connect to the API.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"connection_failed\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 39 40 41 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"connection_failed\" DeviceOffline \u00b6 Bases: ImouException Device is offline. Source code in imouapi/exceptions.py 76 77 78 79 80 81 class DeviceOffline ( ImouException ): \"\"\"Device is offline.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"device_offline\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 79 80 81 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"device_offline\" ImouException \u00b6 Bases: Exception Base exception. Source code in imouapi/exceptions.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class ImouException ( Exception ): \"\"\"Base exception.\"\"\" def __init__ ( self , message : str = \"\" ) -> None : \"\"\"Initialize.\"\"\" self . message = message super () . __init__ ( self . message ) def to_string ( self ) -> str : \"\"\"Return the exception as a string.\"\"\" return f \" { self . __class__ . __name__ } : { self . message } \\n \" + self . traceback () def traceback ( self ) -> str : \"\"\"Return the traceback as a string.\"\"\" etype , value , trace = sys . exc_info () return \"\" . join ( traceback . format_exception ( etype , value , trace , None )) def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"generic_error\" __init__ ( message = '' ) \u00b6 Initialize. Source code in imouapi/exceptions.py 9 10 11 12 def __init__ ( self , message : str = \"\" ) -> None : \"\"\"Initialize.\"\"\" self . message = message super () . __init__ ( self . message ) get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 23 24 25 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"generic_error\" to_string () \u00b6 Return the exception as a string. Source code in imouapi/exceptions.py 14 15 16 def to_string ( self ) -> str : \"\"\"Return the exception as a string.\"\"\" return f \" { self . __class__ . __name__ } : { self . message } \\n \" + self . traceback () traceback () \u00b6 Return the traceback as a string. Source code in imouapi/exceptions.py 18 19 20 21 def traceback ( self ) -> str : \"\"\"Return the traceback as a string.\"\"\" etype , value , trace = sys . exc_info () return \"\" . join ( traceback . format_exception ( etype , value , trace , None )) InvalidConfiguration \u00b6 Bases: ImouException Invalid App Id or App Secret provided. Source code in imouapi/exceptions.py 44 45 46 47 48 49 class InvalidConfiguration ( ImouException ): \"\"\"Invalid App Id or App Secret provided.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_configuration\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 47 48 49 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_configuration\" InvalidResponse \u00b6 Bases: ImouException Malformed or unexpected API response. Source code in imouapi/exceptions.py 68 69 70 71 72 73 class InvalidResponse ( ImouException ): \"\"\"Malformed or unexpected API response.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_reponse\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 71 72 73 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_reponse\" NotAuthorized \u00b6 Bases: ImouException Not authorized to operate on the device or invalid device id. Source code in imouapi/exceptions.py 52 53 54 55 56 57 class NotAuthorized ( ImouException ): \"\"\"Not authorized to operate on the device or invalid device id.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_authorized\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 55 56 57 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_authorized\" NotConnected \u00b6 Bases: ImouException Action requested but not yet connected to the API. Source code in imouapi/exceptions.py 28 29 30 31 32 33 class NotConnected ( ImouException ): \"\"\"Action requested but not yet connected to the API.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_connected\" get_title () \u00b6 Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 31 32 33 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_connected\"","title":"exceptions"},{"location":"modules/exceptions/#imouapi.exceptions.APIError","text":"Bases: ImouException Remote API error. Source code in imouapi/exceptions.py 60 61 62 63 64 65 class APIError ( ImouException ): \"\"\"Remote API error.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"api_error\"","title":"APIError"},{"location":"modules/exceptions/#imouapi.exceptions.APIError.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 63 64 65 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"api_error\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.ConnectionFailed","text":"Bases: ImouException Failed to connect to the API. Source code in imouapi/exceptions.py 36 37 38 39 40 41 class ConnectionFailed ( ImouException ): \"\"\"Failed to connect to the API.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"connection_failed\"","title":"ConnectionFailed"},{"location":"modules/exceptions/#imouapi.exceptions.ConnectionFailed.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 39 40 41 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"connection_failed\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.DeviceOffline","text":"Bases: ImouException Device is offline. Source code in imouapi/exceptions.py 76 77 78 79 80 81 class DeviceOffline ( ImouException ): \"\"\"Device is offline.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"device_offline\"","title":"DeviceOffline"},{"location":"modules/exceptions/#imouapi.exceptions.DeviceOffline.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 79 80 81 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"device_offline\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException","text":"Bases: Exception Base exception. Source code in imouapi/exceptions.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class ImouException ( Exception ): \"\"\"Base exception.\"\"\" def __init__ ( self , message : str = \"\" ) -> None : \"\"\"Initialize.\"\"\" self . message = message super () . __init__ ( self . message ) def to_string ( self ) -> str : \"\"\"Return the exception as a string.\"\"\" return f \" { self . __class__ . __name__ } : { self . message } \\n \" + self . traceback () def traceback ( self ) -> str : \"\"\"Return the traceback as a string.\"\"\" etype , value , trace = sys . exc_info () return \"\" . join ( traceback . format_exception ( etype , value , trace , None )) def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"generic_error\"","title":"ImouException"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.__init__","text":"Initialize. Source code in imouapi/exceptions.py 9 10 11 12 def __init__ ( self , message : str = \"\" ) -> None : \"\"\"Initialize.\"\"\" self . message = message super () . __init__ ( self . message )","title":"__init__()"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 23 24 25 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"generic_error\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.to_string","text":"Return the exception as a string. Source code in imouapi/exceptions.py 14 15 16 def to_string ( self ) -> str : \"\"\"Return the exception as a string.\"\"\" return f \" { self . __class__ . __name__ } : { self . message } \\n \" + self . traceback ()","title":"to_string()"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.traceback","text":"Return the traceback as a string. Source code in imouapi/exceptions.py 18 19 20 21 def traceback ( self ) -> str : \"\"\"Return the traceback as a string.\"\"\" etype , value , trace = sys . exc_info () return \"\" . join ( traceback . format_exception ( etype , value , trace , None ))","title":"traceback()"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidConfiguration","text":"Bases: ImouException Invalid App Id or App Secret provided. Source code in imouapi/exceptions.py 44 45 46 47 48 49 class InvalidConfiguration ( ImouException ): \"\"\"Invalid App Id or App Secret provided.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_configuration\"","title":"InvalidConfiguration"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidConfiguration.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 47 48 49 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_configuration\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidResponse","text":"Bases: ImouException Malformed or unexpected API response. Source code in imouapi/exceptions.py 68 69 70 71 72 73 class InvalidResponse ( ImouException ): \"\"\"Malformed or unexpected API response.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_reponse\"","title":"InvalidResponse"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidResponse.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 71 72 73 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"invalid_reponse\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.NotAuthorized","text":"Bases: ImouException Not authorized to operate on the device or invalid device id. Source code in imouapi/exceptions.py 52 53 54 55 56 57 class NotAuthorized ( ImouException ): \"\"\"Not authorized to operate on the device or invalid device id.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_authorized\"","title":"NotAuthorized"},{"location":"modules/exceptions/#imouapi.exceptions.NotAuthorized.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 55 56 57 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_authorized\"","title":"get_title()"},{"location":"modules/exceptions/#imouapi.exceptions.NotConnected","text":"Bases: ImouException Action requested but not yet connected to the API. Source code in imouapi/exceptions.py 28 29 30 31 32 33 class NotConnected ( ImouException ): \"\"\"Action requested but not yet connected to the API.\"\"\" def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_connected\"","title":"NotConnected"},{"location":"modules/exceptions/#imouapi.exceptions.NotConnected.get_title","text":"Return the title of the exception which will be then translated. Source code in imouapi/exceptions.py 31 32 33 def get_title ( self ) -> str : \"\"\"Return the title of the exception which will be then translated.\"\"\" return \"not_connected\"","title":"get_title()"}]}